<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://onion66.gitee.io/blog</id>
    <title>Stay hungry , Stay foolish • Posts by &#34;课程学习&#34; tag</title>
    <link href="http://onion66.gitee.io/blog" />
    <updated>2021-10-31T21:32:00.000Z</updated>
    <category term="源码解析" />
    <category term="性能优化" />
    <category term="并发" />
    <category term="图形绘制" />
    <category term="课程学习" />
    <category term="理论学习" />
    <category term="黑科技" />
    <entry>
        <id>http://onion66.gitee.io/blog/2021/11/01/MgnT9VQ3PhWZOJAq/</id>
        <title>课程 - 编码与加密</title>
        <link rel="alternate" href="http://onion66.gitee.io/blog/2021/11/01/MgnT9VQ3PhWZOJAq/"/>
        <content type="html">&lt;h2 id=&#34;加密&#34;&gt;加密&lt;a title=&#34;#加密&#34; href=&#34;#加密&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;加密(整容)是通过Intranet、Extranet和Internet进行安全的信息交换的基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用加密&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密算法&lt;/li&gt;
&lt;li&gt;非对称加密算法&lt;/li&gt;
&lt;li&gt;哈希算法&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;对称加密&#34;&gt;对称加密&lt;a title=&#34;#对称加密&#34; href=&#34;#对称加密&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使⽤用密钥和加密算法对数据进行转换，得到的无意义数据即为密⽂; 使用密钥和解密算法对密⽂进行逆向转换，得到原数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5bxS8f.png&#34; alt=&#34;5bxS8f.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;p&gt;算法：DES、AES&lt;/p&gt;
&lt;h3 id=&#34;非对称加密&#34;&gt;非对称加密&lt;a title=&#34;#非对称加密&#34; href=&#34;#非对称加密&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使⽤公钥对数据进行加密得到密文;使⽤用私钥对数据进⾏解密得到原数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5bxDZd.png&#34; alt=&#34;5bxDZd.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;p&gt;算法：RSA、DSA&lt;/p&gt;
&lt;p&gt;完整的非对称加密过程:&lt;br&gt;
&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qdbl9.png&#34; alt=&#34;5qdbl9.png&#34; loading=&#34;lazy&#34;&gt;&lt;br&gt;
对数据进行签名时，实际上，是对数据的hash值（摘要）进行签名（加密），解密时，是对原数据进行hash，得到摘要，再将加密过的摘要进行解密，将得到的两者对比，如果一致就验证通过&lt;/p&gt;
&lt;h4 id=&#34;公钥与私钥&#34;&gt;公钥与私钥&lt;a title=&#34;#公钥与私钥&#34; href=&#34;#公钥与私钥&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;加密密钥就是公钥，解密密钥就是私钥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将原数据通过我的私钥，也就是签名，进行加密，得到签名数据，别人拿我的公钥对我的签名数据进行解密（也就是验证的过程），得到的就是我要发送的原数据。签名数据只有我能造出来，因为只有我拥有我的私钥，这就证明了这个数据是我写出来的。也就是所谓的签名的作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5bzD6U.png&#34; alt=&#34;5bzD6U.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;签名和验证&#34;&gt;签名和验证&lt;a title=&#34;#签名和验证&#34; href=&#34;#签名和验证&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;签名和验证是拿私钥加密（签名），公钥解密（验证）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qSkhq.png&#34; alt=&#34;5qSkhq.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编码&#34;&gt;编码&lt;a title=&#34;#编码&#34; href=&#34;#编码&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;编码(化妆)是信息从一种形式或格式转换为另一种形式的过程。解码，是编码的逆过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;常用编码&#34;&gt;常用编码&lt;a title=&#34;#常用编码&#34; href=&#34;#常用编码&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Base64， 16进制，Base32
&lt;ul&gt;
&lt;li&gt;将原来的信息用另外一种编码机制替换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多语种的编码 UTF-8, UTF-16,UTF-32, Unicode, ISO8859-1, GBK, GB2312
&lt;ul&gt;
&lt;li&gt;主要是对各种语言的编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BER/DER编码&lt;/li&gt;
&lt;li&gt;HTML编码，JS编码，URL编码
&lt;ul&gt;
&lt;li&gt;针对脚本语言或者标签语言中的字符串中的特殊字符进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;base64&#34;&gt;Base64&lt;a title=&#34;#base64&#34; href=&#34;#base64&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;将二进制数据转换成由64个字符组成的字符串的编码算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qt0Cd.png&#34; alt=&#34;5qt0Cd.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;p&gt;编码示例:&lt;br&gt;
&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qNYzn.png&#34; alt=&#34;5qNYzn.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;作用: 让原数据具有字符串所具有的特性，可以放在URL中传输，可以保存到文本文件，可以通过普通的聊天软件进行文本传输&lt;/p&gt;
&lt;p&gt;Base64加密图片会更加安全和高效吗？&lt;br&gt;
不会，Base64是公开的算法，加密和解密都是公开的，任何人都可以解密，因此并不会更安全。通过Base64加密的文件或数据，都会增大约1/3，降低网络性能，增大用户流量，因此也不存在更高效的问题&lt;/p&gt;
&lt;h3 id=&#34;应用领域&#34;&gt;应用领域&lt;a title=&#34;#应用领域&#34; href=&#34;#应用领域&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;压缩与解压缩&#34;&gt;压缩与解压缩&lt;a title=&#34;#压缩与解压缩&#34; href=&#34;#压缩与解压缩&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;压缩属于编码过程，解压缩属于解码过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩：把数据换一种方式来存储，以减少存储空间。&lt;br&gt;
解压缩：把压缩后的数据还原成原先的形式，以便使用。&lt;br&gt;
常⻅见压缩算法:DEFLATE（zip）、JPEG、MP3&lt;/p&gt;
&lt;h4 id=&#34;媒体数据的编解码&#34;&gt;媒体数据的编解码&lt;a title=&#34;#媒体数据的编解码&#34; href=&#34;#媒体数据的编解码&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;图片的编码：把图像数据写成 JPG、PNG 等⽂件的编码格式。&lt;br&gt;
图⽚的解码：把 JPG、PNG 等⽂文件中的数据解析成标准的图像数据。&lt;/p&gt;
&lt;h4 id=&#34;序列化与反序列化&#34;&gt;序列化与反序列化&lt;a title=&#34;#序列化与反序列化&#34; href=&#34;#序列化与反序列化&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;序列化: 把数据对象，一般是内存中的，如JVM中的对象，转换成字节序列的过程。&lt;br&gt;
反序列化: 把字节序列重新转换成内存中的对象&lt;/p&gt;
&lt;h4 id=&#34;hash&#34;&gt;Hash&lt;a title=&#34;#hash&#34; href=&#34;#hash&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;把任意数据转换成指定大小范围（通常很小）的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经典算法：MD5、SHA1、SHA256等&lt;/p&gt;
&lt;p&gt;实际用途:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据完整性验证
&lt;ul&gt;
&lt;li&gt;从⽹络上下载文件后，通过比对文件的 Hash 值(例如 MD5、SHA1)，可以确认下载的文件是否有损坏。如果下载的文件 Hash 值和文件提供方给出的 Hash 值一致，则证明下载的文件是完好无损的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;唯一性验证
&lt;ul&gt;
&lt;li&gt;HashCode是一个数据的指纹信息，也就是从这个数据身上采取了足够多的特征来证明“你是你”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速查找: HashCode和HashMap
&lt;ul&gt;
&lt;li&gt;HashCode是数据的内存地址&lt;/li&gt;
&lt;li&gt;HashMap：Key的HashCode是Value的地址，通过Key的HashCode可以找到Value&lt;/li&gt;
&lt;li&gt;在重写equals()时，也必须重写hashCode(),因为如果不重写hashCode()，当使用equals()比较时，hashCode()是Object中的hashCode()，很可能出现用equals()判断相等而用hashCode()判断不相等的情况,甚至也有可能是相反的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隐私保护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hash 是编码吗?&lt;br&gt;
不是。 Hash 是单向过程，往往是不可逆的，无法进行逆向恢复操作，因此 Hash 不属于编码。&lt;/p&gt;
&lt;p&gt;Hash 是加密吗?&lt;br&gt;
不是。Hash 是单向过程，无法进行逆向回复操作，因此 Hash 不属于加密。(记住MD5 不是加密!MD5不可逆)&lt;/p&gt;
</content>
        <category term="课程学习" />
        <updated>2021-10-31T21:32:00.000Z</updated>
    </entry>
    <entry>
        <id>http://onion66.gitee.io/blog/2021/11/01/Qqq7oSBqBc2Zgbrx/</id>
        <title>课程 - 登陆与授权</title>
        <link rel="alternate" href="http://onion66.gitee.io/blog/2021/11/01/Qqq7oSBqBc2Zgbrx/"/>
        <content type="html">&lt;h2 id=&#34;登录授权、tcp/ip、https和代理&#34;&gt;登录授权、TCP/IP、HTTPS和代理&lt;a title=&#34;#登录授权、tcp/ip、https和代理&#34; href=&#34;#登录授权、tcp/ip、https和代理&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;登录：身份认证，确认你是你的过程。&lt;br&gt;
授权：由身份或持有的令牌确认享有某些权限（例如获取用户信息）。登录过程实质上的目的也是为了确认权限&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;http中授权方式&#34;&gt;HTTP中授权方式&lt;a title=&#34;#http中授权方式&#34; href=&#34;#http中授权方式&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;cookie&#34;&gt;Cookie&lt;a title=&#34;#cookie&#34; href=&#34;#cookie&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;使用Cookie管理登录状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qrP4f.png&#34; alt=&#34;5qrP4f.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qrmbn.png&#34; alt=&#34;5qrmbn.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;cookie工作机制&#34;&gt;Cookie工作机制&lt;a title=&#34;#cookie工作机制&#34; href=&#34;#cookie工作机制&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;服务器需要客户端保存的内容，放在Set-Cookie的headers里返回，客户端会自动保存。&lt;/li&gt;
&lt;li&gt;客户端保存的Cookies，会在之后的所有请求里都携带进Cookie header里发回给服务器。&lt;/li&gt;
&lt;li&gt;客户端保存Cookie是按照服务器域名来分类的，例如shop.com发回的Cookie保存下来以后，在之后向games.com的请求中并不会被携带。&lt;/li&gt;
&lt;li&gt;.客户端保存的Cookie在超时后会被删除，没有设置超时时间的Cookie（称作Session Cookie）在浏览器关闭后就会自动删除，另外，服务器也可以主动删除还未过期的客户端Cookies&lt;/li&gt;
&lt;li&gt;Cookie是由服务端管理的，客户端只是被动接受。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;authorization-header&#34;&gt;Authorization Header&lt;a title=&#34;#authorization-header&#34; href=&#34;#authorization-header&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两种主流方式 Basic 和 Beare&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;basic&#34;&gt;Basic&lt;a title=&#34;#basic&#34; href=&#34;#basic&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;格式：Authorization: Basic&amp;lt;username:password(Base64)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;Basic认证过程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;浏览器发送请求到服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                GET / HTTP /&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Host:xxx.xxx.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;服务端发送验证请求&lt;span class=&#34;number&#34;&gt;401&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                HTTP/&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;401&lt;/span&gt; Unauthorised&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Server: bfe/&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.8&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                WWW-Authenticate: Basic realm=&lt;span class=&#34;string&#34;&gt;&amp;quot;XXXXX.com&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Content-&lt;span class=&#34;built_in&#34;&gt;Type&lt;/span&gt;: text/html; charset=utf&lt;span class=&#34;number&#34;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt;客户端收到&lt;span class=&#34;number&#34;&gt;401&lt;/span&gt;返回值后，将自动弹出登录窗口，等待用户输入用户名，密码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;将用户名密码进行Base64编码后发送给服务端进行验证&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                GET / HTTP/&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Host: xxx.xxx.xxx.com&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Authorization: Basic xxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.&lt;/span&gt;服务端取出Authorization中头信息，并与数据库进行比对，如果合法则返回&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;，不合法，则返回&lt;span class=&#34;number&#34;&gt;401&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bearer&#34;&gt;Bearer&lt;a title=&#34;#bearer&#34; href=&#34;#bearer&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight objectivec&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;格式：Authorization: Bearer &amp;lt;bearer token&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;bearer token 的获取方式：通过OAuth2的授权流程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt;OAuth2的流程&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;第三方网站向授权网站申请授权合作，拿到client &lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;和client secret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;用户在使用第三方网站的时候，点击通过授权，第三方网站将跳转授权网站，并将clientid传递给授权网站。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;授权方网站根据clientid，将第三方网站的信息和第三方网站需要的用户权限展示给用户，询问用户是否同意授权。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;5.&lt;/span&gt;当用户点击同意授权，授权方网站返回第三方网站，并传入Authorization code作为用户认可的凭证。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;6.&lt;/span&gt;第三方网站将Authorization code上送给自己的服务器，服务器将Authorization code跟自己服务器端存储的client secret发送给授权方服务器，授权方服务器通过验证后，返回给access token，整个OAuth2流程结束。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;7.&lt;/span&gt;在整个OAuth流程结束后，第三方网站服务器可以试用access token 作用用户授权的token，用此来向授权方网站请求获取用户信息等操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;问题：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            为什么OAuth认证要引入Authorization code，并且需要申请授权的第三方将Authorization code传给第三方服务器，并且通过第三方服务器将Authorization code传递给授权方服务器。然后再获取授权方服务器的access token。这样做的目的是为了通信安全，因为OAuth不强制使用HTTPS，因此需要保证通信路径中存在窃听者的时候，还能保证足够的安全。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.&lt;/span&gt;第三方APP通过微信登录的流程：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            这是一个标准的OAuth2的流程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;第三方APP向腾讯方申请合作，拿到client &lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt; 和client secret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;当用户在第三方APP上需要微信登录的时候，第三方APP将使用微信SDK打开微信授权页面，并且传入client &lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;作为自己授权&lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt;微信拿到第三方app的client &lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;后，提交微信后台，验证成功，则返回给第三方app Authorization code。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;第三方app拿到Authorization code后，将Authorization code传递给自己的服务器，第三方app的服务端将Authorization code 与 client secret 传递给微信后台，微信后台验证后返回access token。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;5.&lt;/span&gt;第三方app后台通过access token 想微信后台请求获取用户信息，微信验证通过后，则返回用户信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;6.&lt;/span&gt;服务器接受到用户信息后，在自己的数据库中建立一个账户，并将从微信获取的用户信息填入数据库中。并创建用户&lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;，并将此&lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;与微信&lt;span class=&#34;keyword&#34;&gt;id&lt;/span&gt;做好关联。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;7.&lt;/span&gt;当第三方app后台创建好用户后，想客户端的请求发出响应，并回传会刚刚创建的用户信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;8.&lt;/span&gt;客户端响应，获取用户信息，登录成功。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;6.&lt;/span&gt;在自家APP中使用Bearer token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            部分app会在api设计中，将登录和授权设计出类似于OAuth2的过程，他会简化掉Authorization code的概念。既直接在接口请求成功后，返回access token，然后再之后的客户端的请求中，使用这个access token 作为Bearer token进行用户操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;7.&lt;/span&gt;Refresh token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Access token 都会有失效时间，当他失效后，第三方app的服务端会通过refresh token 接口传入refresh token 来获取新的access token。这样的的原因是安全，因为refresh token是放置在服务端的，即使access token被窃取，他也是有失效时间的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;tcp/ip&#34;&gt;TCP/IP&lt;a title=&#34;#tcp/ip&#34; href=&#34;#tcp/ip&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;两台计算机之间的通讯是通过TCP/IP协议在因特网上进行的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TCP：Transmission Control Protocol 传输控制协议, 用于应用程序之间的通信&lt;br&gt;
IP：Internet Protocol 网际协议, 用于计算机之间的通信&lt;/p&gt;
&lt;h4 id=&#34;分层&#34;&gt;分层&lt;a title=&#34;#分层&#34; href=&#34;#分层&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;因为网络具有不稳定性,要保证通信正常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5qccSf.png&#34; alt=&#34;5qccSf.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;tcp连接&#34;&gt;TCP连接&lt;a title=&#34;#tcp连接&#34; href=&#34;#tcp连接&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;通信双方建立确认「可以通信」，不会将对方的消息丢弃，即为「建立连接」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;连接建立&#34;&gt;连接建立&lt;a title=&#34;#连接建立&#34; href=&#34;#连接建立&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5LRCDS.png&#34; alt=&#34;5LRCDS.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;连接关闭&#34;&gt;连接关闭&lt;a title=&#34;#连接关闭&#34; href=&#34;#连接关闭&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/28/5LRGCR.png&#34; alt=&#34;5LRGCR.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;长连接&#34;&gt;长连接&lt;a title=&#34;#长连接&#34; href=&#34;#长连接&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;强制不让连接的通道关闭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TCP短连接
&lt;ul&gt;
&lt;li&gt;client向server发起连接请求，server接到请求，然后双方建立连接。client向server 发送消息，server回应client，然后一次读写就完成了&lt;/li&gt;
&lt;li&gt;一般的server不会回复完client后立即关闭连接的, 所以一般是client先发起close操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP长连接
&lt;ul&gt;
&lt;li&gt;client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎样实现长连接？&lt;br&gt;
⼼跳。即在一定间隔时间内，使⽤TCP连接发送超短无意义消息来让网关不能将⾃己定义为「空闲连接」，从而防止网关将⾃己的连接关闭&lt;/p&gt;
&lt;h3 id=&#34;https&#34;&gt;HTTPS&lt;a title=&#34;#https&#34; href=&#34;#https&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP over SSL的简称，即工作在SSL(或TLS)上的HTTP。是加密通信的HTTP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;工作原理&#34;&gt;工作原理&lt;a title=&#34;#工作原理&#34; href=&#34;#工作原理&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在客户端和服务器之间协商出一套对称密钥，每次发送消息之前将内容加密，收到之后解密，达到内容的加密传输&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么不直接用非对称加密?&lt;br&gt;
非对称加密由于使用了复杂的数学原理，因此计算相当复杂，如果完全使用非对称加密来加密通信内容，会严重影响网络通信的性能&lt;/p&gt;
&lt;h4 id=&#34;https流程&#34;&gt;HTTPS流程&lt;a title=&#34;#https流程&#34; href=&#34;#https流程&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;客户端请求建立TLS连接&lt;/li&gt;
&lt;li&gt;服务器发回证书&lt;/li&gt;
&lt;li&gt;客户端验证服务器证书&lt;/li&gt;
&lt;li&gt;客户端信任服务器后，和服务器协商对称密钥&lt;/li&gt;
&lt;li&gt;使用对称密钥开始通信&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;about&#34;&gt;About&lt;a title=&#34;#about&#34; href=&#34;#about&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/2a890d952461&#34; target=&#34;_blank&#34;&gt;登录授权、TCP/IP、HTTPS和代理&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://blog.csdn.net/kimlllll/article/details/103041225&#34; target=&#34;_blank&#34;&gt;编码、加密、Hash、TCP/IP、HTTPS&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/hsicen/HencoderPlus/blob/master/note/04-TCPIP%E5%92%8CHTTPS.md&#34; target=&#34;_blank&#34;&gt;HencoderPlus/04-TCPIP和HTTPS&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="课程学习" />
        <updated>2021-10-31T21:31:00.000Z</updated>
    </entry>
</feed>
