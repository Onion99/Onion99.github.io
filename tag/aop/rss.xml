<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Stay hungry , Stay foolish • Posts by &#34;aop&#34; tag</title>
        <link>https://onion99.github.io</link>
        <description>巴拉巴拉</description>
        <language>zh-Hans</language>
        <pubDate>Sat, 12 Mar 2022 17:45:36 +0800</pubDate>
        <lastBuildDate>Sat, 12 Mar 2022 17:45:36 +0800</lastBuildDate>
        <category>源码解析</category>
        <category>AOP</category>
        <category>性能优化</category>
        <category>并发</category>
        <category>图形绘制</category>
        <category>计算机基础</category>
        <category>安全</category>
        <category>网络</category>
        <category>理论学习</category>
        <category>黑科技</category>
        <item>
            <guid isPermalink="true">https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/</guid>
            <title>Android AOP - ASM+Transform</title>
            <link>https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/</link>
            <category>AOP</category>
            <pubDate>Sat, 12 Mar 2022 17:45:36 +0800</pubDate>
            <description><![CDATA[ &lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/03/10/bhoW8O.png&#34; alt=&#34;bhoW8O.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;transform&#34;&gt;Transform&lt;a title=&#34;#transform&#34; href=&#34;#transform&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Gradle Plugin 从 1.5.0 开始支持 Transform API，以允许第三方插件在经过编译的 .class 文件转换为 .dex 文件之前对其进行操纵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;普通编译过程：&lt;br&gt;
&lt;img src=&#34;https://s1.ax1x.com/2022/03/11/bINI8f.png&#34; alt=&#34;bINI8f.png&#34; loading=&#34;lazy&#34;&gt;&lt;br&gt;
可以看到Android 构建流程是一套流水线的工作机制，每一个的构建单元接收上一个构建单元的输出，作为输入，再将产品进行输出，&lt;code&gt;com.android.build&lt;/code&gt;库提供了&lt;code&gt;Transform&lt;/code&gt;的机制，而这个机制是Android 构建系统为了给外部提供一个可以加入自定义构建单元，如拦截某个构建单元的输出，或者加入一些输出等。而这些Transform是在java源码编译完成之后，package之前进行的。&lt;br&gt;
&lt;img src=&#34;https://s1.ax1x.com/2022/03/11/bIZBy8.md.png&#34; alt=&#34;bIZBy8.md.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Android Gradle构建系统中，可以通过&lt;code&gt;AppExtension &lt;/code&gt;将&lt;code&gt;transform&lt;/code&gt;注册到构建系统中:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CustomPlugin&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Plugin&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;Project&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Project project)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        AppExtension appExtension = (AppExtension)project.getProperties().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;android&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 给App编译过程注册transform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        appExtension.registerTransform(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CustomTransform(), Collections.EMPTY_LIST);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;asm&#34;&gt;ASM&lt;a title=&#34;#asm&#34; href=&#34;#asm&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://asm.ow2.io/&#34; target=&#34;_blank&#34;&gt;ASM&lt;/a&gt;是一种通用&lt;strong&gt;Java字节码&lt;/strong&gt;操作和分析框架。它可以用来修改现有的类，也可以直接以二进制形式动态生成类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/03/11/bI0iSx.png&#34; alt=&#34;bI0iSx.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;p&gt;ASM设计了两种API类型解析文件结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tree API&lt;/li&gt;
&lt;li&gt;基于Visitor API(visitor pattern)，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们以不同的方式处理下吧🤤🤤🤤&lt;/p&gt;
&lt;h4 id=&#34;tree-api&#34;&gt;Tree API&lt;a title=&#34;#tree-api&#34; href=&#34;#tree-api&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Tree API将class的结构读取到内存，构建一个树形结构，然后需要处理Method、Field等元素时，到树形结构中定位到某个元素，进行操作，然后把操作再写入新的class文件。&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPlugin&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Plugin&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(target: &lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Test Plugin : target = [&lt;span class=&#34;subst&#34;&gt;$&amp;#123;target&amp;#125;&lt;/span&gt;]&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; appExtension: AppExtension = target.extensions.getByType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        appExtension.registerTransform(TestTransform())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestTransform&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;BaseTransform&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;companion&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;object&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isPrint = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isChange = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(byteArray: &lt;span class=&#34;type&#34;&gt;ByteArray&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: ByteArray &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; classReader = ClassReader(byteArray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; classNode = ClassNode()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 通过传递 ClassReader 解析对应 ClassFile 生成 ClassNode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        classReader.accept(classNode, ClassReader.EXPAND_FRAMES)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isPrint)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            isPrint = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.log(classNode.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (methodNode &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; classNode.methods) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                Log.log(&lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;classNode.name&amp;#125;&lt;/span&gt; ------&amp;gt;&amp;gt;&amp;gt; &lt;span class=&#34;variable&#34;&gt;$methodNode&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果文件对classNode有修改的情况下，需要这样处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isChange)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            classNode.accept(classWriter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; classWriter.toByteArray()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回修改内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; byteArray&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getInputTypes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;: MutableSet&amp;lt;QualifiedContent.ContentType&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TransformManager.CONTENT_CLASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getScopes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;: MutableSet&amp;lt;&lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; QualifiedContent.Scope&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mutableSetOf(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            QualifiedContent.Scope.PROJECT&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到编译的类正被我们打印出来：&lt;br&gt;
&lt;img src=&#34;https://s1.ax1x.com/2022/03/11/bIq3id.png&#34; alt=&#34;bIq3id.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;visitor-api&#34;&gt;Visitor API&lt;a title=&#34;#visitor-api&#34; href=&#34;#visitor-api&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Visitor API则将通过接口的方式，分离读class和写class的逻辑，一般通过一个ClassReader负责读取class字节码，然后ClassReader通过一个ClassVisitor接口，将字节码的每个细节按顺序通过接口的方式，传递给ClassVisitor（你会发现ClassVisitor中有多个visitXXXX接口），这个过程就像ClassReader带着ClassVisitor游览了class字节码的每一个指令。&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPlugin&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Plugin&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(target: &lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Test Plugin : target = [&lt;span class=&#34;subst&#34;&gt;$&amp;#123;target&amp;#125;&lt;/span&gt;]&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; appExtension: AppExtension = target.extensions.getByType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        appExtension.registerTransform(TestVisitorTransform())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestClassVisitor&lt;/span&gt;&lt;/span&gt;(visitor: ClassVisitor):ClassVisitor(Opcodes.ASM4,visitor)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestVisitorTransform&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;BaseTransform&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;companion&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;object&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isPrint = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isChange = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;modifyClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(byteArray: &lt;span class=&#34;type&#34;&gt;ByteArray&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: ByteArray &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 解析class文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; classReader = ClassReader(byteArray)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将class文件内容写入到ClassWriter中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; classWriter = ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 赋予对应的ClassVisitor读写能力&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; classVisitor = TestClassVisitor(classWriter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 打印测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isPrint)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            isPrint = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Log.log(classVisitor.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果文件对classNode有修改的情况下，需要这样处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isChange)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; classWriter.toByteArray()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回修改内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; byteArray&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getInputTypes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;: MutableSet&amp;lt;QualifiedContent.ContentType&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TransformManager.CONTENT_CLASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getScopes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;: MutableSet&amp;lt;&lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; QualifiedContent.Scope&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mutableSetOf(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            QualifiedContent.Scope.PROJECT&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样可以看到编译的类正被我们打印出来：&lt;br&gt;
&lt;img src=&#34;https://s1.ax1x.com/2022/03/11/bIvebV.png&#34; alt=&#34;bIvebV.png&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClassReader：负责对 .class 文件进行读取&lt;/li&gt;
&lt;li&gt;ClassVisitor： 负责访问 .class 文件中各个元素&lt;/li&gt;
&lt;li&gt;ClassWriter： 负责对 .class 文件进行写入，将字节码输出为 byte 数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字节码了解&#34;&gt;字节码了解&lt;a title=&#34;#字节码了解&#34; href=&#34;#字节码了解&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/14860-asm-bytecode-viewer-support-kotlin&#34; target=&#34;_blank&#34;&gt;Android Studio 辅助类转字节码插件：ASM Bytecode Viewer Support Kotlin&lt;/a&gt;&lt;br&gt;
&lt;img src=&#34;https://pic1.zhimg.com/v2-fdd5caeb51dbfb819539611fa9ccbcd4_r.jpg&#34; alt=&#34;preview&#34; loading=&#34;lazy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6944517233674551304#heading-5&#34; target=&#34;_blank&#34;&gt;字节码结构分析 - 掘金 (juejin.cn)&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.jianshu.com/p/92a75a18cbc1&#34; target=&#34;_blank&#34;&gt;Java ByteCode - 简书 (jianshu.com)&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/94498015&#34; target=&#34;_blank&#34;&gt;史上最通俗易懂的ASM教程 - 知乎 (zhihu.com)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义gradle插件&#34;&gt;自定义gradle插件&lt;a title=&#34;#自定义gradle插件&#34; href=&#34;#自定义gradle插件&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Transform和Asm的结合使用需要用到Gradle插件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自定义插件方式：详看&lt;a href=&#34;https://docs.gradle.org/current/userguide/custom_plugins.html#example_a_build_for_a_custom_plugin&#34; target=&#34;_blank&#34;&gt;Developing Custom Gradle Plugins&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build script&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buildSrc&lt;/code&gt; 项目&lt;/li&gt;
&lt;li&gt;独立项目（Standalone project）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;build-script&#34;&gt;Build script&lt;a title=&#34;#build-script&#34; href=&#34;#build-script&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;直接在项目的build.gradle中添加groovy脚本代码并引用。这样插件在构建脚本之外不可见，只能在此模块中使用脚本插件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;简单编写脚本&lt;br&gt;
build.gradle:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GreetingPlugin&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Plugin&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;Project&lt;/span&gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; apply(Project project) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        project.task(&lt;span class=&#34;string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                println &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello from the GreetingPlugin&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Apply the plugin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;apply &lt;span class=&#34;attr&#34;&gt;plugin:&lt;/span&gt; GreetingPlugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;跟上面一样，只不过采用新版kts风格&lt;br&gt;
build.gradle.kts&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GreetingPlugin&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Plugin&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(project: &lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        project.task(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello from the GreetingPlugin&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Apply the plugin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;apply&amp;lt;GreetingPlugin&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt; gradle -q hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Hello from the GreetingPlugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;buildsrc-项目&#34;&gt;buildSrc 项目&lt;a title=&#34;#buildsrc-项目&#34; href=&#34;#buildsrc-项目&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;将插件的源代码放在rootProjectDir/buildSrc/src/main/groovy目录中，Gradle将负责编译和测试插件，并使其在构建脚本的类路径中可用。该插件每个构建脚本都是可见的。但是它在构建外部不可见即在当前工程的各个模块都可见，但是项目之外不可见&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;buildSrc是android中一个保留名，是一个专门用来做gradle插件的module，所以这个module的名字必须是buildSrc，此模块下面有一个固定的目录结构src/main/groovy，这个是用来存放真正的脚本文件的。其他的自定义类可以放在这个目录下，也可以放在自建的其他目录下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建&lt;code&gt;buildSrc&lt;/code&gt;Module,可以直接创建目录
&lt;ul&gt;
&lt;li&gt;在工程根目录下创建目录&lt;code&gt;buildSrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在buildSrc下创建目录结构 &lt;code&gt;src/main/groovy&lt;/code&gt;或者&lt;code&gt;src/main/java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在buildSrc根目录下创建&lt;code&gt; build.gradle&lt;/code&gt;或者&lt;code&gt; build.gradle.kts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;build.gradle.kts:&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.jetbrains.kotlin.gradle.tasks.KotlinCompile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plugins &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    `kotlin-dsl`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kotlin(&lt;span class=&#34;string&#34;&gt;&amp;quot;jvm&amp;quot;&lt;/span&gt;) version &lt;span class=&#34;string&#34;&gt;&amp;quot;1.4.32&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; compileKotlin: KotlinCompile &lt;span class=&#34;keyword&#34;&gt;by&lt;/span&gt; tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;val&lt;/span&gt; compileTestKotlin: KotlinCompile &lt;span class=&#34;keyword&#34;&gt;by&lt;/span&gt; tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;compileKotlin.kotlinOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jvmTarget = &lt;span class=&#34;string&#34;&gt;&amp;quot;1.8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;compileTestKotlin.kotlinOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jvmTarget = &lt;span class=&#34;string&#34;&gt;&amp;quot;1.8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    google()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation(&lt;span class=&#34;string&#34;&gt;&amp;quot;com.android.tools.build:gradle:4.1.1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    compileOnly(&lt;span class=&#34;string&#34;&gt;&amp;quot;commons-io:commons-io:2.6&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    compileOnly(&lt;span class=&#34;string&#34;&gt;&amp;quot;commons-codec:commons-codec:1.15&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    compileOnly(&lt;span class=&#34;string&#34;&gt;&amp;quot;org.ow2.asm:asm-commons:9.2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    compileOnly(&lt;span class=&#34;string&#34;&gt;&amp;quot;org.ow2.asm:asm-tree:9.2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;build.gradle&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;apply &lt;span class=&#34;attr&#34;&gt;plugin:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;groovy&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// gradle插件必须的引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation gradleApi()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation localGroovy()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation &lt;span class=&#34;string&#34;&gt;&amp;#x27;com.android.tools.build:gradle:4.1.1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// asm依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation &lt;span class=&#34;string&#34;&gt;&amp;#x27;org.ow2.asm:asm:9.2&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation &lt;span class=&#34;string&#34;&gt;&amp;#x27;org.ow2.asm:asm-util:9.2&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation &lt;span class=&#34;string&#34;&gt;&amp;#x27;org.ow2.asm:asm-commons:9.2&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    google()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 指定编译的编码 不然有中文的话会出现  ’编码GBK的不可映射字符‘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tasks.withType(JavaCompile) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    options.encoding = &lt;span class=&#34;string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    println(&lt;span class=&#34;string&#34;&gt;&amp;#x27;使用utf8编译&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;创建插件入口TestPlugin&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.onion.plugin.plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPlugin&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;Plugin&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(target: &lt;span class=&#34;type&#34;&gt;Project&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Test Plugin : target = [&lt;span class=&#34;subst&#34;&gt;$&amp;#123;target&amp;#125;&lt;/span&gt;]&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在App Module 中引入,然后Project Build&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.onion.plugin.plugin.TestPlugin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;apply &lt;span class=&#34;attr&#34;&gt;plugin:&lt;/span&gt; TestPlugin &lt;span class=&#34;comment&#34;&gt;// 插桩测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;插件发布额外学习&#34;&gt;插件发布额外学习&lt;a title=&#34;#插件发布额外学习&#34; href=&#34;#插件发布额外学习&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6887581345384497165&#34; title=&#34;https://juejin.cn/post/6887581345384497165&#34; target=&#34;_blank&#34;&gt;Android Gradle 插件开发入门指南（一）&lt;/a&gt;，讲解Gradle Plugin开发的完整流程&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6887583351348133895&#34; title=&#34;https://juejin.cn/post/6887583351348133895&#34; target=&#34;_blank&#34;&gt;Android Gradle 插件开发入门指南（二）&lt;/a&gt;，针对Android的Gradle Plugin开发实践&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6890544619856068616&#34; title=&#34;https://juejin.cn/post/6890544619856068616&#34; target=&#34;_blank&#34;&gt;Android Gradle 插件开发入门指南（三）&lt;/a&gt;，如何将插件发布到jcenter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;refer&#34;&gt;Refer&lt;a title=&#34;#refer&#34; href=&#34;#refer&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://quinnchen.cn/2018/09/13/2018-09-13-asm-transform/&#34; target=&#34;_blank&#34;&gt;一起玩转Android项目中的字节码 | Quinn Note (quinnchen.cn)&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.jianshu.com/p/92a75a18cbc1&#34; target=&#34;_blank&#34;&gt;Java ByteCode&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://blog.csdn.net/qq_23992393/article/details/103696976&#34; target=&#34;_blank&#34;&gt;ASM + Transform 在android中的使用&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.jianshu.com/p/a1e6b3abd789&#34; target=&#34;_blank&#34;&gt;ASM&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://juejin.cn/post/6893917892061413389#heading-3&#34; target=&#34;_blank&#34;&gt;白话 Android AOP (一) &lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/YFi6-DrV22X_VVfFbKHNEg&#34; target=&#34;_blank&#34;&gt;Android gradle Transform 分析&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/</guid>
            <title>Android AOP - AspectJ</title>
            <link>https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/</link>
            <category>AOP</category>
            <pubDate>Fri, 11 Mar 2022 17:40:38 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;AspectJ通过注解的形式来标注切入点、切入对象等，然后在代码编译期间将代码织入到java的字节码中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;Android开源方案：&lt;a href=&#34;https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx&#34; target=&#34;_blank&#34;&gt;AspectJX&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;引入依赖&#34;&gt;引入依赖&lt;a title=&#34;#引入依赖&#34; href=&#34;#引入依赖&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;gradle引入：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        classpath &lt;span class=&#34;string&#34;&gt;&amp;#x27;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应用plugin：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;apply &lt;span class=&#34;attr&#34;&gt;plugin:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;android-aspectjx&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AspectJX配置：&lt;/p&gt;
&lt;p&gt;AspectJX默认会处理所有的二进制代码文件和库，为了提升编译效率及规避部分第三方库出现的编译兼容性问题，AspectJX提供&lt;code&gt;include&lt;/code&gt;,&lt;code&gt;exclude&lt;/code&gt;命令来过滤需要处理的文件及排除某些文件(包括class文件及jar文件)。&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;aspectjx &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//排除所有package路径中包含`android.support`的class文件及库（jar文件）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	exclude &lt;span class=&#34;string&#34;&gt;&amp;#x27;android.support&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;开关配置：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;aspectjx &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//关闭AspectJX功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	enabled &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;简单使用&#34;&gt;简单使用&lt;a title=&#34;#简单使用&#34; href=&#34;#简单使用&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;准备切入的类&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Animal&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fly&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.e(TAG, &lt;span class=&#34;string&#34;&gt;&amp;quot;animal fly method:&amp;quot;&lt;/span&gt; + &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.toString() + &lt;span class=&#34;string&#34;&gt;&amp;quot;#fly&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;编写对应的切面类，用@Aspect注解&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;//①&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MethodAspect&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 标注切入的方法，看到没有这里用的Poincut的 call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&amp;quot;)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//②&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;callMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 标注函数执行前处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;callMethod()&amp;quot;)&lt;/span&gt;&lt;span class=&#34;comment&#34;&gt;//③&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;beforeMethodCall&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.e(TAG, &lt;span class=&#34;string&#34;&gt;&amp;quot;before-&amp;gt;&amp;quot;&lt;/span&gt; + joinPoint.getTarget().toString()); &lt;span class=&#34;comment&#34;&gt;//④&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;编译后就可以看到类的方法在执行前有代码插入了&lt;br&gt;
&lt;img src=&#34;https://s1.ax1x.com/2022/03/10/bhAMh8.png&#34; alt=&#34;bhAMh8.png&#34; loading=&#34;lazy&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;语法&#34;&gt;语法&lt;a title=&#34;#语法&#34; href=&#34;#语法&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;φbq&#34;&gt;&lt;div class=&#34;φbs&#34;&gt;&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;JPoint&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Pointcut语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;method call&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;函数调用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;call(MethodSignature)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;method execution&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;函数内部执行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;execution(MethodSignature）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;method execution&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构造函数调用&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;call(ConstructorSignature）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;constructor execution&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构造函数内部执行&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;execution(ConstructorSignature）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;field get&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;读变量&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;get(FieldSignature）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;field set&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;写变量&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;set(FieldSignature）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;static initialization&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;静态代码块初始化&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;staticinitialization(TypeSignature）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;handler&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异常处理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;handler(TypeSignature),只能与@Before()配置使用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;br/&gt;
&lt;div class=&#34;φbq&#34;&gt;&lt;div class=&#34;φbs&#34;&gt;&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Advice&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Before(Pointcut)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;执行Jpoint之前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@After(Pointcut)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;执行Jpoint之后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;@Around(Pointcut)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;替换原理的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;完整语法看这&lt;a href=&#34;https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf&#34; target=&#34;_blank&#34;&gt;AspectJ&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;a title=&#34;#注意点&#34; href=&#34;#注意点&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;标注&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;execution&lt;/code&gt;执行的时候，This和Target不同的&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MethodAspect&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Pointcut(&amp;quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;callMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.e(TAG, &lt;span class=&#34;string&#34;&gt;&amp;quot;callMethod-&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;callMethod()&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;beforeMethodCall&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.e(TAG, &lt;span class=&#34;string&#34;&gt;&amp;quot;getTarget-&amp;gt;&amp;quot;&lt;/span&gt; + joinPoint.getTarget());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Log.e(TAG, &lt;span class=&#34;string&#34;&gt;&amp;quot;getThis-&amp;gt;&amp;quot;&lt;/span&gt; + joinPoint.getThis());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;切入方：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;protected void onCreate(@Nullable Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    super.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Animal animal = new Animal();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    animal.fly();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;getTarget-&amp;gt;com.wandering.sample.aspectj.Animal@&lt;span class=&#34;number&#34;&gt;509&lt;/span&gt;ddfd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getThis-&amp;gt;com.wandering.sample.aspectj.MainActivity@&lt;span class=&#34;number&#34;&gt;98&lt;/span&gt;c38bf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;说明target指代的是切入点方法的所有者，而this指代的是被织入代码所属类的实例对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将切点的&lt;code&gt;call&lt;/code&gt;改为&lt;code&gt;execution&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;getTarget-&amp;gt;com.wandering.sample.aspectj.Animal@&lt;span class=&#34;number&#34;&gt;509&lt;/span&gt;ddfd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getThis-&amp;gt;com.wandering.sample.aspectj.Animal@&lt;span class=&#34;number&#34;&gt;509&lt;/span&gt;ddfd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;缺点&#34;&gt;缺点&lt;a title=&#34;#缺点&#34; href=&#34;#缺点&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果相应的class没有实现相应的对点方法将无法织入，如Activity没有实现onResume方法的话，将无法织入代码。&lt;/li&gt;
&lt;li&gt;无法处理Lambda语法&lt;/li&gt;
&lt;li&gt;会有一系列兼容性问题，如R8、gradle版本不同等&lt;/li&gt;
&lt;li&gt;性能较差，APP项目比较大时编译时间明显加长&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;refer&#34;&gt;Refer&lt;a title=&#34;#refer&#34; href=&#34;#refer&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf&#34; target=&#34;_blank&#34;&gt;Android-Demos/AspectJ.pdf&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://juejin.cn/post/6888548726424469511&#34; target=&#34;_blank&#34;&gt;Android AOP方案(一)——AspectJ&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.jianshu.com/p/28aa352af7fb&#34; target=&#34;_blank&#34;&gt;Android AOP - 简书&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.jianshu.com/p/d07c996ea13c&#34; target=&#34;_blank&#34;&gt;Android AspectJ&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://onion99.github.io/2022/03/11/qyGiQE7cKbQOfEKm/</guid>
            <title>Android AOP - JDK动态代理</title>
            <link>https://onion99.github.io/2022/03/11/qyGiQE7cKbQOfEKm/</link>
            <category>AOP</category>
            <pubDate>Fri, 11 Mar 2022 05:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;JDK的动态代理底层是通过Java反射机制实现的，并且需要目标对象继承自一个接口才能生成它的代理类&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h4 id=&#34;java动态代理&#34;&gt;Java动态代理&lt;a title=&#34;#java动态代理&#34; href=&#34;#java动态代理&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 运行期间，动态创建 class 字节码并加载到 JVM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;JDK的动态代理需要实现一个处理方法调用的Handler，用于实现代理方法的内部逻辑，实现InvocationHandler接口&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;JdkProxyHandler&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InvocationHandler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object target;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;JdkProxyHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object target)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.target = target;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// proxy：生成的代理对象, obj：目标方法, args：目标方法参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;处理前&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Object result = method.invoke(target,args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;处理后&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;代理&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ISender&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SmsSender&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ISender&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;sending msg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2-3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;testJdkProxy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ISender sender = (ISender) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Class[]&amp;#123;ISender.class&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; JdkProxyHandler(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SmsSender()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; result = sender.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;代理对象：&amp;quot;&lt;/span&gt; + sender.getClass().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;输出结果：&amp;quot;&lt;/span&gt; + result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通 过 JDK 的 java.lang.reflect.Proxy 类实现动态代理 ， 会使用其静态方法newProxyInstance()，依据目标对象、业务接口及调用处理器三者，自动生成一个动态代理对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public static newProxyInstance ( ClassLoader loader, Class&amp;lt;?&amp;gt;[] interfaces, InvocationHandler handler)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loader：目标类的类加载器，通过目标对象的反射可获取&lt;/li&gt;
&lt;li&gt;interfaces：目标类实现的接口数组，通过目标对象的反射可获取&lt;/li&gt;
&lt;li&gt;handler：调用处理器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;原理&#34;&gt;原理&lt;a title=&#34;#原理&#34; href=&#34;#原理&#34;&gt;&lt;/a&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ClassLoader loader,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;                                          Class&amp;lt;?&amp;gt;[] interfaces,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;                                          InvocationHandler h)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IllegalArgumentException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//1.检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Objects.requireNonNull(h);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Class&amp;lt;?&amp;gt;[] intfs = interfaces.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; SecurityManager sm = System.getSecurityManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sm != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//查找或生成指定的代理类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Class&amp;lt;?&amp;gt; cl = getProxyClass0(loader, intfs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sm != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            checkNewProxyPermission(Reflection.getCallerClass(), cl);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//通过反射创建代理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Constructor&amp;lt;?&amp;gt; cons = cl.getConstructor(constructorParams);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; InvocationHandler ih = h;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!Modifier.isPublic(cl.getModifiers())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            AccessController.doPrivileged(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; PrivilegedAction&amp;lt;Void&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Void &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cons.setAccessible(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cons.newInstance(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object[]&amp;#123;h&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IllegalAccessException|InstantiationException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InternalError(e.toString(), e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InvocationTargetException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Throwable t = e.getCause();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (t &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; RuntimeException) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; (RuntimeException) t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InternalError(t.toString(), t);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchMethodException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; InternalError(e.toString(), e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;局限性&#34;&gt;局限性&lt;a title=&#34;#局限性&#34; href=&#34;#局限性&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;只能代理接口，并且只能修改接口声明的方法&lt;/p&gt;
&lt;h3 id=&#34;refer&#34;&gt;Refer&lt;a title=&#34;#refer&#34; href=&#34;#refer&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jb51.net/article/209607.htm&#34; target=&#34;_blank&#34;&gt;Java动态代理四种实现方式详解&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.cnblogs.com/wkfvawl/p/15030814.html&#34; target=&#34;_blank&#34;&gt;Java 动态代理 - 王陸&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/</guid>
            <title>Android AOP - 概论</title>
            <link>https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/</link>
            <category>AOP</category>
            <pubDate>Thu, 10 Mar 2022 17:26:27 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;编程架构思想&#34;&gt;编程架构思想&lt;a title=&#34;#编程架构思想&#34; href=&#34;#编程架构思想&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向对象(Object Oriented Programming)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向过程(Procedure Oriented Programming)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向切面(Aspect Oriented Programming)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;AOP 意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术，和 OOP 以对象为核心不同，AOP是针对业务处理过程中的类似的代码逻辑进行切入，然后统一处理。&lt;/p&gt;
&lt;p&gt;AOP其实是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/03/10/bfRiDK.png&#34; alt=&#34;bfRiDK.png&#34; loading=&#34;lazy&#34; class=&#34;φbp&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;常见概念&#34;&gt;常见概念&lt;a title=&#34;#常见概念&#34; href=&#34;#常见概念&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;连接点(&lt;em&gt;Joinpoint&lt;/em&gt;)
&lt;ul&gt;
&lt;li&gt;程序中可能作为代码注入目标的特定的点，例如一个方法调用或者方法入口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切点（&lt;em&gt;Pointcut&lt;/em&gt;）
&lt;ul&gt;
&lt;li&gt;告诉代码注入工具，在任何注入一段特定代码的表达式。例如，在哪些joint points应用一个特定的Advice。&lt;/li&gt;
&lt;li&gt;切入点可以选择唯一一个，比如执行某一个方法，也可以有多个选择，比如，标记了一个定义成@DebugLog的自定义注解的所有方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增强（&lt;em&gt;Advice&lt;/em&gt;）
&lt;ul&gt;
&lt;li&gt;注入到class文件中的代码。&lt;/li&gt;
&lt;li&gt;典型的Advice类型有before、after和around，分别表示在目标方法执行之前、执行后和完全代替目标方法执行的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标对象 (&lt;em&gt;Target&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;引介(&lt;em&gt;Introduction&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;织入（&lt;em&gt;Weaving&lt;/em&gt;）
&lt;ul&gt;
&lt;li&gt;注入代码（advices）到目标位置（joint points）的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代理（&lt;em&gt;Proxy&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;切面（&lt;em&gt;Aspect&lt;/em&gt;）
&lt;ul&gt;
&lt;li&gt;Pointcut和Advice的组合看做切面。例如，我们在应用中通过定义一个Pointcut和给定恰当的Advice，添加一个日志切面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;a title=&#34;#分类&#34; href=&#34;#分类&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一类是，例如Java的动态代理；另一类可以归结为，例如经常听说的，AspecJ等框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;运行期的AOP
&lt;ul&gt;
&lt;li&gt;Java的动态代理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译期的AOP
&lt;ul&gt;
&lt;li&gt;ASM&lt;/li&gt;
&lt;li&gt;AspecJ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用&#34;&gt;应用&lt;a title=&#34;#应用&#34; href=&#34;#应用&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hot Fix
&lt;ul&gt;
&lt;li&gt;基于AOP技术，编译期修改Java字节码，对每一个方法进行插桩操作，以便于hook每一个方法，做到方法级别的热修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;监测方法耗时&lt;/li&gt;
&lt;li&gt;日志记录&lt;/li&gt;
&lt;li&gt;统一处理点击抖动&lt;/li&gt;
&lt;li&gt;其他的监控方面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aop与apt区别&#34;&gt;AOP与APT区别&lt;a title=&#34;#aop与apt区别&#34; href=&#34;#aop与apt区别&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;APT(Annotation Processing Tool)即注解处理器，是一种处理注解的工具，确切的说它是javac的一个工具，它用来在编译时扫描和处理注解。注解处理器以Java代码(或者编译过的字节码)作为输入，生成&lt;code&gt;.java文件&lt;/code&gt;作为输出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APT是在编译期，通过注解生成&lt;code&gt;java&lt;/code&gt;文件，然后.java文件仍然需要进一步编译生成&lt;code&gt;.class&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;AOP是在编译完成后直接通过修改&lt;code&gt;.class&lt;/code&gt;文件，添加或者修改代码逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;refer&#34;&gt;Refer&lt;a title=&#34;#refer&#34; href=&#34;#refer&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzUxODg0MzU2OQ==&amp;amp;mid=2247483887&amp;amp;idx=1&amp;amp;sn=d54e3f210a4f31f477dba06c3dcd352e&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34;&gt;AOP技术在客户端的应用与实践&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
