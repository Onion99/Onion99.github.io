{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stay hungry , Stay foolish • All posts by \"aop\" tag",
    "description": "巴拉巴拉",
    "home_page_url": "https://onion99.github.io",
    "items": [
        {
            "id": "https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/",
            "url": "https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/",
            "title": "Android AOP - ASM+Transform",
            "date_published": "2022-03-12T09:45:36.000Z",
            "content_html": "<span id=\"more\"></span>\n<p><img src=\"https://s1.ax1x.com/2022/03/10/bhoW8O.png\" alt=\"bhoW8O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"transform\">Transform<a title=\"#transform\" href=\"#transform\"></a></h3>\n<blockquote>\n<p>Android Gradle Plugin 从 1.5.0 开始支持 Transform API，以允许第三方插件在经过编译的 .class 文件转换为 .dex 文件之前对其进行操纵。</p>\n</blockquote>\n<p>普通编译过程：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bINI8f.png\" alt=\"bINI8f.png\" loading=\"lazy\"><br>\n可以看到Android 构建流程是一套流水线的工作机制，每一个的构建单元接收上一个构建单元的输出，作为输入，再将产品进行输出，<code>com.android.build</code>库提供了<code>Transform</code>的机制，而这个机制是Android 构建系统为了给外部提供一个可以加入自定义构建单元，如拦截某个构建单元的输出，或者加入一些输出等。而这些Transform是在java源码编译完成之后，package之前进行的。<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIZBy8.md.png\" alt=\"bIZBy8.md.png\" loading=\"lazy\"></p>\n<p>在Android Gradle构建系统中，可以通过<code>AppExtension </code>将<code>transform</code>注册到构建系统中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(Project project)</span> </span>&#123;</span><br><span class=\"line\">        AppExtension appExtension = (AppExtension)project.getProperties().get(<span class=\"string\">&quot;android&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 给App编译过程注册transform</span></span><br><span class=\"line\">        appExtension.registerTransform(<span class=\"keyword\">new</span> CustomTransform(), Collections.EMPTY_LIST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"asm\">ASM<a title=\"#asm\" href=\"#asm\"></a></h3>\n<blockquote>\n<p><a href=\"https://asm.ow2.io/\" target=\"_blank\">ASM</a>是一种通用<strong>Java字节码</strong>操作和分析框架。它可以用来修改现有的类，也可以直接以二进制形式动态生成类。</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/11/bI0iSx.png\" alt=\"bI0iSx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>ASM设计了两种API类型解析文件结构：</p>\n<ul>\n<li>Tree API</li>\n<li>基于Visitor API(visitor pattern)，</li>\n</ul>\n<p>让我们以不同的方式处理下吧🤤🤤🤤</p>\n<h4 id=\"tree-api\">Tree API<a title=\"#tree-api\" href=\"#tree-api\"></a></h4>\n<p>Tree API将class的结构读取到内存，构建一个树形结构，然后需要处理Method、Field等元素时，到树形结构中定位到某个元素，进行操作，然后把操作再写入新的class文件。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appExtension: AppExtension = target.extensions.getByType()</span><br><span class=\"line\">        appExtension.registerTransform(TestTransform())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransform</span> : <span class=\"type\">BaseTransform</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isPrint = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isChange = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modifyClass</span><span class=\"params\">(byteArray: <span class=\"type\">ByteArray</span>)</span></span>: ByteArray &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> classReader = ClassReader(byteArray)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> classNode = ClassNode()</span><br><span class=\"line\">        <span class=\"comment\">// 通过传递 ClassReader 解析对应 ClassFile 生成 ClassNode</span></span><br><span class=\"line\">        classReader.accept(classNode, ClassReader.EXPAND_FRAMES)</span><br><span class=\"line\">        <span class=\"comment\">// 打印测试</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrint)&#123;</span><br><span class=\"line\">            isPrint = <span class=\"literal\">false</span></span><br><span class=\"line\">            Log.log(classNode.toString())</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (methodNode <span class=\"keyword\">in</span> classNode.methods) &#123;</span><br><span class=\"line\">                Log.log(<span class=\"string\">&quot;<span class=\"subst\">$&#123;classNode.name&#125;</span> ------&gt;&gt;&gt; <span class=\"variable\">$methodNode</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果文件对classNode有修改的情况下，需要这样处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isChange)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)</span><br><span class=\"line\">            classNode.accept(classWriter)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> classWriter.toByteArray()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInputTypes</span><span class=\"params\">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransformManager.CONTENT_CLASS</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScopes</span><span class=\"params\">()</span></span>: MutableSet&lt;<span class=\"keyword\">in</span> QualifiedContent.Scope&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mutableSetOf(</span><br><span class=\"line\">            QualifiedContent.Scope.PROJECT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到编译的类正被我们打印出来：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIq3id.png\" alt=\"bIq3id.png\" loading=\"lazy\"></p>\n<h4 id=\"visitor-api\">Visitor API<a title=\"#visitor-api\" href=\"#visitor-api\"></a></h4>\n<p>Visitor API则将通过接口的方式，分离读class和写class的逻辑，一般通过一个ClassReader负责读取class字节码，然后ClassReader通过一个ClassVisitor接口，将字节码的每个细节按顺序通过接口的方式，传递给ClassVisitor（你会发现ClassVisitor中有多个visitXXXX接口），这个过程就像ClassReader带着ClassVisitor游览了class字节码的每一个指令。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appExtension: AppExtension = target.extensions.getByType()</span><br><span class=\"line\">        appExtension.registerTransform(TestVisitorTransform())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClassVisitor</span></span>(visitor: ClassVisitor):ClassVisitor(Opcodes.ASM4,visitor)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVisitorTransform</span> : <span class=\"type\">BaseTransform</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isPrint = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isChange = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modifyClass</span><span class=\"params\">(byteArray: <span class=\"type\">ByteArray</span>)</span></span>: ByteArray &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析class文件</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classReader = ClassReader(byteArray)</span><br><span class=\"line\">        <span class=\"comment\">// 将class文件内容写入到ClassWriter中</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classWriter = ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)</span><br><span class=\"line\">        <span class=\"comment\">// 赋予对应的ClassVisitor读写能力</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classVisitor = TestClassVisitor(classWriter)</span><br><span class=\"line\">        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES)</span><br><span class=\"line\">        <span class=\"comment\">// 打印测试</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrint)&#123;</span><br><span class=\"line\">            isPrint = <span class=\"literal\">false</span></span><br><span class=\"line\">            Log.log(classVisitor.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果文件对classNode有修改的情况下，需要这样处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isChange)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> classWriter.toByteArray()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInputTypes</span><span class=\"params\">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransformManager.CONTENT_CLASS</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScopes</span><span class=\"params\">()</span></span>: MutableSet&lt;<span class=\"keyword\">in</span> QualifiedContent.Scope&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mutableSetOf(</span><br><span class=\"line\">            QualifiedContent.Scope.PROJECT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样可以看到编译的类正被我们打印出来：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIvebV.png\" alt=\"bIvebV.png\" loading=\"lazy\"></p>\n<ul>\n<li>ClassReader：负责对 .class 文件进行读取</li>\n<li>ClassVisitor： 负责访问 .class 文件中各个元素</li>\n<li>ClassWriter： 负责对 .class 文件进行写入，将字节码输出为 byte 数组。</li>\n</ul>\n<h3 id=\"字节码了解\">字节码了解<a title=\"#字节码了解\" href=\"#字节码了解\"></a></h3>\n<p><a href=\"https://plugins.jetbrains.com/plugin/14860-asm-bytecode-viewer-support-kotlin\" target=\"_blank\">Android Studio 辅助类转字节码插件：ASM Bytecode Viewer Support Kotlin</a><br>\n<img src=\"https://pic1.zhimg.com/v2-fdd5caeb51dbfb819539611fa9ccbcd4_r.jpg\" alt=\"preview\" loading=\"lazy\"></p>\n<p><a href=\"https://juejin.cn/post/6944517233674551304#heading-5\" target=\"_blank\">字节码结构分析 - 掘金 (juejin.cn)</a><br>\n<a href=\"https://www.jianshu.com/p/92a75a18cbc1\" target=\"_blank\">Java ByteCode - 简书 (jianshu.com)</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/94498015\" target=\"_blank\">史上最通俗易懂的ASM教程 - 知乎 (zhihu.com)</a></p>\n<h3 id=\"自定义gradle插件\">自定义gradle插件<a title=\"#自定义gradle插件\" href=\"#自定义gradle插件\"></a></h3>\n<blockquote>\n<p>Transform和Asm的结合使用需要用到Gradle插件</p>\n</blockquote>\n<p>自定义插件方式：详看<a href=\"https://docs.gradle.org/current/userguide/custom_plugins.html#example_a_build_for_a_custom_plugin\" target=\"_blank\">Developing Custom Gradle Plugins</a></p>\n<ul>\n<li>Build script</li>\n<li><code>buildSrc</code> 项目</li>\n<li>独立项目（Standalone project）</li>\n</ul>\n<h4 id=\"build-script\">Build script<a title=\"#build-script\" href=\"#build-script\"></a></h4>\n<blockquote>\n<p>直接在项目的build.gradle中添加groovy脚本代码并引用。这样插件在构建脚本之外不可见，只能在此模块中使用脚本插件。</p>\n</blockquote>\n<ol>\n<li>简单编写脚本<br>\nbuild.gradle:</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> apply(Project project) &#123;</span><br><span class=\"line\">        project.task(<span class=\"string\">&#x27;hello&#x27;</span>) &#123;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println <span class=\"string\">&#x27;Hello from the GreetingPlugin&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Apply the plugin</span></span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> GreetingPlugin</span><br></pre></td></tr></table></figure>\n<p>跟上面一样，只不过采用新版kts风格<br>\nbuild.gradle.kts</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(project: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        project.task(<span class=\"string\">&quot;hello&quot;</span>) &#123;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Hello from the GreetingPlugin&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Apply the plugin</span></span><br><span class=\"line\">apply&lt;GreetingPlugin&gt;()</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>运行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gradle -q hello</span><br><span class=\"line\">Hello from the GreetingPlugin</span><br></pre></td></tr></table></figure>\n<h4 id=\"buildsrc-项目\">buildSrc 项目<a title=\"#buildsrc-项目\" href=\"#buildsrc-项目\"></a></h4>\n<blockquote>\n<p>将插件的源代码放在rootProjectDir/buildSrc/src/main/groovy目录中，Gradle将负责编译和测试插件，并使其在构建脚本的类路径中可用。该插件每个构建脚本都是可见的。但是它在构建外部不可见即在当前工程的各个模块都可见，但是项目之外不可见</p>\n</blockquote>\n<p>buildSrc是android中一个保留名，是一个专门用来做gradle插件的module，所以这个module的名字必须是buildSrc，此模块下面有一个固定的目录结构src/main/groovy，这个是用来存放真正的脚本文件的。其他的自定义类可以放在这个目录下，也可以放在自建的其他目录下。</p>\n<ol>\n<li>创建<code>buildSrc</code>Module,可以直接创建目录\n<ul>\n<li>在工程根目录下创建目录<code>buildSrc</code></li>\n<li>在buildSrc下创建目录结构 <code>src/main/groovy</code>或者<code>src/main/java</code></li>\n<li>在buildSrc根目录下创建<code> build.gradle</code>或者<code> build.gradle.kts</code></li>\n</ul>\n</li>\n</ol>\n<p>build.gradle.kts:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    `kotlin-dsl`</span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;jvm&quot;</span>) version <span class=\"string\">&quot;1.4.32&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> compileKotlin: KotlinCompile <span class=\"keyword\">by</span> tasks</span><br><span class=\"line\"><span class=\"keyword\">val</span> compileTestKotlin: KotlinCompile <span class=\"keyword\">by</span> tasks</span><br><span class=\"line\">compileKotlin.kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">compileTestKotlin.kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;com.android.tools.build:gradle:4.1.1&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;commons-io:commons-io:2.6&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;commons-codec:commons-codec:1.15&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;org.ow2.asm:asm-commons:9.2&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;org.ow2.asm:asm-tree:9.2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;groovy&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// gradle插件必须的引用</span></span><br><span class=\"line\">    implementation gradleApi()</span><br><span class=\"line\">    implementation localGroovy()</span><br><span class=\"line\">    </span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.android.tools.build:gradle:4.1.1&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// asm依赖</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm:9.2&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm-util:9.2&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm-commons:9.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 指定编译的编码 不然有中文的话会出现  ’编码GBK的不可映射字符‘</span></span><br><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">    options.encoding = <span class=\"string\">&quot;UTF-8&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&#x27;使用utf8编译&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建插件入口TestPlugin</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.onion.plugin.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span>: <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在App Module 中引入,然后Project Build</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.onion.plugin.plugin.TestPlugin</span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> TestPlugin <span class=\"comment\">// 插桩测试</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"插件发布额外学习\">插件发布额外学习<a title=\"#插件发布额外学习\" href=\"#插件发布额外学习\"></a></h4>\n<ul>\n<li><a href=\"https://juejin.cn/post/6887581345384497165\" title=\"https://juejin.cn/post/6887581345384497165\" target=\"_blank\">Android Gradle 插件开发入门指南（一）</a>，讲解Gradle Plugin开发的完整流程</li>\n<li><a href=\"https://juejin.cn/post/6887583351348133895\" title=\"https://juejin.cn/post/6887583351348133895\" target=\"_blank\">Android Gradle 插件开发入门指南（二）</a>，针对Android的Gradle Plugin开发实践</li>\n<li><a href=\"https://juejin.cn/post/6890544619856068616\" title=\"https://juejin.cn/post/6890544619856068616\" target=\"_blank\">Android Gradle 插件开发入门指南（三）</a>，如何将插件发布到jcenter</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"http://quinnchen.cn/2018/09/13/2018-09-13-asm-transform/\" target=\"_blank\">一起玩转Android项目中的字节码 | Quinn Note (quinnchen.cn)</a><br>\n<a href=\"https://www.jianshu.com/p/92a75a18cbc1\" target=\"_blank\">Java ByteCode</a><br>\n<a href=\"https://blog.csdn.net/qq_23992393/article/details/103696976\" target=\"_blank\">ASM + Transform 在android中的使用</a><br>\n<a href=\"https://www.jianshu.com/p/a1e6b3abd789\" target=\"_blank\">ASM</a><br>\n<a href=\"https://juejin.cn/post/6893917892061413389#heading-3\" target=\"_blank\">白话 Android AOP (一) </a><br>\n<a href=\"https://mp.weixin.qq.com/s/YFi6-DrV22X_VVfFbKHNEg\" target=\"_blank\">Android gradle Transform 分析</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/",
            "url": "https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/",
            "title": "Android AOP - AspectJ",
            "date_published": "2022-03-11T09:40:38.000Z",
            "content_html": "<blockquote>\n<p>AspectJ通过注解的形式来标注切入点、切入对象等，然后在代码编译期间将代码织入到java的字节码中</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>Android开源方案：<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx\" target=\"_blank\">AspectJX</a></p>\n<h3 id=\"引入依赖\">引入依赖<a title=\"#引入依赖\" href=\"#引入依赖\"></a></h3>\n<p>gradle引入：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">&#x27;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>应用plugin：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;android-aspectjx&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>AspectJX配置：</p>\n<p>AspectJX默认会处理所有的二进制代码文件和库，为了提升编译效率及规避部分第三方库出现的编译兼容性问题，AspectJX提供<code>include</code>,<code>exclude</code>命令来过滤需要处理的文件及排除某些文件(包括class文件及jar文件)。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspectjx &#123;</span><br><span class=\"line\">    <span class=\"comment\">//排除所有package路径中包含`android.support`的class文件及库（jar文件）</span></span><br><span class=\"line\">\texclude <span class=\"string\">&#x27;android.support&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开关配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspectjx &#123;</span><br><span class=\"line\">    <span class=\"comment\">//关闭AspectJX功能</span></span><br><span class=\"line\">\tenabled <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单使用\">简单使用<a title=\"#简单使用\" href=\"#简单使用\"></a></h3>\n<ol>\n<li>准备切入的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;animal fly method:&quot;</span> + <span class=\"keyword\">this</span>.toString() + <span class=\"string\">&quot;#fly&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写对应的切面类，用@Aspect注解</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">//①</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标注切入的方法，看到没有这里用的Poincut的 call</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&quot;)</span><span class=\"comment\">//②</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标注函数执行前处理</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;callMethod()&quot;)</span><span class=\"comment\">//③</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeMethodCall</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;before-&gt;&quot;</span> + joinPoint.getTarget().toString()); <span class=\"comment\">//④</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编译后就可以看到类的方法在执行前有代码插入了<br>\n<img src=\"https://s1.ax1x.com/2022/03/10/bhAMh8.png\" alt=\"bhAMh8.png\" loading=\"lazy\"></li>\n</ol>\n<h3 id=\"语法\">语法<a title=\"#语法\" href=\"#语法\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">JPoint</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">Pointcut语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">method call</td>\n<td style=\"text-align:left\">函数调用</td>\n<td style=\"text-align:left\">call(MethodSignature)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">method execution</td>\n<td style=\"text-align:left\">函数内部执行</td>\n<td style=\"text-align:left\">execution(MethodSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">method execution</td>\n<td style=\"text-align:left\">构造函数调用</td>\n<td style=\"text-align:left\">call(ConstructorSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">constructor execution</td>\n<td style=\"text-align:left\">构造函数内部执行</td>\n<td style=\"text-align:left\">execution(ConstructorSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field get</td>\n<td style=\"text-align:left\">读变量</td>\n<td style=\"text-align:left\">get(FieldSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field set</td>\n<td style=\"text-align:left\">写变量</td>\n<td style=\"text-align:left\">set(FieldSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static initialization</td>\n<td style=\"text-align:left\">静态代码块初始化</td>\n<td style=\"text-align:left\">staticinitialization(TypeSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">handler</td>\n<td style=\"text-align:left\">异常处理</td>\n<td style=\"text-align:left\">handler(TypeSignature),只能与@Before()配置使用</td>\n</tr>\n</tbody>\n</table></div></div><br/>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">Advice</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@Before(Pointcut)</td>\n<td style=\"text-align:left\">执行Jpoint之前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@After(Pointcut)</td>\n<td style=\"text-align:left\">执行Jpoint之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Around(Pointcut)</td>\n<td style=\"text-align:left\">替换原理的代码</td>\n</tr>\n</tbody>\n</table></div></div><p>完整语法看这<a href=\"https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf\" target=\"_blank\">AspectJ</a></p>\n<h3 id=\"注意点\">注意点<a title=\"#注意点\" href=\"#注意点\"></a></h3>\n<p>标注<code>call</code>和<code>execution</code>执行的时候，This和Target不同的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;callMethod-&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;callMethod()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeMethodCall</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;getTarget-&gt;&quot;</span> + joinPoint.getTarget());</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;getThis-&gt;&quot;</span> + joinPoint.getThis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>切入方：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    Animal animal = new Animal();</span><br><span class=\"line\">    animal.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTarget-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br><span class=\"line\">getThis-&gt;com.wandering.sample.aspectj.MainActivity@<span class=\"number\">98</span>c38bf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明target指代的是切入点方法的所有者，而this指代的是被织入代码所属类的实例对象。</p>\n</blockquote>\n<p>将切点的<code>call</code>改为<code>execution</code>：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTarget-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br><span class=\"line\">getThis-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br></pre></td></tr></table></figure>\n<h3 id=\"缺点\">缺点<a title=\"#缺点\" href=\"#缺点\"></a></h3>\n<ul>\n<li>如果相应的class没有实现相应的对点方法将无法织入，如Activity没有实现onResume方法的话，将无法织入代码。</li>\n<li>无法处理Lambda语法</li>\n<li>会有一系列兼容性问题，如R8、gradle版本不同等</li>\n<li>性能较差，APP项目比较大时编译时间明显加长</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf\" target=\"_blank\">Android-Demos/AspectJ.pdf</a><br>\n<a href=\"https://juejin.cn/post/6888548726424469511\" target=\"_blank\">Android AOP方案(一)——AspectJ</a><br>\n<a href=\"https://www.jianshu.com/p/28aa352af7fb\" target=\"_blank\">Android AOP - 简书</a><br>\n<a href=\"https://www.jianshu.com/p/d07c996ea13c\" target=\"_blank\">Android AspectJ</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/11/qyGiQE7cKbQOfEKm/",
            "url": "https://onion99.github.io/2022/03/11/qyGiQE7cKbQOfEKm/",
            "title": "Android AOP - JDK动态代理",
            "date_published": "2022-03-10T21:25:00.000Z",
            "content_html": "<p>JDK的动态代理底层是通过Java反射机制实现的，并且需要目标对象继承自一个接口才能生成它的代理类</p>\n<span id=\"more\"></span>\n<h4 id=\"java动态代理\">Java动态代理<a title=\"#java动态代理\" href=\"#java动态代理\"></a></h4>\n<blockquote>\n<p>JDK 运行期间，动态创建 class 字节码并加载到 JVM</p>\n</blockquote>\n<ol>\n<li>JDK的动态代理需要实现一个处理方法调用的Handler，用于实现代理方法的内部逻辑，实现InvocationHandler接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JdkProxyHandler</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// proxy：生成的代理对象, obj：目标方法, args：目标方法参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理前&quot;</span>);</span><br><span class=\"line\">        Object result = method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理后&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>代理</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">send</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2-2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sending msg&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2-3</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJdkProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ISender sender = (ISender) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Class[]&#123;ISender.class&#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> JdkProxyHandler(<span class=\"keyword\">new</span> SmsSender()));</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = sender.send();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;代理对象：&quot;</span> + sender.getClass().getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;输出结果：&quot;</span> + result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通 过 JDK 的 java.lang.reflect.Proxy 类实现动态代理 ， 会使用其静态方法newProxyInstance()，依据目标对象、业务接口及调用处理器三者，自动生成一个动态代理对象。</p>\n<p><code>public static newProxyInstance ( ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</code></p>\n<ul>\n<li>loader：目标类的类加载器，通过目标对象的反射可获取</li>\n<li>interfaces：目标类实现的接口数组，通过目标对象的反射可获取</li>\n<li>handler：调用处理器。</li>\n</ul>\n<h5 id=\"原理\">原理<a title=\"#原理\" href=\"#原理\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.检查</span></span><br><span class=\"line\">    Objects.requireNonNull(h);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//查找或生成指定的代理类</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通过反射创建代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">            AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        Throwable t = e.getCause();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"局限性\">局限性<a title=\"#局限性\" href=\"#局限性\"></a></h3>\n<p>只能代理接口，并且只能修改接口声明的方法</p>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jb51.net/article/209607.htm\" target=\"_blank\">Java动态代理四种实现方式详解</a><br>\n<a href=\"https://www.cnblogs.com/wkfvawl/p/15030814.html\" target=\"_blank\">Java 动态代理 - 王陸</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/",
            "url": "https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/",
            "title": "Android AOP - 概论",
            "date_published": "2022-03-10T09:26:27.000Z",
            "content_html": "<h3 id=\"编程架构思想\">编程架构思想<a title=\"#编程架构思想\" href=\"#编程架构思想\"></a></h3>\n<ul>\n<li>\n<p>面向对象(Object Oriented Programming)</p>\n</li>\n<li>\n<p>面向过程(Procedure Oriented Programming)</p>\n</li>\n<li>\n<p>面向切面(Aspect Oriented Programming)</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<p>AOP 意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术，和 OOP 以对象为核心不同，AOP是针对业务处理过程中的类似的代码逻辑进行切入，然后统一处理。</p>\n<p>AOP其实是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。</p>\n<p><img src=\"https://s1.ax1x.com/2022/03/10/bfRiDK.png\" alt=\"bfRiDK.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"常见概念\">常见概念<a title=\"#常见概念\" href=\"#常见概念\"></a></h3>\n<ul>\n<li>连接点(<em>Joinpoint</em>)\n<ul>\n<li>程序中可能作为代码注入目标的特定的点，例如一个方法调用或者方法入口。</li>\n</ul>\n</li>\n<li>切点（<em>Pointcut</em>）\n<ul>\n<li>告诉代码注入工具，在任何注入一段特定代码的表达式。例如，在哪些joint points应用一个特定的Advice。</li>\n<li>切入点可以选择唯一一个，比如执行某一个方法，也可以有多个选择，比如，标记了一个定义成@DebugLog的自定义注解的所有方法。</li>\n</ul>\n</li>\n<li>增强（<em>Advice</em>）\n<ul>\n<li>注入到class文件中的代码。</li>\n<li>典型的Advice类型有before、after和around，分别表示在目标方法执行之前、执行后和完全代替目标方法执行的代码。</li>\n</ul>\n</li>\n<li>目标对象 (<em>Target</em>)</li>\n<li>引介(<em>Introduction</em>)</li>\n<li>织入（<em>Weaving</em>）\n<ul>\n<li>注入代码（advices）到目标位置（joint points）的过程</li>\n</ul>\n</li>\n<li>代理（<em>Proxy</em>）</li>\n<li>切面（<em>Aspect</em>）\n<ul>\n<li>Pointcut和Advice的组合看做切面。例如，我们在应用中通过定义一个Pointcut和给定恰当的Advice，添加一个日志切面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分类\">分类<a title=\"#分类\" href=\"#分类\"></a></h3>\n<blockquote>\n<p>一类是，例如Java的动态代理；另一类可以归结为，例如经常听说的，AspecJ等框架</p>\n</blockquote>\n<ul>\n<li>运行期的AOP\n<ul>\n<li>Java的动态代理</li>\n</ul>\n</li>\n<li>编译期的AOP\n<ul>\n<li>ASM</li>\n<li>AspecJ</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用\">应用<a title=\"#应用\" href=\"#应用\"></a></h3>\n<ul>\n<li>Hot Fix\n<ul>\n<li>基于AOP技术，编译期修改Java字节码，对每一个方法进行插桩操作，以便于hook每一个方法，做到方法级别的热修复</li>\n</ul>\n</li>\n<li>监测方法耗时</li>\n<li>日志记录</li>\n<li>统一处理点击抖动</li>\n<li>其他的监控方面</li>\n</ul>\n<h3 id=\"aop与apt区别\">AOP与APT区别<a title=\"#aop与apt区别\" href=\"#aop与apt区别\"></a></h3>\n<p>APT(Annotation Processing Tool)即注解处理器，是一种处理注解的工具，确切的说它是javac的一个工具，它用来在编译时扫描和处理注解。注解处理器以Java代码(或者编译过的字节码)作为输入，生成<code>.java文件</code>作为输出。</p>\n<ul>\n<li>APT是在编译期，通过注解生成<code>java</code>文件，然后.java文件仍然需要进一步编译生成<code>.class</code>文件</li>\n<li>AOP是在编译完成后直接通过修改<code>.class</code>文件，添加或者修改代码逻辑</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxODg0MzU2OQ==&amp;mid=2247483887&amp;idx=1&amp;sn=d54e3f210a4f31f477dba06c3dcd352e&amp;scene=21#wechat_redirect\" target=\"_blank\">AOP技术在客户端的应用与实践</a></p>\n",
            "tags": [
                "AOP"
            ]
        }
    ]
}