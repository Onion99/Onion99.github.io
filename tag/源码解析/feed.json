{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stay hungry , Stay foolish • All posts by \"源码解析\" tag",
    "description": "巴拉巴拉",
    "home_page_url": "http://onion66.gitee.io/blog",
    "items": [
        {
            "id": "http://onion66.gitee.io/blog/2022/03/03/p2ie22dC9NcVwpEH/",
            "url": "http://onion66.gitee.io/blog/2022/03/03/p2ie22dC9NcVwpEH/",
            "title": "源码学习 - LiveData",
            "date_published": "2022-03-02T17:47:39.000Z",
            "content_html": "<blockquote>\n<p><a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\" target=\"_blank\"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"优点\">优点<a title=\"#优点\" href=\"#优点\"></a></h3>\n<ul>\n<li>确保界面符合数据状态\n<ul>\n<li>LiveData 遵循观察者模式。当底层数据发生变化时，LiveData 会通知 Observer 对象。您可以整合代码以在这些 Observer 对象中更新界面。这样一来，您无需在每次应用数据发生变化时更新界面，因为观察者会替您完成更新。</li>\n</ul>\n</li>\n<li>不会发生内存泄漏\n<ul>\n<li>观察者会绑定到 Lifecycle 对象，并在其关联的生命周期遭到销毁后进行自我清理。</li>\n</ul>\n</li>\n<li>不会因 Activity 停止而导致崩溃\n<ul>\n<li>如果观察者的生命周期处于非活跃状态（如返回栈中的 Activity），则它不会接收任何 LiveData 事件。</li>\n</ul>\n</li>\n<li>不再需要手动处理生命周期\n<ul>\n<li>界面组件只是观察相关数据，不会停止或恢复观察。LiveData 将自动管理所有这些操作，因为它在观察时可以感知相关的生命周期状态变化。</li>\n</ul>\n</li>\n<li>数据始终保持最新状态\n<ul>\n<li>如果生命周期变为非活跃状态，它会在再次变为活跃状态时接收最新的数据。例如，曾经在后台的 Activity 会在返回前台后立即接收最新的数据。</li>\n</ul>\n</li>\n<li>适当的配置更改\n<ul>\n<li>如果由于配置更改（如设备旋转）而重新创建了 Activity 或 Fragment，它会立即接收最新的可用数据。</li>\n</ul>\n</li>\n<li>共享资源\n<ul>\n<li>您可以使用单例模式扩展 LiveData 对象以封装系统服务，以便在应用中共享它们。LiveData 对象连接到系统服务一次，然后需要相应资源的任何观察者只需观察 LiveData 对象。如需了解详情，请参阅扩展 LiveData。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h3>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailVideModel</span> : <span class=\"type\">ViewModel &#123;</span></span></span><br><span class=\"line\">\t  <span class=\"keyword\">val</span> getTopTabLiveData <span class=\"keyword\">by</span> lazy &#123;  MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaDetailsActivity</span> : <span class=\"type\">BaseActivity</span></span>()&#123;</span><br><span class=\"line\">\t  viewModel.getTopTabLiveData.observe(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">\t       <span class=\"comment\">// do some thing    </span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>![I8k2xH.png](<a href=\"https://z3.ax1x.com/2021/11/08/I8k2xH.png\">https://z3.ax1x.com/2021/11/08/I8k2xH.png</a> =100x100)</p>\n<h3 id=\"observer()做了什么\">observer()做了什么<a title=\"#observer()做了什么\" href=\"#observer()做了什么\"></a></h3>\n<blockquote>\n<p>将指定事件跟生命周期绑定</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 在给定所有者的生命周期内将给定的观察者添加到观察者列表中。 */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断生命周期为销毁,则忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 实例一个新的生命周期绑定观察者</span></span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否之前已经赋值,来防止有煞笔重复调用,专治代码水土不服</span></span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 注意看LifecycleBoundObserver.isAttachedTo()</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果之前已经赋值但又有煞笔在不同LifecycleOwner(生命周期管理者)中调用,话不多说,直接给crash,google就是牛逼</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经赋值且上面煞笔处理没问题,就不再做处理了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 看到了没有,核心啊,精髓啊,给当前LifecycleOwner加入Observer(观察者),在生命周期各个阶段响应事件</span></span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;   </span><br></pre></td></tr></table></figure>\n<p>看看mObservers.putIfAbsent:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* LinkedList，它伪装成一个Map并支持在迭代期间进行修改。它不是线程安全的 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeIterableMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果指定的键尚未与值关联，则将其与给定值关联,返回与指定键关联的前一个值，如果该键没有映射，则null */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> K key, <span class=\"meta\">@NonNull</span> V v)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;K, V&gt; entry = get(key);</span><br><span class=\"line\">        <span class=\"comment\">// 如果给定的值已经存在,则返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> entry.mValue;</span><br><span class=\"line\">        <span class=\"comment\">// 否则存进去,真似厉害啊</span></span><br><span class=\"line\">        put(key, v);</span><br><span class=\"line\">        <span class=\"comment\">// 返回代表之前不存在的null值,这就是理解有木有 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;   </span><br></pre></td></tr></table></figure>\n<p>看看LifecycleBoundObserver :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"comment\">// 生命周期管理者</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\">    <span class=\"comment\">// 看到这里没,直接赋值了,有什么好说的</span></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        mOwner = owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有点意思,这里判断是否处在活跃状态,就可以他妈的做正确的生命周期回调响应</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">        <span class=\"comment\">// 若生命周期已为销毁状态, 则移除 observer, 避免内存泄露</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">            prevState = currentState;</span><br><span class=\"line\">            activeStateChanged(shouldBeActive());</span><br><span class=\"line\">            currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断两个生命周期管理者是否为同一个</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了到这LiveData.observe()已经观察完毕了,到看看LiveData.postValue()了,<br>\n别说,google还是有点讲究的,看看这个官方提示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liveData.postValue(<span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">// 异步传值</span></span><br><span class=\"line\">liveData.setValue(<span class=\"string\">&quot;b&quot;</span>); <span class=\"comment\">//同步传值</span></span><br><span class=\"line\"><span class=\"comment\">// 结果: 值“b”将首先设置，然后主线程将用值“a”覆盖它。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在此主线程执行postValue()之前多次调用postValue()，则只会调度最后一个值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"postvalue()做了什么\">postValue()做了什么<a title=\"#postvalue()做了什么\" href=\"#postvalue()做了什么\"></a></h3>\n<blockquote>\n<p>他妈的,还能做什么,就是传值啊,这还用说的文章到此结束了,不会吧,不会吧,异步传值得注意处理多线程下的共享变量问题呢</p>\n</blockquote>\n<p>![I8mrdA.png](<a href=\"https://z3.ax1x.com/2021/11/08/I8mrdA.png\">https://z3.ax1x.com/2021/11/08/I8mrdA.png</a> =100x100)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 判断之前是否已经赋值过了</span></span><br><span class=\"line\">     postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">     <span class=\"comment\">// 给mPendingData赋值 </span></span><br><span class=\"line\">     mPendingData = value;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 看到没有,他妈的,之前已经赋值就return了,好气哦,干嘛这样呢</span></span><br><span class=\"line\">   <span class=\"comment\">// 嘿,看下mPostValueRunnable没有,他就是防止煞笔多线程下多次赋相同值做的</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!postTask) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 把传值线程放到主线程执行</span></span><br><span class=\"line\">   ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 未赋值状态</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NOT_SET = <span class=\"keyword\">new</span> Object()</span><br><span class=\"line\"><span class=\"comment\">// 默认就是未赋值状态</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> Object mPendingData = NOT_SET</span><br><span class=\"line\"><span class=\"comment\">// 传值线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 看到没有,真正传值都是通过newValue来传的好不好</span></span><br><span class=\"line\">    Object newValue;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">      newValue = mPendingData;</span><br><span class=\"line\">      <span class=\"comment\">// 嘿嘿,这里回归默认未赋值状态了</span></span><br><span class=\"line\">      mPendingData = NOT_SET;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最终还是调到setValue啊,果然啊,条条道路通setValue啊</span></span><br><span class=\"line\">    setValue((T) newValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"setvalue()\">setValue()<a title=\"#setvalue()\" href=\"#setvalue()\"></a></h3>\n<blockquote>\n<blockquote>\n<p>有什么好说的,其他的一枪秒了,我才是传输数据的核心代码好不好,屁,dispatchingValue才是</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置传输数据。 如果有活跃的ObserverWrapper(观察者)，值将被分发给他们。    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">  mVersion++;</span><br><span class=\"line\">  mData = value;</span><br><span class=\"line\">  dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断事件分发是否已经在执行,是则打断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 事件分发开始</span></span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        <span class=\"comment\">// 事件分发结束</span></span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果生命周期管理者已经销毁,则忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在分发之前检查下最先状态,如果不在活跃阶段,则不改变状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断version , 因为从上面来看,每次赋值version都会变得</span></span><br><span class=\"line\">        <span class=\"comment\">// 他妈的的,这样就不会陷入多次分发,保证只取最先的传值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">// 执行每个生命周期管理者的观察者的事件分发</span></span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>get到没有?<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/I8YNWQ.png\" alt=\"I8YNWQ.png\" loading=\"lazy\">]</p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "http://onion66.gitee.io/blog/2022/03/02/uVaapTCHAYrYDaHP/",
            "url": "http://onion66.gitee.io/blog/2022/03/02/uVaapTCHAYrYDaHP/",
            "title": "源码学习 - Lifecycle",
            "date_published": "2022-03-01T17:33:23.000Z",
            "content_html": "<blockquote>\n<p>Jetpack Lifecycle 提供了可用于构建生命周期感知型组件的类和接口,从而根据 Activity 或 Fragment 的当前生命周期状态自动调整其行为,记住我们要解析的是Jet Pack Lifecycle ,而不是 原有Activity/Fragment的生命周期流程</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><img src=\"https://s4.ax1x.com/2022/03/01/blNKTx.png\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h3>\n<h4 id=\"通过-defaultlifecycleobserver-实现\">通过 DefaultLifecycleObserver 实现<a title=\"#通过-defaultlifecycleobserver-实现\" href=\"#通过-defaultlifecycleobserver-实现\"></a></h4>\n<blockquote>\n<p>类可以通过实现 DefaultLifecycleObserver 并替换相应的方法（如 onCreate 和 onStart 等）来监控组件的生命周期状态。然后，您可以通过调用 Lifecycle 类的 addObserver() 方法并传递观察器的实例来添加观察器</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建生命周期感知型组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver</span> : <span class=\"type\">DefaultLifecycleObserver &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        connect() <span class=\"comment\">// 在页面 onResume 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        disconnect() <span class=\"comment\">// 在页面 onStop 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 添加生命周期观察器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(...)</span></span> &#123;</span><br><span class=\"line\">\t    myLifecycleOwner.getLifecycle().addObserver(MyObserver())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过注解实现licecycle-observer\">通过注解实现Licecycle Observer<a title=\"#通过注解实现licecycle-observer\" href=\"#通过注解实现licecycle-observer\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILifecycleObserver</span> : <span class=\"type\">LifecycleObserver &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver</span> : <span class=\"type\">ILifecycleObserver &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        connect() <span class=\"comment\">// 在页面 onResume 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        disconnect() <span class=\"comment\">// 在页面 onStop 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h3>\n<h4 id=\"class组成\">Class组成<a title=\"#class组成\" href=\"#class组成\"></a></h4>\n<ol>\n<li>首先我们得知道Activity/Fragment是如何实现LifecycleOwner的</li>\n</ol>\n<p>LifecycleOwner:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到Fragment 和Activity都实现了相关的LifecycleOwner接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComponentCallbacks</span>, <span class=\"title\">OnCreateContextMenuListener</span>, <span class=\"title\">LifecycleOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>, <span class=\"title\">HasDefaultViewModelProviderFactory</span>, <span class=\"title\">SavedStateRegistryOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ActivityResultCaller</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleRegistry mLifecycleRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ContextAware</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">LifecycleOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">SavedStateRegistryOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">OnBackPressedDispatcherOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ActivityResultRegistryOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ActivityResultCaller</span> </span>&#123;&#125; </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>明确LifecycleRegistry主要作用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义一个具有 Android 生命周期的对象 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleObserver observer)</span></span>;</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleObserver observer)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期事件,表明已被分发的生命周期事件,映射到Activity和Fragment中的回调事件 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">        ON_CREATE,ON_START,ON_RESUME,ON_PAUSE,ON_STOP,ON_DESTROY,ON_ANY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期状态,表明组件的当前状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">        DESTROYED,INITIALIZED,CREATED,STARTED,RESUMED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可以处理多个Observer的Lifecycle实现,Fragment和Activity使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner provider, <span class=\"keyword\">boolean</span> enforceMainThread)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">        mEnforceMainThread = enforceMainThread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>到这里我们就可以大致这么认为了, LifecycleOwner 通过获取当前对应的 LifecycleRegistry  管理多个LicecycleObserver,然后在生命周期状态发生变化时,处理不同状态事件的分放</li>\n</ol>\n<h4 id=\"activity-是如何实现jetpack-lifecycle事件分放的?\">Activity 是如何实现Jetpack Lifecycle事件分放的?<a title=\"#activity-是如何实现jetpack-lifecycle事件分放的?\" href=\"#activity-是如何实现jetpack-lifecycle事件分放的?\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> androidx.core.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"title\">extends</span> <span class=\"title\">Activity</span> <span class=\"title\">implements</span> <span class=\"title\">LifecycleOwner</span>,<span class=\"type\">KeyEventDispatcher.Component &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(<span class=\"keyword\">this</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> void onCreate(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ReportFragment.injectIfNeededIn(<span class=\"keyword\">this</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Lifecycle getLifecycle() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry; <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意看ReportFragment:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String REPORT_FRAGMENT_TAG = <span class=\"string\">&quot;androidx.lifecycle&quot;</span></span><br><span class=\"line\">            + <span class=\"string\">&quot;.LifecycleDispatcher.report_fragment_tag&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">29</span>) &#123;</span><br><span class=\"line\">         activity.registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> LifecycleCallbacks());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            manager.beginTransaction().add(<span class=\"keyword\">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">            <span class=\"comment\">// Hopefully, we are the first to make a transaction.</span></span><br><span class=\"line\">            manager.executePendingTransactions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity, <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//已经被标注为@Deprecated</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> ReportFragment <span class=\"title\">get</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (ReportFragment) activity.getFragmentManager().findFragmentByTag(</span><br><span class=\"line\">                REPORT_FRAGMENT_TAG);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        dispatchCreate(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        dispatchStart(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        dispatchResume(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        <span class=\"comment\">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class=\"line\">        mProcessListener = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; <span class=\"number\">29</span>) &#123;</span><br><span class=\"line\">            dispatch(getActivity(), event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//API29及以上直接使用Application.ActivityLifecycleCallbacks来监听生命周期</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleCallbacks</span> <span class=\"keyword\">implements</span> <span class=\"title\">Application</span>.<span class=\"title\">ActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@Nullable</span> Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPostCreated</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStarted</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPostStarted</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_START);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResumed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPostResumed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPrePaused</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPreStopped</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@NonNull</span> Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPreDestroyed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过一个透明的Fragment来分发生命周期事件，这样对于Activity来说是无侵入的。分成两部分逻辑：</p>\n<ul>\n<li>当API&gt;=29时，直接使用Application.ActivityLifecycleCallbacks来分发生命周期事件</li>\n<li>而当API&lt;29时，在Fragment的生命周期回调中进行了事件分发。<br>\n但殊途同归，两者最终都会走到<code>dispatch(Activity activity, Lifecycle.Event event)</code>方法</li>\n</ul>\n<h4 id=\"lifecycleobserver-是如何被响应的?\">LifecycleObserver 是如何被响应的?<a title=\"#lifecycleobserver-是如何被响应的?\" href=\"#lifecycleobserver-是如何被响应的?\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportFragment</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 事件分发</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity, <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2.1-处理生命周期事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        enforceMainThreadIfNeeded(<span class=\"string\">&quot;handleLifecycleEvent&quot;</span>);</span><br><span class=\"line\">        moveToState(event.getTargetState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.2-判断生命周期状态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mHandlingEvent || mAddingObserverCounter != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// we will figure out what to do on upper level.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2-3 同步状态至LifecycleObserver</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;LifecycleOwner of this LifecycleRegistry is already&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;garbage collected. It is too late to change lifecycle state.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Event event = Event.upFrom(observer.mState);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (event == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;no event up from &quot;</span> + observer.mState);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = Event.downFrom(observer.mState);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (event == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;no event down from &quot;</span> + observer.mState);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pushParentState(event.getTargetState());</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.mo4tech.com/analysis-of-the-basic-use-and-rationale-of-android-jetpack-component-lifecycle.html\" target=\"_blank\">Analysis of the basic use and rationale of Android Jetpack component Lifecycle - Moment For Technology (mo4tech.com)</a></p>\n<p><a href=\"https://blog.csdn.net/u013700502/article/details/118469311\" target=\"_blank\">Android Jetpack系列之Lifecycle_小马快跑的博客-CSDN博客_android中lifecycle</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "http://onion66.gitee.io/blog/2021/11/30/9S5c1rplpdSAbIxR/",
            "url": "http://onion66.gitee.io/blog/2021/11/30/9S5c1rplpdSAbIxR/",
            "title": "源码学习 - ViewModel",
            "date_published": "2021-11-29T23:30:53.000Z",
            "content_html": "<blockquote>\n<p>ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存,将视图和数据进行了分离解耦，为视图层提供数据</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"配置变更保存数据的方式\">配置变更保存数据的方式<a title=\"#配置变更保存数据的方式\" href=\"#配置变更保存数据的方式\"></a></h3>\n<ul>\n<li>onSaveInstance(Bundle)</li>\n<li>ViewModel</li>\n</ul>\n<h3 id=\"viewmodel优势\">ViewModel优势<a title=\"#viewmodel优势\" href=\"#viewmodel优势\"></a></h3>\n<ul>\n<li>ViewModel是将数据存到内存中，而onSaveInstance()是通过Bundle将序列化数据存在磁盘中</li>\n<li>ViewModel可以存储任何形式的数据，且大小不限制(不超过App分配的内存即可)，onSaveInstance()中只能存储可序列化的数据，且大小一般不超过1M（IPC通信数据限制）</li>\n</ul>\n<h3 id=\"viewmodel生命周期\">ViewModel生命周期<a title=\"#viewmodel生命周期\" href=\"#viewmodel生命周期\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8L0jU.png\" alt=\"I8L0jU.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>ViewModel对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的Lifecycle。ViewModel将一直留在内存中，直到限定其存在时间范围的Lifecycle永久消失：<br>\n对于activity，是在activity销毁时；<br>\n对于fragment，是在 fragment分离时</p>\n<h3 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h3>\n<h4 id=\"viewmodel是怎么样实例化的?\">ViewModel是怎么样实例化的?<a title=\"#viewmodel是怎么样实例化的?\" href=\"#viewmodel是怎么样实例化的?\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BindingActivity</span>&lt;<span class=\"type\">T : ViewDataBinding</span>&gt; <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    <span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> layoutId: <span class=\"built_in\">Int</span></span><br><span class=\"line\">) : AppCompatActivity(), HasAndroidInjector &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel?&gt;</span> <span class=\"title\">getActivityScopeViewModel</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化对应Scope的ViewModelProvider</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::activityProvider.isInitialized) &#123;</span><br><span class=\"line\">            activityProvider = ViewModelProvider(requireActivity())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取ViewModelProvider获取Viewmodel</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> activityProvider.<span class=\"keyword\">get</span>(modelClass)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelprovider又是啥?\">ViewModelProvider又是啥?<a title=\"#viewmodelprovider又是啥?\" href=\"#viewmodelprovider又是啥?\"></a></h4>\n<blockquote>\n<p>ViewModel的辅助程序类，该类负责为界面准备数据。在配置更改期间会自动保留 ViewModel 对象，以便它们存储的数据立即可供下一个 activity 或 fragment 实例使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 为Fragment/Activity提供ViewModels的实用程序类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.创建用来存储ViewModel的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 创建用于实例化新ViewModel的Factory</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), owner <span class=\"keyword\">instanceof</span> HasDefaultViewModelProviderFactory</span><br><span class=\"line\">                ? ((HasDefaultViewModelProviderFactory) owner).getDefaultViewModelProviderFactory()</span><br><span class=\"line\">                : NewInstanceFactory.getInstance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner, <span class=\"meta\">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStore store, <span class=\"meta\">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class=\"line\">        mFactory = factory;</span><br><span class=\"line\">        mViewModelStore = store;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModelProvider 关键参数组成:</p>\n<ul>\n<li>ViewModelStoreOwner：ViewModel存储器拥有者，用来提供ViewModelStore</li>\n<li>ViewModelStore：ViewModel存储器，用来存储ViewModel</li>\n<li>ViewModelProviderFactory：创建ViewModel的工厂</li>\n</ul>\n<p>首先尝试通过ViewModelStore.get(key)获取ViewModel，如果不为空直接返回该实例；如果为空，通过Factory.create创建ViewModel并保存到ViewModelStore中。先来看Factory是如何创建ViewModel的，ViewModelProvider构造函数中，如果没有传入Factory，那么会使用NewInstanceFactory</p>\n<h4 id=\"viewmodelprovider中的owner和factory怎么来的?\">ViewModelProvider中的Owner和Factory怎么来的?<a title=\"#viewmodelprovider中的owner和factory怎么来的?\" href=\"#viewmodelprovider中的owner和factory怎么来的?\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"viewmodelproviderfactory\">ViewModelProviderFactory<a title=\"#viewmodelproviderfactory\" href=\"#viewmodelproviderfactory\"></a></h5>\n<blockquote>\n<p>Activity,Fragment默认实现了HasDefaultViewModelProviderFactory接口,实现自己创建ViewModel的ViewModelProviderFactory</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGEOT1.png\" alt=\"IGEOT1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>再来看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span></span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"comment\">/* 返回未向ViewModelProvider构造函数提供自定义Factory时应使用的默认ViewModelProvider.Factory  */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewModelProvider.<span class=\"function\">Factory <span class=\"title\">getDefaultViewModelProviderFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 妈的,就是这么简单,直接实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDefaultFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mDefaultFactory = <span class=\"keyword\">new</span> SavedStateViewModelFactory(</span><br><span class=\"line\">                    getApplication(),</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    getIntent() != <span class=\"keyword\">null</span> ? getIntent().getExtras() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mDefaultFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<h5 id=\"viewmodelstore\">ViewModelStore<a title=\"#viewmodelstore\" href=\"#viewmodelstore\"></a></h5>\n<blockquote>\n<p>Activity,Fragment也默认实现了这个接口,以来获取跟当前生命周期相关的ViewModelStore,看到没有,有图有真相</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8xIk4.png\" alt=\"I8xIk4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 叉,这里照我猜想肯定是实现ViewModelStore的单例</span></span><br><span class=\"line\">    ensureViewModelStore();</span><br><span class=\"line\">    <span class=\"comment\">// 返回与此Activity关联的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>void ensureViewModelStore() &#123;\n    if (mViewModelStore == null) &#123;\n        // 检索先前由onRetainNonConfigurationInstance()返回的配置变更后的缓存配置\n        NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance();\n        // 如果缓存配置不为空,则取缓存配置的viewModelStore\n        if (nc != null) &#123;\n            mViewModelStore = nc.viewModelStore;\n        &#125;\n        // 否则自己实例一个\n        if (mViewModelStore == null) &#123;\n            mViewModelStore = new ViewModelStore();\n        &#125;\n    &#125;\n&#125;    \n</code></pre>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**通过getLastNonConfigurationInstance()我们可以在知道 **</span><br><span class=\"line\">ViewModelStore的存取都是间接在ActivityThread中进行并保存在ActivityClientRecord中。在Activity配置变化时，ViewModelStore可以在Activity销毁时得以保存并在重建时重新从lastNonConfigurationInstances中获取，又因为ViewModelStore提供了ViewModel，所以ViewModel也可以在Activity配置变化时得以保存，这也是为什么ViewModel的生命周期比Activity生命周期长的原因了。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 最后ViewModelProvider是如何<span class=\"keyword\">get</span>到 Viewmodel的?</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">    <span class=\"comment\">// 第一步:小get</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"comment\">// 好家伙,看到没有,如果这里判断是局部类或者匿名类,就直接给crash了,谷歌就是牛逼</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 首先构造了一个key，直接调用下面的get(key,modelClass)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第二步:大get</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br><span class=\"line\">        <span class=\"comment\">// 尝试从ViewModelStore中获取ViewModel</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory instanceof OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// viewModel不为空直接返回该实例</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 然后如果为null,则通过具体工厂类去实例化ViewModel</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory instanceof KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 嘿嘿,放进缓存</span></span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ViewModel的实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T create(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        boolean isAndroidViewModel = AndroidViewModel.<span class=\"keyword\">class</span>.isAssignableFrom(modelClass);</span><br><span class=\"line\">        Constructor&lt;T&gt; <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射,去找到当前ViewModel的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">constructor</span> = findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">constructor</span> = findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">constructor</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SavedStateHandleController controller = SavedStateHandleController.create(</span><br><span class=\"line\">                mSavedStateRegistry, mLifecycle, key, mDefaultArgs);</span><br><span class=\"line\">        <span class=\"comment\">// 嘿嘿,调用构造函数,实例化        </span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T viewmodel;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                viewmodel = <span class=\"keyword\">constructor</span>.newInstance(mApplication, controller.getHandle());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                viewmodel = <span class=\"keyword\">constructor</span>.newInstance(controller.getHandle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            viewmodel.setTagIfAbsent(TAG_SAVED_STATE_HANDLE_CONTROLLER, controller);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> viewmodel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;Failed to access &quot;</span> + modelClass, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;A &quot;</span> + modelClass + <span class=\"string\">&quot; cannot be instantiated.&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;An exception happened in constructor of &quot;</span></span><br><span class=\"line\">                    + modelClass, e.getCause());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelstore-是是如何存储viewmodel的?\">ViewModelStore 是是如何存储ViewModel的?<a title=\"#viewmodelstore-是是如何存储viewmodel的?\" href=\"#viewmodelstore-是是如何存储viewmodel的?\"></a></h4>\n<p>嘿嘿,存储ViewModel的ViewModelStore,牛逼啊,用一个HashMap来缓存看到有木有:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/61bfe8240cd5d1648037da8bdc77ea8e.png\" alt=\"viewmodelcreate.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) oldViewModel.onCleared();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IG8UgA.png\" alt=\"IG8UgA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"viewmodel意义\">ViewModel意义<a title=\"#viewmodel意义\" href=\"#viewmodel意义\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGd3ff.png\" alt=\"IGd3ff.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGwfKg.png\" alt=\"IGwfKg.png\" loading=\"lazy\" class=\"φbp\"></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "http://onion66.gitee.io/blog/2021/11/30/4diQitvVwGPnicN5/",
            "url": "http://onion66.gitee.io/blog/2021/11/30/4diQitvVwGPnicN5/",
            "title": "源码学习 - HashMap",
            "date_published": "2021-11-29T23:28:47.000Z",
            "content_html": "<blockquote>\n<p>Map是什么,可以是一个键到值的Object,可以是一个键值对的集合, 是函数抽象的数学模型</p>\n</blockquote>\n<p>似不似?</p>\n<p>HashMap就是Map实现的佼佼者,它使用哈希表作为底层数据结构</p>\n<blockquote>\n<p>注意哦,作为性能的最上层,HashMap是不考虑线程安全的,这是上层人的优越,多线程情况下,可以选用<code>ConcurrentHashMap</code> &gt; <code>Collections.synchronizedMap(HashMap&lt;&gt;())</code></p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"结构\">结构<a title=\"#结构\" href=\"#结构\"></a></h3>\n<blockquote>\n<p>当Node数组的长度大于8时,会转变红黑树来存储</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存储数据的Node数组,一枪秒了有木有,一看就是链表结构 </span></span><br><span class=\"line\">  <span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/22/Iz66S0.png\" alt=\"Iz66S0.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h3>\n<h4 id=\"hashmap()\">HashMap()<a title=\"#hashmap()\" href=\"#hashmap()\"></a></h4>\n<blockquote>\n<p>初始化部分主要决定当前容量(loadFactor ),以及存储的阀值(loadFactor)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 最大容量，当两个构造函数中任何一个带参数的函数隐式指定较大的值时使用。必须是2的幂&lt;= 1&lt;&lt;30</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 默认扩容比例</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 针对煞笔的处理,不会真的有人给0吧</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Illegal initial capacity:&quot;</span> +initialCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// 当前最大容量    </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">// 判断扩容比例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Illegal load factor: &quot;</span> +loadFactor);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">    <span class=\"comment\">// 决定下一次调整容量的大小(临界值)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回给定目标容量的2次幂大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tableSizeFor</span><span class=\"params\">(<span class=\"keyword\">int</span> cap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用指定的初始容量和默认的加载因子来初始化HashMap。这里应该注意的是，有时它不是您指定的初始容量。例如新HashMap (20,0.8);那么实际的初始容量是32，因为tablesize()方法严格要求初始容量增加到2的幂，只能是16、32、64、128</p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "http://onion66.gitee.io/blog/2021/11/30/hu0861X6Ltf32fYt/",
            "url": "http://onion66.gitee.io/blog/2021/11/30/hu0861X6Ltf32fYt/",
            "title": "源码学习 - DataBinding",
            "date_published": "2021-11-29T23:27:07.000Z",
            "content_html": "<h3 id=\"sameple\">Sameple<a title=\"#sameple\" href=\"#sameple\"></a></h3>\n<p>首先,我们来看看DataBinding使用:</p>\n<ol>\n<li>给layout文件套娃:</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.viewpager.widget.ViewPager</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/home_pager&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.flyco.tablayout.SlidingTabLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/home_tab&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在Fragment或者View中获取binding对象</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding = DataBindingUtil.inflate(inflater,layoutRes,container,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>超,就是这么简单,来从<code>inflate</code>开始解析</p>\n<span id=\"more\"></span>\n<h3 id=\"databindingutil.inflate梳理\">DataBindingUtil.inflate梳理<a title=\"#databindingutil.inflate梳理\" href=\"#databindingutil.inflate梳理\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ViewDataBinding&gt; <span class=\"function\">T <span class=\"title\">inflate</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"keyword\">int</span> layoutId, <span class=\"meta\">@Nullable</span> ViewGroup parent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">boolean</span> attachToParent, <span class=\"meta\">@Nullable</span> DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查康康是不是子layout附加到父layout,一般是false,因为如果为ture会导致子layout的layoutparams 失效</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useChildren = parent != <span class=\"keyword\">null</span> &amp;&amp; attachToParent;</span><br><span class=\"line\">    <span class=\"comment\">// 上面一般为false,那这里一般也是零蛋啊</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> startChildren = useChildren ? parent.getChildCount() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 解析xml生成View,放空大脑就是这样,深究的话,我只能甩一篇郭神的文章了:https://blog.csdn.net/guolin_blog/article/details/12921889</span></span><br><span class=\"line\">    <span class=\"comment\">// 什么具体inflate是怎么样,不听不听王八念经</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> View view = inflater.inflate(layoutId, parent, attachToParent);</span><br><span class=\"line\">    <span class=\"comment\">// 嘿嘿,这里开始binding</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useChildren) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bindToAddedViews(bindingComponent, parent, startChildren, layoutId);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bind(bindingComponent, view, layoutId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBinderMapper sMapper = <span class=\"keyword\">new</span> DataBinderMapperImpl();</span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;T extends ViewDataBinding&gt; <span class=\"function\">T <span class=\"title\">bind</span><span class=\"params\">(DataBindingComponent bindingComponent, View root,<span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不理了,这里就拿到binding了,可以直接引用View了,停止思考</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) sMapper.getDataBinder(bindingComponent, root, layoutId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题来了,它是怎么取得我要的DataBinding对象且又是怎么实现View绑定的?</p>\n<ol>\n<li>好,来康康,这个<code>DataBinderMapperImpl</code>,这是编译阶段下kapt自动生成的:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> androidx.databinding;</span><br><span class=\"line\"><span class=\"comment\">// 好家伙,这里直接继承MergedDataBinderMapper </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBinderMapperImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">MergedDataBinderMapper</span> </span>&#123;</span><br><span class=\"line\">  DataBinderMapperImpl() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加kapt下生成当前Module的DataBinderMapperImpl</span></span><br><span class=\"line\">    addMapper(<span class=\"keyword\">new</span> com.xxx.xxx.DataBinderMapperImpl());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 合并其他Mapper的DataBindingMapper </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergedDataBinderMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">DataBinderMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Class&lt;? extends DataBinderMapper&gt;&gt; mExistingMappers = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 添加Mapper,如果已经存在则忽略</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMapper</span><span class=\"params\">(DataBinderMapper mapper)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;? extends DataBinderMapper&gt; mapperClass = mapper.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mExistingMappers.add(mapperClass)) &#123;</span><br><span class=\"line\">            mMappers.add(mapper);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> List&lt;DataBinderMapper&gt; dependencies = mapper.collectDependencies();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(DataBinderMapper dependency : dependencies) &#123;</span><br><span class=\"line\">                addMapper(dependency);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>MergedDataBinderMapper.getDataBinder</code>:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewDataBinding <span class=\"title\">getDataBinder</span><span class=\"params\">(DataBindingComponent bindingComponent, View view,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历之前添加的mMappers    </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(DataBinderMapper mapper : mMappers) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 好了,这里获取对应的Mapper的DataBinder,超,想想之前添加了哪个Mapper</span></span><br><span class=\"line\">        <span class=\"comment\">// 没错,不正好对上tmd的上面1的com.xxx.xxx.DataBinderMapperImpl()</span></span><br><span class=\"line\">        ViewDataBinding result = mapper.getDataBinder(bindingComponent, view, layoutId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFeatures()) <span class=\"keyword\">return</span> getDataBinder(bindingComponent, view, layoutId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>让我们来康康kapt生成的<code>com.xxx.xxx.DataBinderMapperImpl()</code>到底有什么</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBinderMapperImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">DataBinderMapper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// layout id 索引</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAYOUT_FRAGMENTHOME = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SparseIntArray INTERNAL_LAYOUT_ID_LOOKUP = <span class=\"keyword\">new</span> SparseIntArray(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    INTERNAL_LAYOUT_ID_LOOKUP.put(com.xmiles.callshow.R.layout.fragment_home, LAYOUT_FRAGMENTHOME);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewDataBinding <span class=\"title\">getDataBinder</span><span class=\"params\">(DataBindingComponent component, View view, <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到索引的id</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localizedLayoutId &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Object tag = view.getTag();</span><br><span class=\"line\">      <span class=\"comment\">// 判断tag</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(tag == <span class=\"keyword\">null</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;view must have a tag&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 这里如果布局数量超50,为避免一个方法体过大,会额外新建另外一个函数去处理,这里为好展示,整个类我就删除了很多其他布局参数</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> methodIndex = (localizedLayoutId - <span class=\"number\">1</span>) / <span class=\"number\">50</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 跟据对应componet生成对应的ViewDetaBinding</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(methodIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> internalGetViewDataBinding0(component, view, localizedLayoutId, tag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> internalGetViewDataBinding1(component, view, localizedLayoutId, tag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// GetViewDataBinding</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ViewDataBinding <span class=\"title\">internalGetViewDataBinding0</span><span class=\"params\">(DataBindingComponent component,View view, <span class=\"keyword\">int</span> internalId, Object tag)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(internalId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span>  LAYOUT_FRAGMENTHOME: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;layout/fragment_home_0&quot;</span>.equals(tag)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FragmentHomeBindingImpl(component, view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;The tag for fragment_home is invalid. Received: &quot;</span> + tag);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/4be20cc58f17\" target=\"_blank\">Android架构组件之DataBinding源码解析 - 简书 (jianshu.com)</a><br>\n<a href=\"https://www.jianshu.com/p/4e9a1ab05bb5\" target=\"_blank\">DataBinding源码分析 - 简书 (jianshu.com)</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "http://onion66.gitee.io/blog/2021/11/01/15jfHwStpctgCeeA/",
            "url": "http://onion66.gitee.io/blog/2021/11/01/15jfHwStpctgCeeA/",
            "title": "源码学习 - Glide",
            "date_published": "2021-10-31T21:29:17.000Z",
            "content_html": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(fragment)</span><br><span class=\"line\">    .load(myUrl)</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"with()\">with()<a title=\"#with()\" href=\"#with()\"></a></h3>\n<blockquote>\n<p>用Method初始化glide的一些必需的环境，然后调用Requestmanagerretriver的<code>get()</code>获取requestManager。如果传入的对象是全局Context，你就不需要处理生命周期;如果输入是具有生命周期的View(包含Frg或Act)则将添加一个隐藏的Fragment来感知生命周期</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestManager <span class=\"title\">with</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Context context)</span> </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> getRetriever(context).get(context);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getretriever()\">getRetriever()<a title=\"#getretriever()\" href=\"#getretriever()\"></a></h4>\n<blockquote>\n<p>RequestManagerRetriever,用于创建新的RequestManager或从Activity和Fragment中检索现有的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RequestManagerRetriever <span class=\"title\">getRetriever</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 由于其他原因，上下文可能为空（即用户传入空值），但实际上它只会由于 Fragment 生命周期的错误而发生。</span></span><br><span class=\"line\">  Preconditions.checkNotNull(</span><br><span class=\"line\">      context,<span class=\"string\">&quot;You cannot start a load on a not yet attached View or a Fragment where getActivity() &quot;</span></span><br><span class=\"line\">          + <span class=\"string\">&quot;returns null (which usually occurs when getActivity() is called before the Fragment &quot;</span></span><br><span class=\"line\">          + <span class=\"string\">&quot;is attached or after the Fragment is destroyed).&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取RequestManagerRetriever</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Glide.get(context).getRequestManagerRetriever();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"get()\">get()<a title=\"#get()\" href=\"#get()\"></a></h4>\n<blockquote>\n<p>单例实现Glide的初始化</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双重检查锁定在这里是安全的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> static Glide <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> Context context) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (glide == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射GeneratedAppGlideModuleImpl实例化Glide</span></span><br><span class=\"line\">    GeneratedAppGlideModule annotationGeneratedModule =</span><br><span class=\"line\">        getAnnotationGeneratedGlideModules(context.getApplicationContext()); </span><br><span class=\"line\">    synchronized (Glide.<span class=\"keyword\">class</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (glide == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        checkAndInitializeGlide(context, annotationGeneratedModule);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> glide;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestmanagerretriever.get()\">RequestManagerRetriever.get()<a title=\"#requestmanagerretriever.get()\" href=\"#requestmanagerretriever.get()\"></a></h4>\n<blockquote>\n<p>创建对应生命周期的RequestManager</p>\n</blockquote>\n<ul>\n<li>首先判断是在子线程,则拿一个全Context然后在工厂模式创建下RequestManager,所以推荐不要在子线程执行此操作</li>\n<li>如为FragmentActivity,则通过FragmentManager,创建一个空Fragment放进当前<code>Fragment</code>或者<code>Activity</code>,这样就可以感知宿主的生命周期,然后在工厂模式创建下RequestManager</li>\n<li>如为Activity…</li>\n<li>如为ContextWrapper…</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get((FragmentActivity) activity);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertNotDestroyed(activity);</span><br><span class=\"line\">    frameWaiter.registerSelf(activity);</span><br><span class=\"line\">    android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragmentGet(activity, fm, <span class=\"comment\">/*parentHint=*/</span> <span class=\"keyword\">null</span>, isActivityVisible(activity));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// FragmentActivity Simple </span></span><br><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> FragmentActivity activity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertNotDestroyed(activity);</span><br><span class=\"line\">    frameWaiter.registerSelf(activity);</span><br><span class=\"line\">    FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> supportFragmentGet(activity, fm, <span class=\"comment\">/*parentHint=*/</span> <span class=\"keyword\">null</span>, isActivityVisible(activity));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过supportFragment感知创建</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RequestManager <span class=\"title\">supportFragmentGet</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@NonNull</span> Context context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@NonNull</span> FragmentManager fm,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Nullable</span> Fragment parentHint,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class=\"line\">  SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);</span><br><span class=\"line\">  RequestManager requestManager = current.getRequestManager();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 工厂模式创建</span></span><br><span class=\"line\">    Glide glide = Glide.get(context);</span><br><span class=\"line\">    requestManager =</span><br><span class=\"line\">        factory.build(</span><br><span class=\"line\">            glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class=\"line\">    <span class=\"comment\">// 这是一个小技巧，我们将启动 RequestManager，而不是相应的 Lifecycle。启动 RequestManager 是安全的，但启动 Lifecycle 可能会引发内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isParentVisible) &#123;</span><br><span class=\"line\">      requestManager.onStart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    current.setRequestManager(requestManager);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> requestManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"load()\">load()<a title=\"#load()\" href=\"#load()\"></a></h3>\n<blockquote>\n<p>对全局变量赋值,构建ReqeustBuilder</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drawable Simple</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestBuilder&lt;Drawable&gt; <span class=\"title\">load</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Drawable drawable)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> asDrawable().load(drawable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"into()\">into()<a title=\"#into()\" href=\"#into()\"></a></h3>\n<p>设置资源到加载的ImageView中 ，取消任何现有的加载，并释放 Glide 之前可能加载到ImageView的任何资源，以便它们可以被重用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置资源配置到TargetView</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewTarget&lt;ImageView, TranscodeType&gt; <span class=\"title\">into</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ImageView view)</span> </span>&#123;</span><br><span class=\"line\">    Util.assertMainThread();</span><br><span class=\"line\">    ···</span><br><span class=\"line\">    <span class=\"keyword\">return</span> into(</span><br><span class=\"line\">        glideContext.buildImageViewTarget(view, transcodeClass),</span><br><span class=\"line\">        <span class=\"comment\">/*targetListener=*/</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        requestOptions,</span><br><span class=\"line\">        Executors.mainThreadExecutor());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建TargetView</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;X&gt; <span class=\"function\">ViewTarget&lt;ImageView, X&gt; <span class=\"title\">buildImageViewTarget</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@NonNull</span> ImageView imageView, <span class=\"meta\">@NonNull</span> Class&lt;X&gt; transcodeClass)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageViewTargetFactory.buildTarget(imageView, transcodeClass);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 负责为指定的android.view.View子类生成正确类型的Target工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageViewTargetFactory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;Z&gt; <span class=\"function\">ViewTarget&lt;ImageView, Z&gt; <span class=\"title\">buildTarget</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@NonNull</span> ImageView view, <span class=\"meta\">@NonNull</span> Class&lt;Z&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Bitmap.class.equals(clazz)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class=\"keyword\">new</span> BitmapImageViewTarget(view);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Drawable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class=\"keyword\">new</span> DrawableImageViewTarget(view);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">          <span class=\"string\">&quot;Unhandled class: &quot;</span> + clazz + <span class=\"string\">&quot;, try .as*(Class).transcode(ResourceTranscoder)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"into()-1\">into()<a title=\"#into()-1\" href=\"#into()-1\"></a></h4>\n<blockquote>\n<p>核心代码加载代码，看起来简单但实现起来复杂。<br>\n首先看看 buildRequest 如何初始化 request</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class=\"function\">Y <span class=\"title\">into</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Y target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; options, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  Preconditions.checkNotNull(target);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isModelSet) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;You must call #load() before calling #into()&quot;</span>); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 现在的请求</span></span><br><span class=\"line\">  Request request = buildRequest(target, targetListener, options, callbackExecutor);</span><br><span class=\"line\">  <span class=\"comment\">// 之前的请求</span></span><br><span class=\"line\">  Request previous = target.getRequest();</span><br><span class=\"line\">  <span class=\"comment\">// 如果之前的请求完成，重新开始以重新传递结果，触发 RequestListeners 和 Targets。如果请求失败，将重新请求，</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request.isEquivalentTo(previous) &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果之前的请求已经在运行，我们可以让它继续运行而不中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Preconditions.checkNotNull(previous).isRunning()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用先前的请求而不是新的请求来优化，例如跳过设置占位符、跟踪和取消跟踪目标以及获取在单个请求中完成的视图维度</span></span><br><span class=\"line\">      previous.begin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestManager.clear(target);</span><br><span class=\"line\">  target.setRequest(request);</span><br><span class=\"line\">  requestManager.track(target, request);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestbuilder.buildrequest()\">RequestBuilder.buildRequest()<a title=\"#requestbuilder.buildrequest()\" href=\"#requestbuilder.buildrequest()\"></a></h4>\n<blockquote>\n<p>根据存在的场景建立不同Request</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildRequest</span><span class=\"params\">(Target&lt;TranscodeType&gt; target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buildRequestRecursive(<span class=\"comment\">/*requestLock=*/</span> <span class=\"keyword\">new</span> Object(), target, targetListener,<span class=\"comment\">/*parentCoordinator=*/</span> <span class=\"keyword\">null</span>, transitionOptions, requestOptions.getPriority(), requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight(), requestOptions, callbackExecutor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildRequestRecursive</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, <span class=\"meta\">@Nullable</span> RequestCoordinator parentCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如有必要首先构建 ErrorRequestCoordinator，以便我们可以更新 parentCoordinator。</span></span><br><span class=\"line\">  ErrorRequestCoordinator errorRequestCoordinator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorBuilder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    errorRequestCoordinator = <span class=\"keyword\">new</span> ErrorRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    parentCoordinator = errorRequestCoordinator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Request mainRequest = buildThumbnailRequestRecursive(requestLock, target, targetListener, parentCoordinator, transitionOptions, priority, overrideWidth, overrideHeight, requestOptions, callbackExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorRequestCoordinator == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> mainRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> errorOverrideWidth = errorBuilder.getOverrideWidth();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> errorOverrideHeight = errorBuilder.getOverrideHeight();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !errorBuilder.isValidOverride()) &#123;</span><br><span class=\"line\">    errorOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class=\"line\">    errorOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Request errorRequest = errorBuilder.buildRequestRecursive(requestLock, target, targetListener, errorRequestCoordinator, errorBuilder.transitionOptions, errorBuilder.getPriority(), errorOverrideWidth, errorOverrideHeight, errorBuilder, callbackExecutor);</span><br><span class=\"line\">  errorRequestCoordinator.setRequests(mainRequest, errorRequest);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errorRequestCoordinator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestbuilder.buildthumbnailrequestrecursive()\">RequestBuilder.buildThumbnailRequestRecursive()<a title=\"#requestbuilder.buildthumbnailrequestrecursive()\" href=\"#requestbuilder.buildthumbnailrequestrecursive()\"></a></h4>\n<blockquote>\n<p>根据是否需要缩略图,生成各种不同的Request</p>\n</blockquote>\n<p>这里经过一层又一层最终拿到一个<code>SingleRequest</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildThumbnailRequestRecursive</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, RequestListener&lt;TranscodeType&gt; targetListener, <span class=\"meta\">@Nullable</span> RequestCoordinator parentCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (thumbnailBuilder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归案例：包含一个潜在的递归缩略图Request Builder</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThumbnailBuilt) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">          <span class=\"string\">&quot;You cannot use a request as both the main request and a &quot;</span></span><br><span class=\"line\">              + <span class=\"string\">&quot;thumbnail, consider using clone() on the request(s) passed to thumbnail()&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; thumbTransitionOptions = thumbnailBuilder.transitionOptions;</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下我们的将过渡用在缩略图，但避免覆盖可能已明确应用于缩略图请求的自定义选项。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thumbnailBuilder.isDefaultTransitionOptionsSet) thumbTransitionOptions = transitionOptions;</span><br><span class=\"line\">    Priority thumbPriority = thumbnailBuilder.isPrioritySet() ? thumbnailBuilder.getPriority() : getThumbnailPriority(priority);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> thumbOverrideWidth = thumbnailBuilder.getOverrideWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> thumbOverrideHeight = thumbnailBuilder.getOverrideHeight();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !thumbnailBuilder.isValidOverride()) &#123;</span><br><span class=\"line\">      thumbOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class=\"line\">      thumbOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThumbnailRequestCoordinator coordinator = <span class=\"keyword\">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    Request fullRequest = obtainRequest(requestLock, target, targetListener, requestOptions, coordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    isThumbnailBuilt = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 递归生成缩略图请求</span></span><br><span class=\"line\">    Request thumbRequest = thumbnailBuilder.buildRequestRecursive(requestLock, target,targetListener, coordinator, thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight, thumbnailBuilder, callbackExecutor);</span><br><span class=\"line\">    isThumbnailBuilt = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    coordinator.setRequests(fullRequest, thumbRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (thumbSizeMultiplier != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本情况：缩略图Multiplier生成缩略图请求，但不能递归。</span></span><br><span class=\"line\">    ThumbnailRequestCoordinator coordinator = <span class=\"keyword\">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    Request fullRequest = obtainRequest(requestLock, target, targetListener, requestOptions, coordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    BaseRequestOptions&lt;?&gt; thumbnailOptions = requestOptions.clone().sizeMultiplier(thumbSizeMultiplier);</span><br><span class=\"line\">    Request thumbnailRequest = obtainRequest(requestLock, target, targetListener, thumbnailOptions, coordinator, transitionOptions, getThumbnailPriority(priority), overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    coordinator.setRequests(fullRequest, thumbnailRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本情况：没有缩略图</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obtainRequest(requestLock, target, targetListener, requestOptions, parentCoordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">obtainRequest</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; requestOptions, RequestCoordinator requestCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> SingleRequest.obtain(context, glideContext, requestLock, model, transcodeClass, requestOptions, overrideWidth, overrideHeight, priority, target, targetListener, requestListeners, requestCoordinator, glideContext.getEngine(), transitionOptions.getTransitionFactory(), callbackExecutor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestmanager.track()\">RequestManager.track()<a title=\"#requestmanager.track()\" href=\"#requestmanager.track()\"></a></h4>\n<p>这里Glide将判断请求是否需要显示，如果它需要现在显示则开始执行，否则clear( )，并将请求放入队列。这种设计更精巧，省电</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">track</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Target&lt;?&gt; target, <span class=\"meta\">@NonNull</span> Request request)</span> </span>&#123;  </span><br><span class=\"line\">  targetTracker.track(target);  </span><br><span class=\"line\">  requestTracker.runRequest(request);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** 开始跟踪给定的请求 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Request request)</span> </span>&#123;</span><br><span class=\"line\">  requests.add(request);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启动异步加载</span></span><br><span class=\"line\">    request.begin();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 防止从以前的请求加载任何位图，释放此请求持有的任何资源，显示当前占位符（如果提供），并将请求标记为已取消</span></span><br><span class=\"line\">    request.clear();</span><br><span class=\"line\">    pendingRequests.add(request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"singlerequest.begin()\">SingleRequest.begin()<a title=\"#singlerequest.begin()\" href=\"#singlerequest.begin()\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (requestLock) &#123;</span><br><span class=\"line\">    assertNotCallingCallbacks();</span><br><span class=\"line\">    stateVerifier.throwIfRecycled();</span><br><span class=\"line\">    startTime = LogTime.getLogTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (model == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class=\"line\">        width = overrideWidth;</span><br><span class=\"line\">        height = overrideHeight;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果用户设置可回调的Drawables,这里进行日志反馈</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> logLevel = getFallbackDrawable() == <span class=\"keyword\">null</span> ? Log.WARN : Log.DEBUG;</span><br><span class=\"line\">      onLoadFailed(<span class=\"keyword\">new</span> GlideException(<span class=\"string\">&quot;Received null model&quot;</span>), logLevel);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == Status.RUNNING) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot restart a running request&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们在完成后重新启动(通常是通过notifyDataSetChanged之类的方式，向相同的目标或视图启动相同的请求)，我们可以简单地使用上次检索到的资源和大小，而跳过获取一个新的大小，开始一个新的加载等(这意味着希望重新启动加载的用户需要在开始新的加载之前显式地清除view或Target，因为他们觉得视图大小已经改变。)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == Status.COMPLETE) &#123;</span><br><span class=\"line\">      onResourceReady(resource, DataSource.MEMORY_CACHE, <span class=\"comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于既未完成也未运行的请求，重新启动可以被视为新请求，并可以从头开始运行</span></span><br><span class=\"line\">    cookie = GlideTrace.beginSectionAsync(TAG);</span><br><span class=\"line\">    status = Status.WAITING_FOR_SIZE;</span><br><span class=\"line\">    <span class=\"comment\">// 如果宽高已指定,则回调onSizeReady ,否则再获取宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class=\"line\">      onSizeReady(overrideWidth, overrideHeight);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target.getSize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE) &amp;&amp; canNotifyStatusChanged()) &#123;</span><br><span class=\"line\">      target.onLoadStarted(getPlaceholderDrawable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>onLoadFailed : 图片或者资源为空,报错回调</li>\n<li>onResourceReady: 最终通过<code>Engine.release( )</code>,释放资源</li>\n<li>onSizeReady: View大小已明确 , 执行<code>Engine.load()</code>加载资源</li>\n<li>getSize: 获取View大小</li>\n<li>onLoadStarted: 等待或运行中,占位图处理</li>\n</ul>\n<h4 id=\"singlerequest.onsizeready(-)\">SingleRequest.onSizeReady( )<a title=\"#singlerequest.onsizeready(-)\" href=\"#singlerequest.onsizeready(-)\"></a></h4>\n<blockquote>\n<p>启动给定参数进行图片的加载, 必须在主线程上调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeReady</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">  stateVerifier.throwIfRecycled();</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (requestLock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status != Status.WAITING_FOR_SIZE) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    status = Status.RUNNING;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> sizeMultiplier = requestOptions.getSizeMultiplier();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = maybeApplySizeMultiplier(width, sizeMultiplier);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = maybeApplySizeMultiplier(height, sizeMultiplier);</span><br><span class=\"line\">    loadStatus = engine.load(glideContext, model, requestOptions.getSignature(), <span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height, requestOptions.getResourceClass(), transcodeClass, priority, requestOptions.getDiskCacheStrategy(), requestOptions.getTransformations(), requestOptions.isTransformationRequired(), requestOptions.isScaleOnlyOrNoTransform(), requestOptions.getOptions(), requestOptions.isMemoryCacheable(), requestOptions.getUseUnlimitedSourceGeneratorsPool(), requestOptions.getUseAnimationPool(), requestOptions.getOnlyRetrieveFromCache(), <span class=\"keyword\">this</span>, callbackExecutor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"engine.load(-)\">Engine.load( )<a title=\"#engine.load(-)\" href=\"#engine.load(-)\"></a></h4>\n<blockquote>\n<p>到这里想都不用想了,Engine才是真正加载图片的Class,<br>\nEngine负责执行图片加载和管理活动资源和缓存资源。</p>\n</blockquote>\n<p>活动资源是指那些至少提供一个请求但未释放的资源。一旦资源的所有使用者都释放了该资源，该资源就会进入缓存。如果资源从缓存中返回给新的使用者，它将被重新添加到活动资源中。<br>\n如果从缓存中移除资源，它的资源将被回收和重用(如果可能的话)，资源将被丢弃。没有严格要求消费者释放他们的资源，所以活跃的资源被弱持有。</p>\n<p>请求流程:</p>\n<ul>\n<li>检查当前使用的资源集，返回活动资源（如果存在），并将任何新的非活动资源移动到内存缓存中</li>\n<li>检查内存缓存并提供缓存资源（如果存在）</li>\n<li>检查当前的一组正在进行的加载并将 cb 添加到进行中的加载（如果存在）</li>\n<li>开始加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;R&gt; <span class=\"function\">LoadStatus <span class=\"title\">load</span><span class=\"params\">(GlideContext glideContext, Object model, Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Class&lt;?&gt; resourceClass, Class&lt;R&gt; transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations, <span class=\"keyword\">boolean</span> isTransformationRequired, <span class=\"keyword\">boolean</span> isScaleOnlyOrNoTransform, Options options, <span class=\"keyword\">boolean</span> isMemoryCacheable, <span class=\"keyword\">boolean</span> useUnlimitedSourceExecutorPool, <span class=\"keyword\">boolean</span> useAnimationPool, <span class=\"keyword\">boolean</span> onlyRetrieveFromCache, ResourceCallback cb, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class=\"number\">0</span>;</span><br><span class=\"line\">  EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,resourceClass, transcodeClass, options);</span><br><span class=\"line\">  EngineResource&lt;?&gt; memoryResource;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有缓存,有则直接加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memoryResource == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> waitForExistingOrStartNewJob(glideContext, model, signature, width, height, resourceClass, transcodeClass, priority, diskCacheStrategy, transformations, isTransformationRequired, isScaleOnlyOrNoTransform, options, isMemoryCacheable, useUnlimitedSourceExecutorPool, useAnimationPool, onlyRetrieveFromCache, cb, callbackExecutor, key, startTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 避免在保持Engine锁时回调，因为这样做会更容易死锁</span></span><br><span class=\"line\">  cb.onResourceReady(memoryResource, DataSource.MEMORY_CACHE, <span class=\"comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"keyword\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"engine.waitforexistingorstartnewjob(-)\">Engine.waitForExistingOrStartNewJob( )<a title=\"#engine.waitforexistingorstartnewjob(-)\" href=\"#engine.waitforexistingorstartnewjob(-)\"></a></h4>\n<blockquote>\n<p>等待或者执行任务</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;R&gt; <span class=\"function\">LoadStatus <span class=\"title\">waitForExistingOrStartNewJob</span><span class=\"params\">(GlideContext glideContext, Object model, Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Class&lt;?&gt; resourceClass, Class&lt;R&gt; transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations, <span class=\"keyword\">boolean</span> isTransformationRequired, <span class=\"keyword\">boolean</span> isScaleOnlyOrNoTransform, Options options, <span class=\"keyword\">boolean</span> isMemoryCacheable, <span class=\"keyword\">boolean</span> useUnlimitedSourceExecutorPool, <span class=\"keyword\">boolean</span> useAnimationPool, <span class=\"keyword\">boolean</span> onlyRetrieveFromCache, ResourceCallback cb, Executor callbackExecutor, EngineKey key, <span class=\"keyword\">long</span> startTime)</span> </span>&#123;</span><br><span class=\"line\">  EngineJob&lt;?&gt; current = jobs.get(key, onlyRetrieveFromCache);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    current.addCallback(cb, callbackExecutor);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, current);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  EngineJob&lt;R&gt; engineJob = engineJobFactory.build(key, isMemoryCacheable, useUnlimitedSourceExecutorPool, useAnimationPool, onlyRetrieveFromCache);</span><br><span class=\"line\">  DecodeJob&lt;R&gt; decodeJob = decodeJobFactory.build(glideContext, model, key, signature, width, height, resourceClass, transcodeClass, priority, diskCacheStrategy, transformations, isTransformationRequired, isScaleOnlyOrNoTransform, onlyRetrieveFromCache, options, engineJob);</span><br><span class=\"line\">  jobs.put(key, engineJob);</span><br><span class=\"line\">  engineJob.addCallback(cb, callbackExecutor);</span><br><span class=\"line\">  engineJob.start(decodeJob);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (VERBOSE_IS_LOGGABLE)  logWithTimeAndKey(<span class=\"string\">&quot;Started new load&quot;</span>, startTime, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, engineJob);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"decodejob\">DecodeJob<a title=\"#decodejob\" href=\"#decodejob\"></a></h4>\n<blockquote>\n<p>负责从缓存数据或原始源中解码资源并应用转换和转码的类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCancelled) &#123;</span><br><span class=\"line\">      notifyFailed();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runWrapped();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runWrapped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为了判断运行原因,这里做了三个判断</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (runReason) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INITIALIZE:</span><br><span class=\"line\">      <span class=\"comment\">// 获取当前解码数据的阶段</span></span><br><span class=\"line\">      stage = getNextStage(Stage.INITIALIZE);</span><br><span class=\"line\">      <span class=\"comment\">// 获取数据生成器</span></span><br><span class=\"line\">      currentGenerator = getNextGenerator();</span><br><span class=\"line\">      runGenerators();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SWITCH_TO_SOURCE_SERVICE:</span><br><span class=\"line\">      runGenerators();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DECODE_DATA:</span><br><span class=\"line\">      decodeFromRetrievedData();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Unrecognized run reason: &quot;</span> + runReason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"rungenerators(-)\">runGenerators( )<a title=\"#rungenerators(-)\" href=\"#rungenerators(-)\"></a></h5>\n<p>currentGenerator实现DataFetcherGenerator接口，这个接口主要用来生成一系列的modelLoader和model</p>\n<p>目前Glide有三种类生成器</p>\n<ul>\n<li>ResourceCacheGenerator</li>\n<li>DataCacheGenerator</li>\n<li>SourceGenerator</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runGenerators</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  currentThread = Thread.currentThread();</span><br><span class=\"line\">  startFetchTime = LogTime.getLogTime();</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> isStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// startNext -&gt; 尝试单个新的DataFetcher，如果DataFetcher已启动则返回true，否则返回false</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!isCancelled &amp;&amp; currentGenerator != <span class=\"keyword\">null</span> &amp;&amp; !(isStarted = currentGenerator.startNext())) &#123;</span><br><span class=\"line\">    stage = getNextStage(stage);</span><br><span class=\"line\">    currentGenerator = getNextGenerator();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stage == Stage.SOURCE) &#123;</span><br><span class=\"line\">      reschedule();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We&#x27;ve run out of stages and generators, give up.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((stage == Stage.FINISHED || isCancelled) &amp;&amp; !isStarted) &#123;</span><br><span class=\"line\">    notifyFailed();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> DataFetcherGenerator <span class=\"title\">getNextGenerator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (stage) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> RESOURCE_CACHE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResourceCacheGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DATA_CACHE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataCacheGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SOURCE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SourceGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FINISHED:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Unrecognized stage: &quot;</span> + stage);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"sourcegenerator.startnext()\">SourceGenerator.startNext()<a title=\"#sourcegenerator.startnext()\" href=\"#sourcegenerator.startnext()\"></a></h6>\n<p>将首先判断，缓存如果它不是空的，调用 cacheData; 否则，获取 loadData，然后执行 startNextLoad ()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dataToCache != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    Object data = dataToCache;</span><br><span class=\"line\">    dataToCache = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> isDataInCache = cacheData(data);</span><br><span class=\"line\">      <span class=\"comment\">// 如果我们没有将数据写入缓存，cacheData方法将尝试直接解码原始数据，而不是通过磁盘缓存。因为此时cacheData已经调用了我们的回调函数，所以除了返回，没有其他事情可做了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isDataInCache) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果我们能够成功地将数据写入缓存，那么现在需要继续调用下面的sourceCacheGenerator来从缓存加载数据</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// IOException意味着我们无法将数据写入缓存，或者在磁盘缓存写入失败后无法倒带数据。无论哪种情况，我们都可以继续尝试下面的下一个取回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;Failed to properly rewind or write data to cache&quot;</span>, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sourceCacheGenerator != <span class=\"keyword\">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sourceCacheGenerator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadData = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> started = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class=\"line\">    loadData = helper.getLoadData().get(loadDataListIndex++);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadData != <span class=\"keyword\">null</span></span><br><span class=\"line\">        &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</span><br><span class=\"line\">            || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</span><br><span class=\"line\">      started = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      startNextLoad(loadData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> started;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"sourcegenerator.cachedata\">SourceGenerator.cacheData<a title=\"#sourcegenerator.cachedata\" href=\"#sourcegenerator.cachedata\"></a></h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果我们能够缓存数据，应该尝试直接从缓存解码数据，如果我们不能缓存数据，应该尝试从源解码，则返回false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cacheData</span><span class=\"params\">(Object dataToCache)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> isLoadingFromSourceData = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    DataRewinder&lt;Object&gt; rewinder = helper.getRewinder(dataToCache);</span><br><span class=\"line\">    Object data = rewinder.rewindAndGet();</span><br><span class=\"line\">    Encoder&lt;Object&gt; encoder = helper.getSourceEncoder(data);</span><br><span class=\"line\">    DataCacheWriter&lt;Object&gt; writer = <span class=\"keyword\">new</span> DataCacheWriter&lt;&gt;(encoder, data, helper.getOptions());</span><br><span class=\"line\">    DataCacheKey newOriginalKey = <span class=\"keyword\">new</span> DataCacheKey(loadData.sourceKey, helper.getSignature());</span><br><span class=\"line\">    DiskCache diskCache = helper.getDiskCache();</span><br><span class=\"line\">    diskCache.put(newOriginalKey, writer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCache.get(newOriginalKey) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      originalKey = newOriginalKey;</span><br><span class=\"line\">      sourceCacheGenerator = <span class=\"keyword\">new</span> DataCacheGenerator(Collections.singletonList(loadData.sourceKey), helper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 我们能够将数据写入缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      isLoadingFromSourceData = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      cb.onDataFetcherReady(loadData.sourceKey, rewinder.rewindAndGet(), loadData.fetcher, loadData.fetcher.getDataSource(), loadData.sourceKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写入数据到缓存失败的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isLoadingFromSourceData) &#123;</span><br><span class=\"line\">      loadData.fetcher.cleanup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"decodehelper.getsourceencoder()\">DecodeHelper.getSourceEncoder()<a title=\"#decodehelper.getsourceencoder()\" href=\"#decodehelper.getsourceencoder()\"></a></h6>\n<p>DecodeHelper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;X&gt; <span class=\"function\">Encoder&lt;X&gt; <span class=\"title\">getSourceEncoder</span><span class=\"params\">(X data)</span> <span class=\"keyword\">throws</span> Registry.NoSourceEncoderAvailableException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> glideContext.getRegistry().getSourceEncoder(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Registry.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;X&gt; <span class=\"function\">Encoder&lt;X&gt; <span class=\"title\">getSourceEncoder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> X data)</span> <span class=\"keyword\">throws</span> NoSourceEncoderAvailableException </span>&#123;  </span><br><span class=\"line\">  Encoder&lt;X&gt; encoder = encoderRegistry.getEncoder((Class&lt;X&gt;) data.getClass());  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(encoder != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> encoder;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSourceEncoderAvailableException(data.getClass());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"register\">Register<a title=\"#register\" href=\"#register\"></a></h6>\n<blockquote>\n<p>每个数据类型对应一个编码器,Register就是用来记录这些的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry</span><br><span class=\"line\">        .append(ByteBuffer.class, <span class=\"keyword\">new</span> ByteBufferEncoder())</span><br><span class=\"line\">        .append(InputStream.class, <span class=\"keyword\">new</span> StreamEncoder(arrayPool))</span><br><span class=\"line\">        .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class, byteBufferBitmapDecoder)</span><br><span class=\"line\">        .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class, streamBitmapDecoder);</span><br></pre></td></tr></table></figure>\n<h5 id=\"decodefromretrieveddata()\">decodeFromRetrievedData()<a title=\"#decodefromretrieveddata()\" href=\"#decodefromretrieveddata()\"></a></h5>\n<blockquote>\n<p>处理返回的数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oU7rD.png\" alt=\"5oU7rD.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;Data&gt; <span class=\"function\">Resource&lt;R&gt; <span class=\"title\">decodeFromData</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DataFetcher&lt;?&gt; fetcher, Data data, DataSource dataSource)</span> <span class=\"keyword\">throws</span> GlideException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</span><br><span class=\"line\">    Resource&lt;R&gt; result = decodeFromFetcher(data, dataSource);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class=\"line\">      logWithTimeAndKey(<span class=\"string\">&quot;Decoded result &quot;</span> + result, startTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    fetcher.cleanup();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;Data&gt; <span class=\"function\">Resource&lt;R&gt; <span class=\"title\">decodeFromFetcher</span><span class=\"params\">(Data data, DataSource dataSource)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> GlideException </span>&#123;</span><br><span class=\"line\">  LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> runLoadPath(data, dataSource, path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"enginejob\">EngineJob<a title=\"#enginejob\" href=\"#enginejob\"></a></h4>\n<blockquote>\n<p>通过添加和删除加载回调并在加载完成时通知回调来管理加载的类(管理加载过程中的一些回调)</p>\n</blockquote>\n<p>GlideExecutor是一个继承的Executorservice类，它显然是一个线程池。这里通过decodeJob来确定是否从缓存解析，如果是从缓存解析，调用diskCacheExecutor，否则，调用getActiveSourceExecutor</p>\n<ul>\n<li>willDecodeFromCache\n<ul>\n<li>如果此作业将尝试从磁盘缓存解码资源，则返回true</li>\n<li>如果始终从源解码，则返回false</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.decodeJob = decodeJob;</span><br><span class=\"line\">  GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : getActiveSourceExecutor();</span><br><span class=\"line\">  <span class=\"comment\">// 执行decodeJob线程任务</span></span><br><span class=\"line\">  executor.execute(decodeJob);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "http://onion66.gitee.io/blog/2021/11/01/4SVquTFcR8Wyv4GV/",
            "url": "http://onion66.gitee.io/blog/2021/11/01/4SVquTFcR8Wyv4GV/",
            "title": "源码学习 - OkHttp",
            "date_published": "2021-10-31T21:28:18.000Z",
            "content_html": "<blockquote>\n<p>http的连接本质上是个socket，根据http协议，通过socket包装发送请求并获得返回结果</p>\n</blockquote>\n<p>网路连接库一开始的样子如下代码所示，其实只要符合Http协议的请求，就可以和网络进行交互，类似于OkHttp的网络请求库，帮助开发者方便和屏蔽了Http协议中类似于请求头，重连、合并、代理、返回结果解析等等Http协议细节的应用层实现。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val path = <span class=\"string\">&quot;http://www.baidu.com/&quot;</span></span><br><span class=\"line\">        val host = <span class=\"string\">&quot;www.baidu.com&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> socket: Socket? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> streamWriter: OutputStreamWriter? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bufferedWriter: BufferedWriter? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socket = Socket(host, <span class=\"number\">80</span>)</span><br><span class=\"line\">            streamWriter = OutputStreamWriter(socket.getOutputStream())</span><br><span class=\"line\">            bufferedWriter = BufferedWriter(streamWriter)</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">&quot;GET $path HTTP/1.1\\r\\n&quot;</span>)</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">&quot;Host: www.baidu.com\\r\\n&quot;</span>)</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">&quot;\\r\\n&quot;</span>)</span><br><span class=\"line\">            bufferedWriter.flush()</span><br><span class=\"line\">            val myRequest = BufferedReader(InputStreamReader(socket.getInputStream(), <span class=\"string\">&quot;UTF-8&quot;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">var</span> d = -<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (myRequest.read().also(&#123; d = it &#125;) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                print(d.toChar())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整体流程\">整体流程<a title=\"#整体流程\" href=\"#整体流程\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetExample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 核网络管理者 - 核心类</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">run</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 请求搭建</span></span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder().url(url).build();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      阻塞式execute -&gt; 立即调用请求，并阻塞，直到响应可以处理或出现错误</span></span><br><span class=\"line\"><span class=\"comment\">      为了避免资源泄漏，调用者应该关闭Response，而Response又会关闭底层的ResponseBody。 //确保响应(和底层响应体)是关闭的</span></span><br><span class=\"line\"><span class=\"comment\">      注意，传输层的成功(接收HTTP响应代码、报头和正文)不一定表示应用层的成功:响应可能仍然表示不满意的HTTP响应代码，如404或500。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> response.body().string();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    GetExample example = <span class=\"keyword\">new</span> GetExample();</span><br><span class=\"line\">    String response = example.run(<span class=\"string\">&quot;https://raw.github.com/square/okhttp/master/README.md&quot;</span>);</span><br><span class=\"line\">    System.out.println(response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hiy4O.png\" alt=\"5hiy4O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"连接建立\">连接建立<a title=\"#连接建立\" href=\"#连接建立\"></a></h3>\n<p>Volley等很多网络请求框架很多底层都是通过 HTTPURLConnection 来与服务端建立连接的，而 OkHttp 就比较优秀了。因为 HTTP 协议是建立在 TCP/IP 协议基础之上的，底层还是走的 Socket，所以OkHttp 直接使用 Socket 来完成 HTTP 请求。</p>\n<h3 id=\"okhttpclient\">OkHttpClient<a title=\"#okhttpclient\" href=\"#okhttpclient\"></a></h3>\n<p>官方推荐我们使用单例去创建OkHttpClient，重用所有HTTP调用的时候，性能是最佳的， 这是因为每个客户端都拥有自己的连接池和线程池。 重用连接和线程可减少延迟并节省内存。 相反，为每个请求创建一个客户端会浪费空闲池上的资源</p>\n<h3 id=\"request\">Request<a title=\"#request\" href=\"#request\"></a></h3>\n<p>采用Builder的方式进行设计，主要包含了url、method、headers、body和CacheControl组成的各种配置项</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Dispatcher dispatcher;  <span class=\"comment\">//分发器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Proxy proxy;  <span class=\"comment\">//代理</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;Protocol&gt; protocols; <span class=\"comment\">//协议</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;ConnectionSpec&gt; connectionSpecs; <span class=\"comment\">//传输层版本和连接协议</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;Interceptor&gt; interceptors; <span class=\"comment\">//拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;Interceptor&gt; networkInterceptors; <span class=\"comment\">//网络拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ProxySelector proxySelector; <span class=\"comment\">//代理选择</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> CookieJar cookieJar; <span class=\"comment\">//cookie</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Cache cache; <span class=\"comment\">//缓存</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> InternalCache internalCache;  <span class=\"comment\">//内部缓存</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> SocketFactory socketFactory;  <span class=\"comment\">//socket 工厂</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> SSLSocketFactory sslSocketFactory; <span class=\"comment\">//安全套接层socket 工厂，用于HTTPS</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> CertificateChainCleaner certificateChainCleaner; <span class=\"comment\">// 验证确认响应证书 适用 HTTPS 请求连接的主机名。</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HostnameVerifier hostnameVerifier;    <span class=\"comment\">//  主机名字确认</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> CertificatePinner certificatePinner;  <span class=\"comment\">//  证书链</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Authenticator proxyAuthenticator;     <span class=\"comment\">//代理身份验证</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Authenticator authenticator;      <span class=\"comment\">// 本地身份验证</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ConnectionPool connectionPool;    <span class=\"comment\">//连接池,复用连接</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Dns dns;  <span class=\"comment\">//域名</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> followSslRedirects;  <span class=\"comment\">//安全套接层重定向</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> followRedirects;  <span class=\"comment\">//本地重定向</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> retryOnConnectionFailure; <span class=\"comment\">//重试连接失败</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> connectTimeout;    <span class=\"comment\">//连接超时</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> readTimeout; <span class=\"comment\">//read 超时</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> writeTimeout; <span class=\"comment\">//write 超时 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"call\">Call<a title=\"#call\" href=\"#call\"></a></h3>\n<blockquote>\n<p>一个提供 HTTP 请求执行相关接口的接口类，具体的实现类是 RealCall</p>\n</blockquote>\n<ul>\n<li>可以取消</li>\n<li>此对象表示单个请求/响应对(流),因此不能执行两次</li>\n</ul>\n<h4 id=\"realcall\">RealCall<a title=\"#realcall\" href=\"#realcall\"></a></h4>\n<blockquote>\n<p>OkHttp的应用层和网络层之间的桥梁,包含了网络的连接、请求、响应和流处理整个流程,也是OkHttp中最关键核心的类</p>\n</blockquote>\n<h5 id=\"asynctimeout\">AsyncTimeout<a title=\"#asynctimeout\" href=\"#asynctimeout\"></a></h5>\n<p>此超时用在在后台线程执行超时时执行操作。 使用它来实现本地不支持的超时，例如写入时被阻止的套接字,子类应该覆盖timedOut以在发生超时时采取行动。 此方法将由共享看门狗线程调用，因此不应执行任何长时间运行的操作。 否则，我们可能会面临触发其他超时的风险。<br>\n使用sink和source将此超时应用于流。 返回的值将超时应用于包装流上的每个操作。<br>\n调用者应该在执行可能超时的工作之前调用enter ，然后退出。 exit的返回值表示是否触发了超时。 请注意，对timedOut的调用是异步的，可以在exit之后调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> val timeout = object : AsyncTimeout() &#123;  </span><br><span class=\"line\">  <span class=\"function\">override fun <span class=\"title\">timedOut</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 取消请求  </span></span><br><span class=\"line\">  cancel()  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;.apply &#123;  </span><br><span class=\"line\">  timeout(client.callTimeoutMillis.toLong(), MILLISECONDS)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"execute\">execute<a title=\"#execute\" href=\"#execute\"></a></h5>\n<blockquote>\n<p>同步请求,  马上执行并阻塞直到可以处理响应或出现错误</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>: Response &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Atomic就是原子性的意思，源码里用了Volatile属性，即能够保证在高并发的情况下只有一个线程能够访问这个属性值</span></span><br><span class=\"line\"><span class=\"comment\">   * executed 是一个原子变量，一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求,用 compareAndSet(false, true)</span></span><br><span class=\"line\"><span class=\"comment\">   * 判断多线程状态下，请求是否重新执行：如果值为false，则抛出一个IllegalStateException，并返回调用lazyMessage的结果。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  check(executed.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123; <span class=\"string\">&quot;Already Executed&quot;</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 超时计数开始</span></span><br><span class=\"line\">  timeout.enter()</span><br><span class=\"line\">  <span class=\"comment\">// 执行请求前处理 -&gt; 栈跟踪，事件回调等等</span></span><br><span class=\"line\">  callStart()</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调度器开始执行</span></span><br><span class=\"line\">    client.dispatcher.executed(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 返回拦截器处理下的响应</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getResponseWithInterceptorChain()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调度器返回完成信号</span></span><br><span class=\"line\">    client.dispatcher.finished(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"enqueue\">enqueue<a title=\"#enqueue\" href=\"#enqueue\"></a></h5>\n<blockquote>\n<p>异步调度,  将请求放到队列中等到执行</p>\n</blockquote>\n<p>RealCall.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">enqueue</span><span class=\"params\">(responseCallback: <span class=\"type\">Callback</span>)</span></span> &#123;  </span><br><span class=\"line\">  <span class=\"comment\">// 首先判断当前请求是否已执行，如果已经执行则打印日志，并抛出 IllegalStateException 异常</span></span><br><span class=\"line\">  check(executed.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123; <span class=\"string\">&quot;Already Executed&quot;</span> &#125;  </span><br><span class=\"line\">  callStart()  </span><br><span class=\"line\">  <span class=\"comment\">// 创建一个AsyncCall对象,放进分发器队列中</span></span><br><span class=\"line\">  client.dispatcher.enqueue(AsyncCall(responseCallback))  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">callStart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个对象，该对象包含在执行此方法时创建的堆栈跟踪</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callStackTrace = Platform.<span class=\"keyword\">get</span>().getStackTraceForCloseable(<span class=\"string\">&quot;response.body().close()&quot;</span>)</span><br><span class=\"line\">    eventListener.callStart(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Dispatcher.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// https://zhuanlan.zhihu.com/p/261397170</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque -  Java 集合中双端队列的数组实现</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque 几乎没有容量限制，设计为线程不安全的，禁止 null 元素</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque是Deque的实现类，可以作为栈来使用，效率高于Stack；也可以作为队列来使用，效率高于LinkedList。</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque 大多数的额操作都在固定时间内运行，例外情况包括 remove，removeFirstOccurrence，removeLastOccurrence，contains，iterator.remove()，和批量操作，这些将以线性时间运行</span></span><br><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> runningSyncCalls = ArrayDeque&lt;RealCall&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">enqueue</span><span class=\"params\">(call: <span class=\"type\">AsyncCall</span>)</span></span> &#123;</span><br><span class=\"line\">  synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将请求 AsyncCall 添加到待执行队列</span></span><br><span class=\"line\">    readyAsyncCalls.add(call)</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前请求是否已存在可复用的 hos</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!call.call.forWebSocket) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> existingCall = findExistingCallWithHost(call.host)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (existingCall != <span class=\"literal\">null</span>) call.reuseCallsPerHostFrom(existingCall)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将符合条件的Call从readyAsyncCalls 提升到runningAsyncCalls并在执行它们</span></span><br><span class=\"line\">  promoteAndExecute()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RealCall.AsyncCall</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给当前AsyncCall异步线程设置名称</span></span><br><span class=\"line\">    threadName(<span class=\"string\">&quot;OkHttp <span class=\"subst\">$&#123;redactedUrl()&#125;</span>&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> signalledCallback = <span class=\"literal\">false</span></span><br><span class=\"line\">      timeout.enter()</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求结果</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> response = getResponseWithInterceptorChain()</span><br><span class=\"line\">        signalledCallback = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">// 触发相应回调</span></span><br><span class=\"line\">        responseCallback.onResponse(<span class=\"keyword\">this</span><span class=\"symbol\">@RealCall</span>, response)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (signalledCallback) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Do not signal the callback twice!</span></span><br><span class=\"line\">          Platform.<span class=\"keyword\">get</span>().log(<span class=\"string\">&quot;Callback failure for <span class=\"subst\">$&#123;toLoggableString()&#125;</span>&quot;</span>, Platform.INFO, e)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          responseCallback.onFailure(<span class=\"keyword\">this</span><span class=\"symbol\">@RealCall</span>, e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (t: Throwable) &#123;</span><br><span class=\"line\">        cancel()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!signalledCallback) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">val</span> canceledException = IOException(<span class=\"string\">&quot;canceled due to <span class=\"variable\">$t</span>&quot;</span>)</span><br><span class=\"line\">          canceledException.addSuppressed(t)</span><br><span class=\"line\">          responseCallback.onFailure(<span class=\"keyword\">this</span><span class=\"symbol\">@RealCall</span>, canceledException)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> t</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭请求</span></span><br><span class=\"line\">        client.dispatcher.finished(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatcher(分发器)\">Dispatcher(分发器)<a title=\"#dispatcher(分发器)\" href=\"#dispatcher(分发器)\"></a></h3>\n<blockquote>\n<p>用于管理其对应 OkHttpClient 的所有请求,对Call进行统一的控制，例如结束所有请求、获取线程池等等</p>\n</blockquote>\n<ul>\n<li>readyAsyncCalls：一个新的异步请求首先会被加入该队列中</li>\n<li>runningAsyncCalls：当前正在运行中的异步请求</li>\n<li>runningSyncCalls：当前正在运行的同步请求</li>\n</ul>\n<p>异步请求跟同步请求一样,最终都会调用到<code>getResponseWithInterceptorChain()</code></p>\n<h3 id=\"interceptor(拦截器)\">Interceptor(拦截器)<a title=\"#interceptor(拦截器)\" href=\"#interceptor(拦截器)\"></a></h3>\n<blockquote>\n<p>Interceptor 接口作为一个拦截器的抽象概念，被设计为责任链上的单位节点，用于观察、拦截、处理请求等，例如添加 Header、重定向、数据处理等等。<br>\nInterceptor 之间互相独立，每个 Interceptor 只负责自己关注的任务，不与其他 Interceptor 接触。</p>\n</blockquote>\n<p>RealCall.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Throws(IOException::class)</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getResponseWithInterceptorChain</span><span class=\"params\">()</span></span>: Response &#123;</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 2021/8/13 okhttp的核心是拦截器，而拦截器所采用的设计模式是责任链设计，即每个拦截器只处理与自己相关的业务逻辑 https://zhuanlan.zhihu.com/p/340090732</span></span><br><span class=\"line\">  <span class=\"comment\">// 构建整个网络请求拦截</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> interceptors = mutableListOf&lt;Interceptor&gt;()</span><br><span class=\"line\">  <span class=\"comment\">// 添加Client的拦截器</span></span><br><span class=\"line\">  interceptors += client.interceptors</span><br><span class=\"line\">  <span class=\"comment\">// 添加失败重连的拦截器</span></span><br><span class=\"line\">  interceptors += RetryAndFollowUpInterceptor(client)</span><br><span class=\"line\">  <span class=\"comment\">// 添加请求桥梁拦截器 - 在对用户的请求头部加了一些信息，然后在获取到的响应中也做了一些处理。而这些处理对用户是透明的，减少了客户请求的工作</span></span><br><span class=\"line\">  interceptors += BridgeInterceptor(client.cookieJar)</span><br><span class=\"line\">  <span class=\"comment\">// 添加缓存拦截器 - 理来自缓存的请求并将响应写入缓存。</span></span><br><span class=\"line\">  interceptors += CacheInterceptor(client.cache)</span><br><span class=\"line\">  <span class=\"comment\">// 添加请求中拦截器 - 打开与目标服务器的连接并继续下一个拦截器。 网络可能用于返回的响应，或使用条件 GET 验证缓存的响应</span></span><br><span class=\"line\">  interceptors += ConnectInterceptor</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!forWebSocket) &#123;</span><br><span class=\"line\">    interceptors += client.networkInterceptors</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这是链中的最后一个拦截器。 它对服务器进行网络调用,真正的网络请求从这里开始</span></span><br><span class=\"line\">  interceptors += CallServerInterceptor(forWebSocket)</span><br><span class=\"line\">  <span class=\"comment\">// 构建网络请求链 - 一个具体的拦截器链，承载着整个拦截器链：所有应用程序拦截器、OkHttp核心、所有网络拦截器，最后是网络调用者。</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> chain = RealInterceptorChain(</span><br><span class=\"line\">      call = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">      interceptors = interceptors,</span><br><span class=\"line\">      index = <span class=\"number\">0</span>,</span><br><span class=\"line\">      exchange = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      request = originalRequest,</span><br><span class=\"line\">      connectTimeoutMillis = client.connectTimeoutMillis,</span><br><span class=\"line\">      readTimeoutMillis = client.readTimeoutMillis,</span><br><span class=\"line\">      writeTimeoutMillis = client.writeTimeoutMillis</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> calledNoMoreExchanges = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> response = chain.proceed(originalRequest)</span><br><span class=\"line\">    <span class=\"comment\">// 是否取消请求</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCanceled()) &#123;</span><br><span class=\"line\">      response.closeQuietly()</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> IOException(<span class=\"string\">&quot;Canceled&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">    calledNoMoreExchanges = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> noMoreExchanges(e) <span class=\"keyword\">as</span> Throwable</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!calledNoMoreExchanges) &#123;</span><br><span class=\"line\">      noMoreExchanges(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RealInterceptorChain.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Throws(IOException::class)</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">proceed</span><span class=\"params\">(request: <span class=\"type\">Request</span>)</span></span>: Response &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断拦截器是否为空</span></span><br><span class=\"line\">  check(index &lt; interceptors.size)</span><br><span class=\"line\">  <span class=\"comment\">// 请求数加1</span></span><br><span class=\"line\">  calls++</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exchange != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    check(exchange.finder.sameHostAndPort(request.url)) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;network interceptor <span class=\"subst\">$&#123;interceptors[index - <span class=\"number\">1</span>]&#125;</span> must retain the same host and port&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    check(calls == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;network interceptor <span class=\"subst\">$&#123;interceptors[index - <span class=\"number\">1</span>]&#125;</span> must call proceed() exactly once&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Call the next interceptor in the chain. 调用链中的下一个拦截器</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> next = copy(index = index + <span class=\"number\">1</span>, request = request)</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前的拦截器</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> interceptor = interceptors[index]</span><br><span class=\"line\">  <span class=\"comment\">// 开始一个个的执行每一个拦截器，每个拦截器的intercept都会调到 当前类的proceed ，直至最后一个CallServerInterceptor执行完</span></span><br><span class=\"line\">  <span class=\"meta\">@Suppress(<span class=\"meta-string\">&quot;USELESS_ELVIS&quot;</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> response = interceptor.intercept(next) ?: <span class=\"keyword\">throw</span> NullPointerException(<span class=\"string\">&quot;interceptor <span class=\"variable\">$interceptor</span> returned null&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exchange != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    check(index + <span class=\"number\">1</span> &gt;= interceptors.size || next.calls == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;network interceptor <span class=\"variable\">$interceptor</span> must call proceed() exactly once&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  check(response.body != <span class=\"literal\">null</span>) &#123; <span class=\"string\">&quot;interceptor <span class=\"variable\">$interceptor</span> returned a response with no body&quot;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"chain\">Chain<a title=\"#chain\" href=\"#chain\"></a></h4>\n<blockquote>\n<p>Interceptor 与 Chain 彼此互相依赖，互相调用，共同发展，形成了一个完美的调用链</p>\n</blockquote>\n<p>Chain 被用来描述责任链，通过其中的 process 方法开始依次执行链上的每个节点，并返回处理后的 Response。<br>\nChain 的唯一实现为 RealInterceptorChain（下文简称 RIC），RIC 可以称之为<strong>拦截器责任链</strong>，其中的节点由 RealCall 中添加进来的 Interceptor 们组成。由于 Interceptor 的互相独立性，RIC 中还会包含一些公共参数及共享的对象。</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hbpJx.png\" alt=\"5hbpJx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"about\">About<a title=\"#about\" href=\"#about\"></a></h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/116777864\" target=\"_blank\">OkHttp源码深度解析</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/104813091\" target=\"_blank\">OkHttp源码解析</a><br>\n<a href=\"https://juejin.cn/post/7020027832977850381\" target=\"_blank\">OkHttp源码原理</a></p>\n",
            "tags": [
                "源码解析"
            ]
        }
    ]
}