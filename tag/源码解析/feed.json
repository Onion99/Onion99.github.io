{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stay hungry , Stay foolish • All posts by \"源码解析\" tag",
    "description": "巴拉巴拉",
    "home_page_url": "https://onion99.github.io",
    "items": [
        {
            "id": "https://onion99.github.io/2021/11/29/9S5c1rplpdSAbIxR/",
            "url": "https://onion99.github.io/2021/11/29/9S5c1rplpdSAbIxR/",
            "title": "源码学习-ViewModel",
            "date_published": "2021-11-29T15:30:53.000Z",
            "content_html": "<p>首先看看 ViewModel 是怎么样实例化</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getFragmentScopeViewModel</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">::</span>fragmentProvider<span class=\"token punctuation\">.</span>isInitialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        fragmentProvider <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> fragmentProvider<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getActivityScopeViewModel</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">::</span>activityProvider<span class=\"token punctuation\">.</span>isInitialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        activityProvider <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token function\">requireActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> activityProvider<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我超，原来是通过一个 ViewModelProvider 去 get 到的，他妈的这是干什么的呢，为什么要通过 ViewModelProvider 获取呢<br>\n<img src=\"http://img.doutula.com/production/uploads/image/2019/06/06/20190606755268_TSvBec.jpg\" alt=\"\"><br>\n我怎么知道，瞧瞧官方正儿八经的回答吧<br>\n <code>ViewModel</code> : 旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存<br>\n <code>ViewModelProvider</code> : ViewModel 的辅助程序类，该类负责为界面准备数据。在配置更改期间会自动保留 ViewModel 对象，以便它们存储的数据立即可供下一个 activity 或 fragment 实例使用</p>\n<span id=\"more\"></span>\n<p>好家伙，原来是这对组合，以生命周期的方式耶，看看有什么不同</p>\n<h3 id=\"activty与viewmodel的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#activty与viewmodel的生命周期\">#</a> Activty 与 ViewModel 的生命周期</h3>\n<blockquote>\n<p>牛逼，战斗直至 Finish</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8L0jU.png\" alt=\"I8L0jU.png\"></p>\n<p>官方说：ViewModel 对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的 Lifecycle。ViewModel 将一直留在内存中，直到限定其存在时间范围的 Lifecycle 永久消失：<br>\n对于 activity，是在 activity 完成时；<br>\n而对于 fragment，是在 fragment 分离时</p>\n<p>好了，来看看 ViewModelProvider 是怎样实现构造的</p>\n<h3 id=\"viewmodelprovider\"><a class=\"markdownIt-Anchor\" href=\"#viewmodelprovider\">#</a> ViewModelProvider()</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ViewModelStoreOwner</span> owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 尼玛的，偷偷调用另一构造函数</span>\n        <span class=\"token comment\">// 1. 创建用来存储 ViewModel 的 ViewModelStore, 2. 创建用于实例化新 ViewModel 的 Factory</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">getViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> owner <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HasDefaultViewModelProviderFactory</span>\n                <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HasDefaultViewModelProviderFactory</span><span class=\"token punctuation\">)</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultViewModelProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token class-name\">NewInstanceFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"viewmodelstore\"><a class=\"markdownIt-Anchor\" href=\"#viewmodelstore\">#</a> ViewModelStore</h4>\n<p>这个是接口何许玩意，原来到后面 Activity,Fragment 等都实现了这个接口，以来获取跟当前生命周期相关的 ViewModelStore, 看到没有，有图有真相<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/I8xIk4.png\" alt=\"I8xIk4.png\"><br>\n 看看 <code>ComponentActivity.getViewModelStore()</code> :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelStore</span> <span class=\"token function\">getViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your activity is not yet attached to the \"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"Application instance. You can't request ViewModel before onCreate call.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 叉，这里照我猜想肯定是实现 ViewModelStore 的单例</span>\n    <span class=\"token function\">ensureViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回与此 Activity 关联的 ViewModelStore</span>\n    <span class=\"token keyword\">return</span> mViewModelStore<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//```</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ensureViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mViewModelStore <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 检索先前由 onRetainNonConfigurationInstance () 返回的配置变更后的缓存配置</span>\n        <span class=\"token class-name\">NonConfigurationInstances</span> nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonConfigurationInstances</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getLastNonConfigurationInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果缓存配置不为空，则取缓存配置的 viewModelStore</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nc <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mViewModelStore <span class=\"token operator\">=</span> nc<span class=\"token punctuation\">.</span>viewModelStore<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 否则自己实例一个</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mViewModelStore <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mViewModelStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>嘿嘿，存储 ViewModel 的 ViewModelStore, 牛逼啊，用一个 HashMap 来缓存看到有木有:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewModelStore</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> mMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewModel</span> viewModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ViewModel</span> oldViewModel <span class=\"token operator\">=</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldViewModel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> oldViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ViewModel</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewModel</span> vm <span class=\"token operator\">:</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            vm<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        mMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IG8UgA.png\" alt=\"IG8UgA.png\"></p>\n<h4 id=\"viewmodelproviderfactory\"><a class=\"markdownIt-Anchor\" href=\"#viewmodelproviderfactory\">#</a> ViewModelProviderFactory</h4>\n<p>同样的后面 Activity,Fragment 等也实现了 HasDefaultViewModelProviderFactory 接口，实现自己创建 ViewModel 的 ViewModelProviderFactory, 来看图<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGEOT1.png\" alt=\"IGEOT1.png\"><br>\n 再来看看 <code>ComponentActivity.getViewModelStore()</code> :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelProvider<span class=\"token punctuation\">.</span>Factory</span> <span class=\"token function\">getDefaultViewModelProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your activity is not yet attached to the \"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"Application instance. You can't request ViewModel before onCreate call.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 妈的，就是这么简单，直接实例化</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDefaultFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mDefaultFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SavedStateViewModelFactory</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">getIntent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getIntent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExtras</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> mDefaultFactory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有点东西，这样就实例 <code>SavedStateViewModelFactory</code>  了，看看具体怎么 <code>get()</code>  霍</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 第一步：小 get</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> canonicalName <span class=\"token operator\">=</span> modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 好家伙，看到没有，如果这里判断是局部类或者匿名类，就直接给 crash 了，谷歌就是牛逼</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Local and anonymous classes can not be ViewModels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 嘿，继续 get 下去</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>DEFAULT_KEY <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> canonicalName<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 第二步：大 get</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ViewModel</span> viewModel <span class=\"token operator\">=</span> mViewModelStore<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 首先是判断是否有缓存</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OnRequeryFactory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnRequeryFactory</span><span class=\"token punctuation\">)</span> mFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onRequery</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> viewModel<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 然后如果为 null, 则通过具体工厂类去实例化 ViewModel</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">KeyedFactory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        viewModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyedFactory</span><span class=\"token punctuation\">)</span> mFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        viewModel <span class=\"token operator\">=</span> mFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 嘿嘿，放进缓存</span>\n    mViewModelStore<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> viewModel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token comment\">// ViewModel 的实例化</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span> isAndroidViewModel <span class=\"token operator\">=</span> <span class=\"token class-name\">AndroidViewModel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> constructor<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 通过反射，去找到当前 ViewModel 的构造函数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAndroidViewModel <span class=\"token operator\">&amp;&amp;</span> mApplication <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        constructor <span class=\"token operator\">=</span> <span class=\"token function\">findMatchingConstructor</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">,</span> ANDROID_VIEWMODEL_SIGNATURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        constructor <span class=\"token operator\">=</span> <span class=\"token function\">findMatchingConstructor</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">,</span> VIEWMODEL_SIGNATURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> mFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">SavedStateHandleController</span> controller <span class=\"token operator\">=</span> <span class=\"token class-name\">SavedStateHandleController</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n            mSavedStateRegistry<span class=\"token punctuation\">,</span> mLifecycle<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> mDefaultArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 嘿嘿，调用构造函数，实例化        </span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">T</span> viewmodel<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAndroidViewModel <span class=\"token operator\">&amp;&amp;</span> mApplication <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            viewmodel <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>mApplication<span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">getHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            viewmodel <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">getHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        viewmodel<span class=\"token punctuation\">.</span><span class=\"token function\">setTagIfAbsent</span><span class=\"token punctuation\">(</span>TAG_SAVED_STATE_HANDLE_CONTROLLER<span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> viewmodel<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to access \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A \"</span> <span class=\"token operator\">+</span> modelClass <span class=\"token operator\">+</span> <span class=\"token string\">\" cannot be instantiated.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An exception happened in constructor of \"</span>\n                <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"viewmodel的架构作用\"><a class=\"markdownIt-Anchor\" href=\"#viewmodel的架构作用\">#</a> ViewModel 的架构作用</h3>\n<p>向官方敬礼，懂不懂这张图的含金量，懂不懂 MMVM<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGd3ff.png\" alt=\"IGd3ff.png\"><br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGwfKg.png\" alt=\"IGwfKg.png\"></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/29/4diQitvVwGPnicN5/",
            "url": "https://onion99.github.io/2021/11/29/4diQitvVwGPnicN5/",
            "title": "源码学习-HashMap",
            "date_published": "2021-11-29T15:28:47.000Z",
            "content_html": "<blockquote>\n<p>Map 是什么，可以是一个键到值的 Object, 可以是一个键值对的集合，是函数抽象的数学模型</p>\n</blockquote>\n<p>似不似？</p>\n<p>HashMap 就是 Map 实现的佼佼者，它使用哈希表作为底层数据结构</p>\n<blockquote>\n<p>注意哦，作为性能的最上层，HashMap 是不考虑线程安全的，这是上层人的优越，多线程情况下，可以选用 <code>ConcurrentHashMap</code>  &gt;  <code>Collections.synchronizedMap(HashMap&lt;&gt;())</code></p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h3>\n<blockquote>\n<p>当 Node 数组的长度大于 8 时，会转变红黑树来存储</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 存储数据的 Node 数组，一枪秒了有木有，一看就是链表结构 </span>\n  <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/22/Iz66S0.png\" alt=\"Iz66S0.png\"></p>\n<h3 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h3>\n<h4 id=\"hashmap\"><a class=\"markdownIt-Anchor\" href=\"#hashmap\">#</a> HashMap()</h4>\n<blockquote>\n<p>初始化部分主要决定当前容量 (loadFactor), 以及存储的阀值 (loadFactor)</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 最大容量，当两个构造函数中任何一个带参数的函数隐式指定较大的值时使用。必须是 2 的幂 & lt;= 1&lt;&lt;30</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAXIMUM_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 默认扩容比例</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> DEFAULT_LOAD_FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">,</span> DEFAULT_LOAD_FACTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 针对煞笔的处理，不会真的有人给 0 吧</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity:\"</span> <span class=\"token operator\">+</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 当前最大容量    </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span> initialCapacity <span class=\"token operator\">=</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断扩容比例</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 决定下一次调整容量的大小 (临界值)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 返回给定目标容量的 2 次幂大小</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> MAXIMUM_CAPACITY <span class=\"token operator\">:</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用指定的初始容量和默认的加载因子来初始化 HashMap。这里应该注意的是，有时它不是您指定的初始容量。例如新 HashMap (20,0.8); 那么实际的初始容量是 32，因为 tablesize () 方法严格要求初始容量增加到 2 的幂，只能是 16、32、64、128</p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/29/hu0861X6Ltf32fYt/",
            "url": "https://onion99.github.io/2021/11/29/hu0861X6Ltf32fYt/",
            "title": "源码学习-DataBinding",
            "date_published": "2021-11-29T15:27:07.000Z",
            "content_html": "<h3 id=\"sameple\"><a class=\"markdownIt-Anchor\" href=\"#sameple\">#</a> Sameple</h3>\n<p>首先，我们来看看 DataBinding 使用:</p>\n<ol>\n<li>给 layout 文件套娃:</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FrameLayout</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.viewpager.widget.ViewPager</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/home_pager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>com.flyco.tablayout.SlidingTabLayout</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/home_tab<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FrameLayout</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>在 Fragment 或者 View 中获取 binding 对象</li>\n</ol>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">binding <span class=\"token operator\">=</span> DataBindingUtil<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>inflater<span class=\"token punctuation\">,</span>layoutRes<span class=\"token punctuation\">,</span>container<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>超，就是这么简单，来从 <code>inflate</code>  开始解析</p>\n<span id=\"more\"></span>\n<h3 id=\"databindingutilinflate梳理\"><a class=\"markdownIt-Anchor\" href=\"#databindingutilinflate梳理\">#</a> DataBindingUtil.inflate 梳理</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewDataBinding</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">LayoutInflater</span> inflater<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ViewGroup</span> parent<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">boolean</span> attachToParent<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">DataBindingComponent</span> bindingComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 检查康康是不是子 layout 附加到父 layout, 一般是 false, 因为如果为 ture 会导致子 layout 的 layoutparams 失效</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> useChildren <span class=\"token operator\">=</span> parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> attachToParent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 上面一般为 false, 那这里一般也是零蛋啊</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> startChildren <span class=\"token operator\">=</span> useChildren <span class=\"token operator\">?</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">getChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 解析 xml 生成 View, 放空大脑就是这样，深究的话，我只能甩一篇郭神的文章了:https://blog.csdn.net/guolin_blog/article/details/12921889</span>\n    <span class=\"token comment\">// 什么具体 inflate 是怎么样，不听不听王八念经</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutId<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> attachToParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 嘿嘿，这里开始 binding</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useChildren<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">bindToAddedViews</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> startChildren<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataBinderMapper</span> sMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataBinderMapperImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewDataBinding</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> bindingComponent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 不理了，这里就拿到 binding 了，可以直接引用 View 了，停止思考</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> sMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>问题来了，它是怎么取得我要的 DataBinding 对象且又是怎么实现 View 绑定的？</p>\n<ol>\n<li>好，来康康，这个 <code>DataBinderMapperImpl</code> , 这是编译阶段下 kapt 自动生成的:</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>databinding</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 好家伙，这里直接继承 MergedDataBinderMapper </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataBinderMapperImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MergedDataBinderMapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">DataBinderMapperImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 添加 kapt 下生成当前 Module 的 DataBinderMapperImpl</span>\n    <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span></span>DataBinderMapperImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 合并其他 Mapper 的 DataBindingMapper </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergedDataBinderMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mExistingMappers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 添加 Mapper, 如果已经存在则忽略</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBinderMapper</span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span><span class=\"token punctuation\">></span></span> mapperClass <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mExistingMappers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mapperClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mMappers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DataBinderMapper</span><span class=\"token punctuation\">></span></span> dependencies <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">collectDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBinderMapper</span> dependency <span class=\"token operator\">:</span> dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><code>MergedDataBinderMapper.getDataBinder</code> :</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewDataBinding</span> <span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> bindingComponent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 遍历之前添加的 mMappers    </span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBinderMapper</span> mapper <span class=\"token operator\">:</span> mMappers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 好了，这里获取对应的 Mapper 的 DataBinder, 超，想想之前添加了哪个 Mapper</span>\n        <span class=\"token comment\">// 没错，不正好对上 tmd 的上面 1 的 com.xxx.xxx.DataBinderMapperImpl ()</span>\n        <span class=\"token class-name\">ViewDataBinding</span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">loadFeatures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>让我们来康康 kapt 生成的 <code>com.xxx.xxx.DataBinderMapperImpl()</code>  到底有什么</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataBinderMapperImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//layout id 索引</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LAYOUT_FRAGMENTHOME <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SparseIntArray</span> INTERNAL_LAYOUT_ID_LOOKUP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparseIntArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n    INTERNAL_LAYOUT_ID_LOOKUP<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xmiles<span class=\"token punctuation\">.</span>callshow<span class=\"token punctuation\">.</span></span>R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>fragment_home<span class=\"token punctuation\">,</span> LAYOUT_FRAGMENTHOME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewDataBinding</span> <span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> component<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 拿到索引的 id</span>\n    <span class=\"token keyword\">int</span> localizedLayoutId <span class=\"token operator\">=</span> INTERNAL_LAYOUT_ID_LOOKUP<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>localizedLayoutId <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> tag <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 判断 tag</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view must have a tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 这里如果布局数量超 50, 为避免一个方法体过大，会额外新建另外一个函数去处理，这里为好展示，整个类我就删除了很多其他布局参数</span>\n      <span class=\"token keyword\">int</span> methodIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>localizedLayoutId <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 跟据对应 componet 生成对应的 ViewDetaBinding</span>\n      <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>methodIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">internalGetViewDataBinding0</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> localizedLayoutId<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">internalGetViewDataBinding1</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> localizedLayoutId<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// GetViewDataBinding</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ViewDataBinding</span> <span class=\"token function\">internalGetViewDataBinding0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> component<span class=\"token punctuation\">,</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> internalId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>internalId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">case</span>  LAYOUT_FRAGMENTHOME<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"layout/fragment_home_0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FragmentHomeBindingImpl</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The tag for fragment_home is invalid. Received: \"</span> <span class=\"token operator\">+</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"refer\"><a class=\"markdownIt-Anchor\" href=\"#refer\">#</a> Refer</h3>\n<p><a href=\"https://www.jianshu.com/p/4be20cc58f17\">Android 架构组件之 DataBinding 源码解析 - 简书 (jianshu.com)</a><br>\n<a href=\"https://www.jianshu.com/p/4e9a1ab05bb5\"> DataBinding 源码分析 - 简书 (jianshu.com)</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/15jfHwStpctgCeeA/",
            "url": "https://onion99.github.io/2021/10/31/15jfHwStpctgCeeA/",
            "title": "源码学习-Glide",
            "date_published": "2021-10-31T13:29:17.000Z",
            "content_html": "<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Glide</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>myUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span>imageView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\"></p>\n<h3 id=\"with\"><a class=\"markdownIt-Anchor\" href=\"#with\">#</a> with()</h3>\n<blockquote>\n<p>用 Method 初始化 glide 的一些必需的环境，然后调用 Requestmanagerretriver 的 <code>get()</code>  获取 requestManager。如果传入的对象是全局 Context，你就不需要处理生命周期；如果输入是具有生命周期的 View (包含 Frg 或 Act) 则将添加一个隐藏的 Fragment 来感知生命周期</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token function\">getRetriever</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"getretriever\"><a class=\"markdownIt-Anchor\" href=\"#getretriever\">#</a> getRetriever()</h4>\n<blockquote>\n<p>RequestManagerRetriever, 用于创建新的 RequestManager 或从 Activity 和 Fragment 中检索现有的</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NonNull</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RequestManagerRetriever</span> <span class=\"token function\">getRetriever</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 由于其他原因，上下文可能为空（即用户传入空值），但实际上它只会由于 Fragment 生命周期的错误而发生。</span>\n  <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>\n      context<span class=\"token punctuation\">,</span><span class=\"token string\">\"You cannot start a load on a not yet attached View or a Fragment where getActivity() \"</span>\n          <span class=\"token operator\">+</span> <span class=\"token string\">\"returns null (which usually occurs when getActivity() is called before the Fragment \"</span>\n          <span class=\"token operator\">+</span> <span class=\"token string\">\"is attached or after the Fragment is destroyed).\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取 RequestManagerRetriever</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Glide</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestManagerRetriever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"get\"><a class=\"markdownIt-Anchor\" href=\"#get\">#</a> get()</h4>\n<blockquote>\n<p>单例实现 Glide 的初始化</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 双重检查锁定在这里是安全的</span>\n<span class=\"token keyword\">public</span> static Glide <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NonNull</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glide <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 通过反射 GeneratedAppGlideModuleImpl 实例化 Glide</span>\n    GeneratedAppGlideModule annotationGeneratedModule <span class=\"token operator\">=</span>\n        <span class=\"token function\">getAnnotationGeneratedGlideModules</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">synchronized</span> <span class=\"token punctuation\">(</span>Glide<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glide <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkAndInitializeGlide</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> annotationGeneratedModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> glide<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestmanagerretrieverget\"><a class=\"markdownIt-Anchor\" href=\"#requestmanagerretrieverget\">#</a> RequestManagerRetriever.get()</h4>\n<blockquote>\n<p>创建对应生命周期的 RequestManager</p>\n</blockquote>\n<ul>\n<li>首先判断是在子线程，则拿一个全 Context 然后在工厂模式创建下 RequestManager, 所以推荐不要在子线程执行此操作</li>\n<li>如为 FragmentActivity, 则通过 FragmentManager, 创建一个空 Fragment 放进当前 <code>Fragment</code>  或者 <code>Activity</code> , 这样就可以感知宿主的生命周期，然后在工厂模式创建下 RequestManager</li>\n<li>如为 Activity…</li>\n<li>如为 ContextWrapper…</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOnBackgroundThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">assertNotDestroyed</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    frameWaiter<span class=\"token punctuation\">.</span><span class=\"token function\">registerSelf</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span>FragmentManager</span> fm <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fragmentGet</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> fm<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*parentHint=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isActivityVisible</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// FragmentActivity Simple </span>\n<span class=\"token annotation punctuation\">@NonNull</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">FragmentActivity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOnBackgroundThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">assertNotDestroyed</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    frameWaiter<span class=\"token punctuation\">.</span><span class=\"token function\">registerSelf</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">FragmentManager</span> fm <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">supportFragmentGet</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> fm<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*parentHint=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isActivityVisible</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 通过 supportFragment 感知创建</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token function\">supportFragmentGet</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">FragmentManager</span> fm<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Fragment</span> parentHint<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">boolean</span> isParentVisible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">SupportRequestManagerFragment</span> current <span class=\"token operator\">=</span> <span class=\"token function\">getSupportRequestManagerFragment</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">,</span> parentHint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">RequestManager</span> requestManager <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestManager <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 工厂模式创建</span>\n    <span class=\"token class-name\">Glide</span> glide <span class=\"token operator\">=</span> <span class=\"token class-name\">Glide</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    requestManager <span class=\"token operator\">=</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>\n            glide<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">getGlideLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestManagerTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 这是一个小技巧，我们将启动 RequestManager，而不是相应的 Lifecycle。启动 RequestManager 是安全的，但启动 Lifecycle 可能会引发内存泄漏</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isParentVisible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      requestManager<span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    current<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestManager</span><span class=\"token punctuation\">(</span>requestManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> requestManager<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"load\"><a class=\"markdownIt-Anchor\" href=\"#load\">#</a> load()</h3>\n<blockquote>\n<p>对全局变量赋值，构建 ReqeustBuilder</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Drawable Simple</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Drawable</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Drawable</span> drawable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">asDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>drawable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"into\"><a class=\"markdownIt-Anchor\" href=\"#into\">#</a> into()</h3>\n<p>设置资源到加载的 ImageView 中 ，取消任何现有的加载，并释放 Glide 之前可能加载到 ImageView 的任何资源，以便它们可以被重用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 设置资源配置到 TargetView</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ImageView</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertMainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ···\n    <span class=\"token keyword\">return</span> <span class=\"token function\">into</span><span class=\"token punctuation\">(</span>\n        glideContext<span class=\"token punctuation\">.</span><span class=\"token function\">buildImageViewTarget</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*targetListener=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        requestOptions<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">mainThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 创建 TargetView</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildImageViewTarget</span><span class=\"token punctuation\">(</span>\n      <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ImageView</span> imageView<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> transcodeClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> imageViewTargetFactory<span class=\"token punctuation\">.</span><span class=\"token function\">buildTarget</span><span class=\"token punctuation\">(</span>imageView<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 负责为指定的 android.view.View 子类生成正确类型的 Target 工厂</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageViewTargetFactory</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token annotation punctuation\">@NonNull</span>\n  <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildTarget</span><span class=\"token punctuation\">(</span>\n      <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ImageView</span> view<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BitmapImageViewTarget</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Drawable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DrawableImageViewTarget</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"Unhandled class: \"</span> <span class=\"token operator\">+</span> clazz <span class=\"token operator\">+</span> <span class=\"token string\">\", try .as*(Class).transcode(ResourceTranscoder)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"into-2\"><a class=\"markdownIt-Anchor\" href=\"#into-2\">#</a> into()</h4>\n<blockquote>\n<p>核心代码加载代码，看起来简单但实现起来复杂。<br>\n首先看看 buildRequest 如何初始化 request</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Y</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Y</span> <span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Y</span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> options<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isModelSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You must call #load() before calling #into()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 现在的请求</span>\n  <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token function\">buildRequest</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 之前的请求</span>\n  <span class=\"token class-name\">Request</span> previous <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 如果之前的请求完成，重新开始以重新传递结果，触发 RequestListeners 和 Targets。如果请求失败，将重新请求，</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">isEquivalentTo</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isSkipMemoryCacheWithCompletePreviousRequest</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果之前的请求已经在运行，我们可以让它继续运行而不中断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 使用先前的请求而不是新的请求来优化，例如跳过设置占位符、跟踪和取消跟踪目标以及获取在单个请求中完成的视图维度</span>\n      previous<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  requestManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  target<span class=\"token punctuation\">.</span><span class=\"token function\">setRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  requestManager<span class=\"token punctuation\">.</span><span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestbuilderbuildrequest\"><a class=\"markdownIt-Anchor\" href=\"#requestbuilderbuildrequest\">#</a> RequestBuilder.buildRequest()</h4>\n<blockquote>\n<p>根据存在的场景建立不同 Request</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*requestLock=*/</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span><span class=\"token comment\">/*parentCoordinator=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestCoordinator</span> parentCoordinator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 如有必要首先构建 ErrorRequestCoordinator，以便我们可以更新 parentCoordinator。</span>\n  <span class=\"token class-name\">ErrorRequestCoordinator</span> errorRequestCoordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorBuilder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    errorRequestCoordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorRequestCoordinator</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    parentCoordinator <span class=\"token operator\">=</span> errorRequestCoordinator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">Request</span> mainRequest <span class=\"token operator\">=</span> <span class=\"token function\">buildThumbnailRequestRecursive</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorRequestCoordinator <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> mainRequest<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> errorOverrideWidth <span class=\"token operator\">=</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> errorOverrideHeight <span class=\"token operator\">=</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">isValidOverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    errorOverrideWidth <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    errorOverrideHeight <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">Request</span> errorRequest <span class=\"token operator\">=</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> errorRequestCoordinator<span class=\"token punctuation\">,</span> errorBuilder<span class=\"token punctuation\">.</span>transitionOptions<span class=\"token punctuation\">,</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> errorOverrideWidth<span class=\"token punctuation\">,</span> errorOverrideHeight<span class=\"token punctuation\">,</span> errorBuilder<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  errorRequestCoordinator<span class=\"token punctuation\">.</span><span class=\"token function\">setRequests</span><span class=\"token punctuation\">(</span>mainRequest<span class=\"token punctuation\">,</span> errorRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> errorRequestCoordinator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestbuilderbuildthumbnailrequestrecursive\"><a class=\"markdownIt-Anchor\" href=\"#requestbuilderbuildthumbnailrequestrecursive\">#</a> RequestBuilder.buildThumbnailRequestRecursive()</h4>\n<blockquote>\n<p>根据是否需要缩略图，生成各种不同的 Request</p>\n</blockquote>\n<p>这里经过一层又一层最终拿到一个 <code>SingleRequest</code> 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildThumbnailRequestRecursive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestCoordinator</span> parentCoordinator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thumbnailBuilder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 递归案例：包含一个潜在的递归缩略图 Request Builder</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isThumbnailBuilt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"You cannot use a request as both the main request and a \"</span>\n              <span class=\"token operator\">+</span> <span class=\"token string\">\"thumbnail, consider using clone() on the request(s) passed to thumbnail()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> thumbTransitionOptions <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span>transitionOptions<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 默认情况下我们的将过渡用在缩略图，但避免覆盖可能已明确应用于缩略图请求的自定义选项。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thumbnailBuilder<span class=\"token punctuation\">.</span>isDefaultTransitionOptionsSet<span class=\"token punctuation\">)</span> thumbTransitionOptions <span class=\"token operator\">=</span> transitionOptions<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Priority</span> thumbPriority <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">isPrioritySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">getThumbnailPriority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> thumbOverrideWidth <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> thumbOverrideHeight <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">isValidOverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      thumbOverrideWidth <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      thumbOverrideHeight <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">ThumbnailRequestCoordinator</span> coordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThumbnailRequestCoordinator</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> fullRequest <span class=\"token operator\">=</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    isThumbnailBuilt <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 递归生成缩略图请求</span>\n    <span class=\"token class-name\">Request</span> thumbRequest <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span>targetListener<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> thumbTransitionOptions<span class=\"token punctuation\">,</span> thumbPriority<span class=\"token punctuation\">,</span> thumbOverrideWidth<span class=\"token punctuation\">,</span> thumbOverrideHeight<span class=\"token punctuation\">,</span> thumbnailBuilder<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    isThumbnailBuilt <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">setRequests</span><span class=\"token punctuation\">(</span>fullRequest<span class=\"token punctuation\">,</span> thumbRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> coordinator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thumbSizeMultiplier <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 基本情况：缩略图 Multiplier 生成缩略图请求，但不能递归。</span>\n    <span class=\"token class-name\">ThumbnailRequestCoordinator</span> coordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThumbnailRequestCoordinator</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> fullRequest <span class=\"token operator\">=</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> thumbnailOptions <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sizeMultiplier</span><span class=\"token punctuation\">(</span>thumbSizeMultiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> thumbnailRequest <span class=\"token operator\">=</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> thumbnailOptions<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token function\">getThumbnailPriority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">setRequests</span><span class=\"token punctuation\">(</span>fullRequest<span class=\"token punctuation\">,</span> thumbnailRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> coordinator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 基本情况：没有缩略图</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestCoordinator</span> requestCoordinator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingleRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtain</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> glideContext<span class=\"token punctuation\">,</span> requestLock<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestListeners<span class=\"token punctuation\">,</span> requestCoordinator<span class=\"token punctuation\">,</span> glideContext<span class=\"token punctuation\">.</span><span class=\"token function\">getEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getTransitionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestmanagertrack\"><a class=\"markdownIt-Anchor\" href=\"#requestmanagertrack\">#</a> RequestManager.track()</h4>\n<p>这里 Glide 将判断请求是否需要显示，如果它需要现在显示则开始执行，否则 clear ( )，并将请求放入队列。这种设计更精巧，省电</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  targetTracker<span class=\"token punctuation\">.</span><span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  requestTracker<span class=\"token punctuation\">.</span><span class=\"token function\">runRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/** 开始跟踪给定的请求 */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runRequest</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  requests<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isPaused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 启动异步加载</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 防止从以前的请求加载任何位图，释放此请求持有的任何资源，显示当前占位符（如果提供），并将请求标记为已取消</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pendingRequests<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"singlerequestbegin\"><a class=\"markdownIt-Anchor\" href=\"#singlerequestbegin\">#</a> SingleRequest.begin()</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">assertNotCallingCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stateVerifier<span class=\"token punctuation\">.</span><span class=\"token function\">throwIfRecycled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>model <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        width <span class=\"token operator\">=</span> overrideWidth<span class=\"token punctuation\">;</span>\n        height <span class=\"token operator\">=</span> overrideHeight<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果用户设置可回调的 Drawables, 这里进行日志反馈</span>\n      <span class=\"token keyword\">int</span> logLevel <span class=\"token operator\">=</span> <span class=\"token function\">getFallbackDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>WARN <span class=\"token operator\">:</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onLoadFailed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GlideException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received null model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> logLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot restart a running request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果我们在完成后重新启动 (通常是通过 notifyDataSetChanged 之类的方式，向相同的目标或视图启动相同的请求)，我们可以简单地使用上次检索到的资源和大小，而跳过获取一个新的大小，开始一个新的加载等 (这意味着希望重新启动加载的用户需要在开始新的加载之前显式地清除 view 或 Target，因为他们觉得视图大小已经改变。)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">onResourceReady</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span>MEMORY_CACHE<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 对于既未完成也未运行的请求，重新启动可以被视为新请求，并可以从头开始运行</span>\n    cookie <span class=\"token operator\">=</span> <span class=\"token class-name\">GlideTrace</span><span class=\"token punctuation\">.</span><span class=\"token function\">beginSectionAsync</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>WAITING_FOR_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果宽高已指定，则回调 onSizeReady , 否则再获取宽高</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">onSizeReady</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      target<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>RUNNING <span class=\"token operator\">||</span> status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>WAITING_FOR_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canNotifyStatusChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      target<span class=\"token punctuation\">.</span><span class=\"token function\">onLoadStarted</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPlaceholderDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>onLoadFailed : 图片或者资源为空，报错回调</li>\n<li>onResourceReady: 最终通过 <code>Engine.release( )</code> , 释放资源</li>\n<li>onSizeReady: View 大小已明确，执行 <code>Engine.load()</code>  加载资源</li>\n<li>getSize: 获取 View 大小</li>\n<li>onLoadStarted: 等待或运行中，占位图处理</li>\n</ul>\n<h4 id=\"singlerequestonsizeready\"><a class=\"markdownIt-Anchor\" href=\"#singlerequestonsizeready\">#</a> SingleRequest.onSizeReady( )</h4>\n<blockquote>\n<p>启动给定参数进行图片的加载，必须在主线程上调用</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSizeReady</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  stateVerifier<span class=\"token punctuation\">.</span><span class=\"token function\">throwIfRecycled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>WAITING_FOR_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> sizeMultiplier <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getSizeMultiplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token function\">maybeApplySizeMultiplier</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> sizeMultiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">maybeApplySizeMultiplier</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">,</span> sizeMultiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    loadStatus <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>glideContext<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getDiskCacheStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getTransformations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">isTransformationRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">isScaleOnlyOrNoTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">isMemoryCacheable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getUseUnlimitedSourceGeneratorsPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getUseAnimationPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOnlyRetrieveFromCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"engineload\"><a class=\"markdownIt-Anchor\" href=\"#engineload\">#</a> Engine.load( )</h4>\n<blockquote>\n<p>到这里想都不用想了，Engine 才是真正加载图片的 Class,<br>\nEngine 负责执行图片加载和管理活动资源和缓存资源。</p>\n</blockquote>\n<p>活动资源是指那些至少提供一个请求但未释放的资源。一旦资源的所有使用者都释放了该资源，该资源就会进入缓存。如果资源从缓存中返回给新的使用者，它将被重新添加到活动资源中。<br>\n如果从缓存中移除资源，它的资源将被回收和重用 (如果可能的话)，资源将被丢弃。没有严格要求消费者释放他们的资源，所以活跃的资源被弱持有。</p>\n<p>请求流程:</p>\n<ul>\n<li>检查当前使用的资源集，返回活动资源（如果存在），并将任何新的非活动资源移动到内存缓存中</li>\n<li>检查内存缓存并提供缓存资源（如果存在）</li>\n<li>检查当前的一组正在进行的加载并将 cb 添加到进行中的加载（如果存在）</li>\n<li>开始加载</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">LoadStatus</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlideContext</span> glideContext<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Key</span> signature<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> resourceClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> transcodeClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DiskCacheStrategy</span> diskCacheStrategy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformation</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transformations<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isTransformationRequired<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isMemoryCacheable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useAnimationPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceCallback</span> cb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> VERBOSE_IS_LOGGABLE <span class=\"token operator\">?</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">EngineKey</span> key <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">buildKey</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> transformations<span class=\"token punctuation\">,</span>resourceClass<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">EngineResource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> memoryResource<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    memoryResource <span class=\"token operator\">=</span> <span class=\"token function\">loadFromMemory</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> isMemoryCacheable<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断是否有缓存，有则直接加载</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memoryResource <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">waitForExistingOrStartNewJob</span><span class=\"token punctuation\">(</span>glideContext<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> resourceClass<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> diskCacheStrategy<span class=\"token punctuation\">,</span> transformations<span class=\"token punctuation\">,</span> isTransformationRequired<span class=\"token punctuation\">,</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> isMemoryCacheable<span class=\"token punctuation\">,</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> useAnimationPool<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 避免在保持 Engine 锁时回调，因为这样做会更容易死锁</span>\n  cb<span class=\"token punctuation\">.</span><span class=\"token function\">onResourceReady</span><span class=\"token punctuation\">(</span>memoryResource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span>MEMORY_CACHE<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"enginewaitforexistingorstartnewjob\"><a class=\"markdownIt-Anchor\" href=\"#enginewaitforexistingorstartnewjob\">#</a> Engine.waitForExistingOrStartNewJob( )</h4>\n<blockquote>\n<p>等待或者执行任务</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">LoadStatus</span> <span class=\"token function\">waitForExistingOrStartNewJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlideContext</span> glideContext<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Key</span> signature<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> resourceClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> transcodeClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DiskCacheStrategy</span> diskCacheStrategy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformation</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transformations<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isTransformationRequired<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isMemoryCacheable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useAnimationPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceCallback</span> cb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EngineKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">EngineJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> current <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    current<span class=\"token punctuation\">.</span><span class=\"token function\">addCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadStatus</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">EngineJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> engineJob <span class=\"token operator\">=</span> engineJobFactory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> isMemoryCacheable<span class=\"token punctuation\">,</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> useAnimationPool<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">DecodeJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> decodeJob <span class=\"token operator\">=</span> decodeJobFactory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>glideContext<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> resourceClass<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> diskCacheStrategy<span class=\"token punctuation\">,</span> transformations<span class=\"token punctuation\">,</span> isTransformationRequired<span class=\"token punctuation\">,</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> engineJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jobs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> engineJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  engineJob<span class=\"token punctuation\">.</span><span class=\"token function\">addCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  engineJob<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>decodeJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>VERBOSE_IS_LOGGABLE<span class=\"token punctuation\">)</span>  <span class=\"token function\">logWithTimeAndKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Started new load\"</span><span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadStatus</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> engineJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"decodejob\"><a class=\"markdownIt-Anchor\" href=\"#decodejob\">#</a> DecodeJob</h4>\n<blockquote>\n<p>负责从缓存数据或原始源中解码资源并应用转换和转码的类</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCancelled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">notifyFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">runWrapped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runWrapped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 为了判断运行原因，这里做了三个判断</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>runReason<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> INITIALIZE<span class=\"token operator\">:</span>\n      <span class=\"token comment\">// 获取当前解码数据的阶段</span>\n      stage <span class=\"token operator\">=</span> <span class=\"token function\">getNextStage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">.</span>INITIALIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 获取数据生成器</span>\n      currentGenerator <span class=\"token operator\">=</span> <span class=\"token function\">getNextGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runGenerators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SWITCH_TO_SOURCE_SERVICE<span class=\"token operator\">:</span>\n      <span class=\"token function\">runGenerators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> DECODE_DATA<span class=\"token operator\">:</span>\n      <span class=\"token function\">decodeFromRetrievedData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unrecognized run reason: \"</span> <span class=\"token operator\">+</span> runReason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"rungenerators\"><a class=\"markdownIt-Anchor\" href=\"#rungenerators\">#</a> runGenerators( )</h5>\n<p>currentGenerator 实现 DataFetcherGenerator 接口，这个接口主要用来生成一系列的 modelLoader 和 model</p>\n<p>目前 Glide 有三种类生成器</p>\n<ul>\n<li>ResourceCacheGenerator</li>\n<li>DataCacheGenerator</li>\n<li>SourceGenerator</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runGenerators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  currentThread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  startFetchTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> isStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//startNext -> 尝试单个新的 DataFetcher，如果 DataFetcher 已启动则返回 true，否则返回 false</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isCancelled <span class=\"token operator\">&amp;&amp;</span> currentGenerator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>isStarted <span class=\"token operator\">=</span> currentGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">startNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stage <span class=\"token operator\">=</span> <span class=\"token function\">getNextStage</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentGenerator <span class=\"token operator\">=</span> <span class=\"token function\">getNextGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stage <span class=\"token operator\">==</span> <span class=\"token class-name\">Stage</span><span class=\"token punctuation\">.</span>SOURCE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reschedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// We've run out of stages and generators, give up.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stage <span class=\"token operator\">==</span> <span class=\"token class-name\">Stage</span><span class=\"token punctuation\">.</span>FINISHED <span class=\"token operator\">||</span> isCancelled<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isStarted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">notifyFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">DataFetcherGenerator</span> <span class=\"token function\">getNextGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> RESOURCE_CACHE<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceCacheGenerator</span><span class=\"token punctuation\">(</span>decodeHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> DATA_CACHE<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheGenerator</span><span class=\"token punctuation\">(</span>decodeHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SOURCE<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceGenerator</span><span class=\"token punctuation\">(</span>decodeHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> FINISHED<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unrecognized stage: \"</span> <span class=\"token operator\">+</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"sourcegeneratorstartnext\"><a class=\"markdownIt-Anchor\" href=\"#sourcegeneratorstartnext\">#</a> SourceGenerator.startNext()</h6>\n<p>将首先判断，缓存如果它不是空的，调用 cacheData; 否则，获取 loadData，然后执行 startNextLoad ()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataToCache <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Object</span> data <span class=\"token operator\">=</span> dataToCache<span class=\"token punctuation\">;</span>\n    dataToCache <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">boolean</span> isDataInCache <span class=\"token operator\">=</span> <span class=\"token function\">cacheData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 如果我们没有将数据写入缓存，cacheData 方法将尝试直接解码原始数据，而不是通过磁盘缓存。因为此时 cacheData 已经调用了我们的回调函数，所以除了返回，没有其他事情可做了</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDataInCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果我们能够成功地将数据写入缓存，那么现在需要继续调用下面的 sourceCacheGenerator 来从缓存加载数据</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// IOException 意味着我们无法将数据写入缓存，或者在磁盘缓存写入失败后无法倒带数据。无论哪种情况，我们都可以继续尝试下面的下一个取回</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoggable</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to properly rewind or write data to cache\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sourceCacheGenerator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> sourceCacheGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">startNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  sourceCacheGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  loadData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> started <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>started <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasNextModelLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    loadData <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>loadDataListIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadData <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span><span class=\"token function\">getDiskCacheStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDataCacheable</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">||</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">hasLoadPath</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">getDataClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">startNextLoad</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> started<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"sourcegeneratorcachedata\"><a class=\"markdownIt-Anchor\" href=\"#sourcegeneratorcachedata\">#</a> SourceGenerator.cacheData</h6>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 如果我们能够缓存数据，应该尝试直接从缓存解码数据，如果我们不能缓存数据，应该尝试从源解码，则返回 false\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">cacheData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> dataToCache<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">boolean</span> isLoadingFromSourceData <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">DataRewinder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> rewinder <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getRewinder</span><span class=\"token punctuation\">(</span>dataToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> data <span class=\"token operator\">=</span> rewinder<span class=\"token punctuation\">.</span><span class=\"token function\">rewindAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> encoder <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DataCacheWriter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheWriter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DataCacheKey</span> newOriginalKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheKey</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">,</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DiskCache</span> diskCache <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getDiskCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    diskCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>newOriginalKey<span class=\"token punctuation\">,</span> writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diskCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>newOriginalKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      originalKey <span class=\"token operator\">=</span> newOriginalKey<span class=\"token punctuation\">;</span>\n      sourceCacheGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheGenerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> helper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 我们能够将数据写入缓存</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      isLoadingFromSourceData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      cb<span class=\"token punctuation\">.</span><span class=\"token function\">onDataFetcherReady</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">,</span> rewinder<span class=\"token punctuation\">.</span><span class=\"token function\">rewindAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">,</span> loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 写入数据到缓存失败的处理</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoadingFromSourceData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"decodehelpergetsourceencoder\"><a class=\"markdownIt-Anchor\" href=\"#decodehelpergetsourceencoder\">#</a> DecodeHelper.getSourceEncoder()</h6>\n<p>DecodeHelper.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Registry<span class=\"token punctuation\">.</span>NoSourceEncoderAvailableException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> glideContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>Registry.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">X</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSourceEncoderAvailableException</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> encoder <span class=\"token operator\">=</span> encoderRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>encoder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">return</span> encoder<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">&#125;</span>  \n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSourceEncoderAvailableException</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"register\"><a class=\"markdownIt-Anchor\" href=\"#register\">#</a> Register</h6>\n<blockquote>\n<p>每个数据类型对应一个编码器，Register 就是用来记录这些的</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">registry\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteBufferEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamEncoder</span><span class=\"token punctuation\">(</span>arrayPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Registry</span><span class=\"token punctuation\">.</span>BUCKET_BITMAP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> byteBufferBitmapDecoder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Registry</span><span class=\"token punctuation\">.</span>BUCKET_BITMAP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> streamBitmapDecoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"decodefromretrieveddata\"><a class=\"markdownIt-Anchor\" href=\"#decodefromretrieveddata\">#</a> decodeFromRetrievedData()</h5>\n<blockquote>\n<p>处理返回的数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oU7rD.png\" alt=\"5oU7rD.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">decodeFromData</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DataFetcher</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> fetcher<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Data</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">GlideException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">decodeFromFetcher</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoggable</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>VERBOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">logWithTimeAndKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoded result \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">decodeFromFetcher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Data</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">GlideException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">LoadPath</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> path <span class=\"token operator\">=</span> decodeHelper<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">runLoadPath</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"enginejob\"><a class=\"markdownIt-Anchor\" href=\"#enginejob\">#</a> EngineJob</h4>\n<blockquote>\n<p>通过添加和删除加载回调并在加载完成时通知回调来管理加载的类 (管理加载过程中的一些回调)</p>\n</blockquote>\n<p>GlideExecutor 是一个继承的 Executorservice 类，它显然是一个线程池。这里通过 decodeJob 来确定是否从缓存解析，如果是从缓存解析，调用 diskCacheExecutor，否则，调用 getActiveSourceExecutor</p>\n<ul>\n<li>willDecodeFromCache\n<ul>\n<li>如果此作业将尝试从磁盘缓存解码资源，则返回 true</li>\n<li>如果始终从源解码，则返回 false</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DecodeJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> decodeJob<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decodeJob <span class=\"token operator\">=</span> decodeJob<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">GlideExecutor</span> executor <span class=\"token operator\">=</span> decodeJob<span class=\"token punctuation\">.</span><span class=\"token function\">willDecodeFromCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> diskCacheExecutor <span class=\"token operator\">:</span> <span class=\"token function\">getActiveSourceExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 执行 decodeJob 线程任务</span>\n  executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>decodeJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/4SVquTFcR8Wyv4GV/",
            "url": "https://onion99.github.io/2021/10/31/4SVquTFcR8Wyv4GV/",
            "title": "源码学习-OkHttp",
            "date_published": "2021-10-31T13:28:18.000Z",
            "content_html": "<blockquote>\n<p>http 的连接本质上是个 socket，根据 http 协议，通过 socket 包装发送请求并获得返回结果</p>\n</blockquote>\n<p>网路连接库一开始的样子如下代码所示，其实只要符合 Http 协议的请求，就可以和网络进行交互，类似于 OkHttp 的网络请求库，帮助开发者方便和屏蔽了 Http 协议中类似于请求头，重连、合并、代理、返回结果解析等等 Http 协议细节的应用层实现。</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">val path <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.baidu.com/\"</span>\n        val host <span class=\"token operator\">=</span> <span class=\"token string\">\"www.baidu.com\"</span>\n        <span class=\"token keyword\">var</span> socket<span class=\"token operator\">:</span> <span class=\"token class-name\">Socket</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">var</span> streamWriter<span class=\"token operator\">:</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">var</span> bufferedWriter<span class=\"token operator\">:</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            socket <span class=\"token operator\">=</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n            streamWriter <span class=\"token operator\">=</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            bufferedWriter <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span>streamWriter<span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET $path HTTP/1.1\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host: www.baidu.com\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            val myRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> d <span class=\"token operator\">=</span> it <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">toChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"整体流程\"><a class=\"markdownIt-Anchor\" href=\"#整体流程\">#</a> 整体流程</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetExample</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 核网络管理者 - 核心类</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">OkHttpClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 请求搭建</span>\n    <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n      阻塞式 execute -> 立即调用请求，并阻塞，直到响应可以处理或出现错误\n      为了避免资源泄漏，调用者应该关闭 Response，而 Response 又会关闭底层的 ResponseBody。 // 确保响应 (和底层响应体) 是关闭的\n      注意，传输层的成功 (接收 HTTP 响应代码、报头和正文) 不一定表示应用层的成功：响应可能仍然表示不满意的 HTTP 响应代码，如 404 或 500。\n     */</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">GetExample</span> example <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span> example<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://raw.github.com/square/okhttp/master/README.md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hiy4O.png\" alt=\"5hiy4O.png\"></p>\n<h3 id=\"连接建立\"><a class=\"markdownIt-Anchor\" href=\"#连接建立\">#</a> 连接建立</h3>\n<p>Volley 等很多网络请求框架很多底层都是通过 HTTPURLConnection 来与服务端建立连接的，而 OkHttp 就比较优秀了。因为 HTTP 协议是建立在 TCP/IP 协议基础之上的，底层还是走的 Socket，所以 OkHttp 直接使用 Socket 来完成 HTTP 请求。</p>\n<h3 id=\"okhttpclient\"><a class=\"markdownIt-Anchor\" href=\"#okhttpclient\">#</a> OkHttpClient</h3>\n<p>官方推荐我们使用单例去创建 OkHttpClient，重用所有 HTTP 调用的时候，性能是最佳的， 这是因为每个客户端都拥有自己的连接池和线程池。 重用连接和线程可减少延迟并节省内存。 相反，为每个请求创建一个客户端会浪费空闲池上的资源</p>\n<h3 id=\"request\"><a class=\"markdownIt-Anchor\" href=\"#request\">#</a> Request</h3>\n<p>采用 Builder 的方式进行设计，主要包含了 url、method、headers、body 和 CacheControl 组成的各种配置项</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Dispatcher</span> dispatcher<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分发器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Proxy</span> proxy<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 代理</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Protocol</span><span class=\"token punctuation\">></span></span> protocols<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 协议</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConnectionSpec</span><span class=\"token punctuation\">></span></span> connectionSpecs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传输层版本和连接协议</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">></span></span> interceptors<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拦截器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">></span></span> networkInterceptors<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 网络拦截器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ProxySelector</span> proxySelector<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代理选择</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CookieJar</span> cookieJar<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cookie</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Cache</span> cache<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">InternalCache</span> internalCache<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 内部缓存</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">SocketFactory</span> socketFactory<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//socket 工厂</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">SSLSocketFactory</span> sslSocketFactory<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 安全套接层 socket 工厂，用于 HTTPS</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CertificateChainCleaner</span> certificateChainCleaner<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 验证确认响应证书 适用 HTTPS 请求连接的主机名。</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">HostnameVerifier</span> hostnameVerifier<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//  主机名字确认</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CertificatePinner</span> certificatePinner<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  证书链</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Authenticator</span> proxyAuthenticator<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 代理身份验证</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Authenticator</span> authenticator<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 本地身份验证</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ConnectionPool</span> connectionPool<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 连接池，复用连接</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Dns</span> dns<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 域名</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> followSslRedirects<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 安全套接层重定向</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> followRedirects<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地重定向</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> retryOnConnectionFailure<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重试连接失败</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> connectTimeout<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 连接超时</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> readTimeout<span class=\"token punctuation\">;</span> <span class=\"token comment\">//read 超时</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> writeTimeout<span class=\"token punctuation\">;</span> <span class=\"token comment\">//write 超时 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"call\"><a class=\"markdownIt-Anchor\" href=\"#call\">#</a> Call</h3>\n<blockquote>\n<p>一个提供 HTTP 请求执行相关接口的接口类，具体的实现类是 RealCall</p>\n</blockquote>\n<ul>\n<li>可以取消</li>\n<li>此对象表示单个请求 / 响应对 (流), 因此不能执行两次</li>\n</ul>\n<h4 id=\"realcall\"><a class=\"markdownIt-Anchor\" href=\"#realcall\">#</a> RealCall</h4>\n<blockquote>\n<p>OkHttp 的应用层和网络层之间的桥梁，包含了网络的连接、请求、响应和流处理整个流程，也是 OkHttp 中最关键核心的类</p>\n</blockquote>\n<h5 id=\"asynctimeout\"><a class=\"markdownIt-Anchor\" href=\"#asynctimeout\">#</a> AsyncTimeout</h5>\n<p>此超时用在在后台线程执行超时时执行操作。 使用它来实现本地不支持的超时，例如写入时被阻止的套接字，子类应该覆盖 timedOut 以在发生超时时采取行动。 此方法将由共享看门狗线程调用，因此不应执行任何长时间运行的操作。 否则，我们可能会面临触发其他超时的风险。<br>\n使用 sink 和 source 将此超时应用于流。 返回的值将超时应用于包装流上的每个操作。<br>\n调用者应该在执行可能超时的工作之前调用 enter ，然后退出。 exit 的返回值表示是否触发了超时。 请注意，对 timedOut 的调用是异步的，可以在 exit 之后调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> val timeout <span class=\"token operator\">=</span> object <span class=\"token operator\">:</span> <span class=\"token class-name\">AsyncTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  override fun <span class=\"token function\">timedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token comment\">// 取消请求  </span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>callTimeoutMillis<span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MILLISECONDS<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"execute\"><a class=\"markdownIt-Anchor\" href=\"#execute\">#</a> execute</h5>\n<blockquote>\n<p>同步请求，马上执行并阻塞直到可以处理响应或出现错误</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * Atomic 就是原子性的意思，源码里用了 Volatile 属性，即能够保证在高并发的情况下只有一个线程能够访问这个属性值\n   * executed 是一个原子变量，一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求，用 compareAndSet (false, true)\n   * 判断多线程状态下，请求是否重新执行：如果值为 false，则抛出一个 IllegalStateException，并返回调用 lazyMessage 的结果。\n   */</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Already Executed\"</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 超时计数开始</span>\n  timeout<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 执行请求前处理 -> 栈跟踪，事件回调等等</span>\n  <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调度器开始执行</span>\n    client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">executed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 返回拦截器处理下的响应</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调度器返回完成信号</span>\n    client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"enqueue\"><a class=\"markdownIt-Anchor\" href=\"#enqueue\">#</a> enqueue</h5>\n<blockquote>\n<p>异步调度，将请求放到队列中等到执行</p>\n</blockquote>\n<p>RealCall.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>responseCallback<span class=\"token operator\">:</span> Callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token comment\">// 首先判断当前请求是否已执行，如果已经执行则打印日志，并抛出 IllegalStateException 异常</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Already Executed\"</span> <span class=\"token punctuation\">&#125;</span>  \n  <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token comment\">// 创建一个 AsyncCall 对象，放进分发器队列中</span>\n  client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token function\">AsyncCall</span><span class=\"token punctuation\">(</span>responseCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回一个对象，该对象包含在执行此方法时创建的堆栈跟踪</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callStackTrace <span class=\"token operator\">=</span> Platform<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStackTraceForCloseable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response.body().close()\"</span><span class=\"token punctuation\">)</span>\n    eventListener<span class=\"token punctuation\">.</span><span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Dispatcher.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token comment\">// https://zhuanlan.zhihu.com/p/261397170</span>\n<span class=\"token comment\">// ArrayDeque -  Java 集合中双端队列的数组实现</span>\n<span class=\"token comment\">// ArrayDeque 几乎没有容量限制，设计为线程不安全的，禁止 null 元素</span>\n<span class=\"token comment\">// ArrayDeque 是 Deque 的实现类，可以作为栈来使用，效率高于 Stack；也可以作为队列来使用，效率高于 LinkedList。</span>\n<span class=\"token comment\">// ArrayDeque 大多数的额操作都在固定时间内运行，例外情况包括 remove，removeFirstOccurrence，removeLastOccurrence，contains，iterator.remove ()，和批量操作，这些将以线性时间运行</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> runningSyncCalls <span class=\"token operator\">=</span> ArrayDeque<span class=\"token operator\">&lt;</span>RealCall<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> AsyncCall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 将请求 AsyncCall 添加到待执行队列</span>\n    readyAsyncCalls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 判断当前请求是否已存在可复用的 hos</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>call<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span>forWebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">val</span> existingCall <span class=\"token operator\">=</span> <span class=\"token function\">findExistingCallWithHost</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingCall <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">reuseCallsPerHostFrom</span><span class=\"token punctuation\">(</span>existingCall<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 将符合条件的 Call 从 readyAsyncCalls 提升到 runningAsyncCalls 并在执行它们</span>\n  <span class=\"token function\">promoteAndExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RealCall.AsyncCall</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 给当前 AsyncCall 异步线程设置名称</span>\n    <span class=\"token function\">threadName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OkHttp <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span><span class=\"token function\">redactedUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> signalledCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      timeout<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取请求结果</span>\n        <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        signalledCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token comment\">// 触发相应回调</span>\n        responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signalledCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// Do not signal the callback twice!</span>\n          Platform<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callback failure for <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span><span class=\"token function\">toLoggableString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">,</span> Platform<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>signalledCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">val</span> canceledException <span class=\"token operator\">=</span> <span class=\"token function\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canceled due to <span class=\"token interpolation variable\">$t</span>\"</span><span class=\"token punctuation\">)</span>\n          canceledException<span class=\"token punctuation\">.</span><span class=\"token function\">addSuppressed</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n          responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> canceledException<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">throw</span> t\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 关闭请求</span>\n        client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"dispatcher分发器\"><a class=\"markdownIt-Anchor\" href=\"#dispatcher分发器\">#</a> Dispatcher (分发器)</h3>\n<blockquote>\n<p>用于管理其对应 OkHttpClient 的所有请求，对 Call 进行统一的控制，例如结束所有请求、获取线程池等等</p>\n</blockquote>\n<ul>\n<li>readyAsyncCalls：一个新的异步请求首先会被加入该队列中</li>\n<li>runningAsyncCalls：当前正在运行中的异步请求</li>\n<li>runningSyncCalls：当前正在运行的同步请求</li>\n</ul>\n<p>异步请求跟同步请求一样，最终都会调用到 <code>getResponseWithInterceptorChain()</code></p>\n<h3 id=\"interceptor拦截器\"><a class=\"markdownIt-Anchor\" href=\"#interceptor拦截器\">#</a> Interceptor (拦截器)</h3>\n<blockquote>\n<p>Interceptor 接口作为一个拦截器的抽象概念，被设计为责任链上的单位节点，用于观察、拦截、处理请求等，例如添加 Header、重定向、数据处理等等。<br>\nInterceptor 之间互相独立，每个 Interceptor 只负责自己关注的任务，不与其他 Interceptor 接触。</p>\n</blockquote>\n<p>RealCall.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Throws</span><span class=\"token punctuation\">(</span>IOException<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// TODO: 2021/8/13 okhttp 的核心是拦截器，而拦截器所采用的设计模式是责任链设计，即每个拦截器只处理与自己相关的业务逻辑 https://zhuanlan.zhihu.com/p/340090732</span>\n  <span class=\"token comment\">// 构建整个网络请求拦截</span>\n  <span class=\"token keyword\">val</span> interceptors <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Interceptor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加 Client 的拦截器</span>\n  interceptors <span class=\"token operator\">+=</span> client<span class=\"token punctuation\">.</span>interceptors\n  <span class=\"token comment\">// 添加失败重连的拦截器</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">RetryAndFollowUpInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加请求桥梁拦截器 - 在对用户的请求头部加了一些信息，然后在获取到的响应中也做了一些处理。而这些处理对用户是透明的，减少了客户请求的工作</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">BridgeInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>cookieJar<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加缓存拦截器 - 理来自缓存的请求并将响应写入缓存。</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">CacheInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加请求中拦截器 - 打开与目标服务器的连接并继续下一个拦截器。 网络可能用于返回的响应，或使用条件 GET 验证缓存的响应</span>\n  interceptors <span class=\"token operator\">+=</span> ConnectInterceptor\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>forWebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    interceptors <span class=\"token operator\">+=</span> client<span class=\"token punctuation\">.</span>networkInterceptors\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 这是链中的最后一个拦截器。 它对服务器进行网络调用，真正的网络请求从这里开始</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">CallServerInterceptor</span><span class=\"token punctuation\">(</span>forWebSocket<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 构建网络请求链 - 一个具体的拦截器链，承载着整个拦截器链：所有应用程序拦截器、OkHttp 核心、所有网络拦截器，最后是网络调用者。</span>\n  <span class=\"token keyword\">val</span> chain <span class=\"token operator\">=</span> <span class=\"token function\">RealInterceptorChain</span><span class=\"token punctuation\">(</span>\n      call <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n      interceptors <span class=\"token operator\">=</span> interceptors<span class=\"token punctuation\">,</span>\n      index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      exchange <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      request <span class=\"token operator\">=</span> originalRequest<span class=\"token punctuation\">,</span>\n      connectTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>connectTimeoutMillis<span class=\"token punctuation\">,</span>\n      readTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>readTimeoutMillis<span class=\"token punctuation\">,</span>\n      writeTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>writeTimeoutMillis\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> calledNoMoreExchanges <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>originalRequest<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 是否取消请求</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCanceled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">closeQuietly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Canceled\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> response\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    calledNoMoreExchanges <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">noMoreExchanges</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Throwable\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>calledNoMoreExchanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">noMoreExchanges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RealInterceptorChain.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Throws</span><span class=\"token punctuation\">(</span>IOException<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 判断拦截器是否为空</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> interceptors<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 请求数加 1</span>\n  calls<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exchange <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span>finder<span class=\"token punctuation\">.</span><span class=\"token function\">sameHostAndPort</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>interceptors<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">&#125;</span></span> must retain the same host and port\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>calls <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>interceptors<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">&#125;</span></span> must call proceed() exactly once\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// Call the next interceptor in the chain. 调用链中的下一个拦截器</span>\n  <span class=\"token keyword\">val</span> next <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> request <span class=\"token operator\">=</span> request<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 获取当前的拦截器</span>\n  <span class=\"token keyword\">val</span> interceptor <span class=\"token operator\">=</span> interceptors<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 开始一个个的执行每一个拦截器，每个拦截器的 intercept 都会调到 当前类的 proceed ，直至最后一个 CallServerInterceptor 执行完</span>\n  <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USELESS_ELVIS\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"interceptor <span class=\"token interpolation variable\">$interceptor</span> returned null\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exchange <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> interceptors<span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> next<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation variable\">$interceptor</span> must call proceed() exactly once\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"interceptor <span class=\"token interpolation variable\">$interceptor</span> returned a response with no body\"</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"chain\"><a class=\"markdownIt-Anchor\" href=\"#chain\">#</a> Chain</h4>\n<blockquote>\n<p>Interceptor 与 Chain 彼此互相依赖，互相调用，共同发展，形成了一个完美的调用链</p>\n</blockquote>\n<p>Chain 被用来描述责任链，通过其中的 process 方法开始依次执行链上的每个节点，并返回处理后的 Response。<br>\nChain 的唯一实现为 RealInterceptorChain（下文简称 RIC），RIC 可以称之为<strong>拦截器责任链</strong>，其中的节点由 RealCall 中添加进来的 Interceptor 们组成。由于 Interceptor 的互相独立性，RIC 中还会包含一些公共参数及共享的对象。</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hbpJx.png\" alt=\"5hbpJx.png\"></p>\n<h3 id=\"about\"><a class=\"markdownIt-Anchor\" href=\"#about\">#</a> About</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/116777864\">OkHttp 源码深度解析</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/104813091\"> OkHttp 源码解析</a><br>\n<a href=\"https://juejin.cn/post/7020027832977850381\"> OkHttp 源码原理</a></p>\n",
            "tags": [
                "源码解析"
            ]
        }
    ]
}