{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stay hungry , Stay foolish • All posts by \"性能优化\" tag",
    "description": "巴拉巴拉",
    "home_page_url": "https://onion99.github.io",
    "items": [
        {
            "id": "https://onion99.github.io/2021/10/31/5FIszA6Ut2OHE8Sg/",
            "url": "https://onion99.github.io/2021/10/31/5FIszA6Ut2OHE8Sg/",
            "title": "安卓优化-布局优化",
            "date_published": "2021-10-31T12:50:14.000Z",
            "content_html": "<h3 id=\"布局耗时统计\"><a class=\"markdownIt-Anchor\" href=\"#布局耗时统计\">#</a> 布局耗时统计</h3>\n<ul>\n<li>手动埋点</li>\n<li>AOP/ArtHook\n<ul>\n<li>切入 Activity 的 setContentView</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"布局加载优化\"><a class=\"markdownIt-Anchor\" href=\"#布局加载优化\">#</a> 布局加载优化</h3>\n<ul>\n<li>代码写布局\n<ul>\n<li>Java 代码写布局</li>\n<li>Anko</li>\n<li>JetpackCompose</li>\n</ul>\n</li>\n<li>X2C</li>\n<li>Litho</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"视图绘制优化\"><a class=\"markdownIt-Anchor\" href=\"#视图绘制优化\">#</a> 视图绘制优化</h3>\n<ul>\n<li>优化布局层级以及嵌套\n<ul>\n<li>使用 ConstraintLayout</li>\n</ul>\n</li>\n<li>避免过度绘制，自定义 View 避免多次调用 onDraw,onMeasure</li>\n<li>其他\n<ul>\n<li>ViewStub: 延迟初始化</li>\n<li>onDraw,onMeasure 中避免创建大对象，耗时操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"include\"><a class=\"markdownIt-Anchor\" href=\"#include\">#</a> Include</h4>\n<blockquote>\n<p>提高布局复用性</p>\n</blockquote>\n<p>login.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40dp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@layout/titlebar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>include 所在的 layout 的布局有给其设置 id, 而 include 标签里面又给自己的根容器设置 id, 最好两个 id 都相同，否则 findview 时拿到空对象</p>\n<h4 id=\"merge\"><a class=\"markdownIt-Anchor\" href=\"#merge\">#</a> Merge</h4>\n<blockquote>\n<p>帮助 include 标签排除多余的一层 ViewGroup 容器，减少 view hierarchy 的结构，提升 UI 渲染的性能</p>\n</blockquote>\n<p>titlebar.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>merge</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20dp<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginRight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20dp<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>标题<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>merge</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>因为 merge 标签并不是 View, 所以在通过 LayoutInflate.inflate () 方法渲染的时候，第二个参数必须指定一个父容器 (parent), 且第三个参数 (attachToRoot) 必须为 true</li>\n<li>merge 标签必须使用在根布局，并且 ViewStub 标签中的 layout 布局不能使用 merge 标签</li>\n</ul>\n<h4 id=\"viewstub\"><a class=\"markdownIt-Anchor\" href=\"#viewstub\">#</a> ViewStub</h4>\n<blockquote>\n<p>延迟绘制 View</p>\n</blockquote>\n<p>layout.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ViewStub</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/viewstub<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@layout/info<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>activity.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ViewStub</span> stub <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewStub</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>viewstub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stub<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">View</span> stubView <span class=\"token operator\">=</span> stub<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">EditText</span> editText <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EditText</span><span class=\"token punctuation\">)</span> stubView<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>edit_password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>ViewStub 标签不支持 merge 标签</li>\n<li>ViewStub 的 inflate 只能被调用一次，第二次调用会抛出异常</li>\n<li>虽然 ViewStub 是不占用任何空间的，但是每个布局都必须要指定 layout_width 和 layout_height 属性，否则运行就会报错</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/6JN9JxpnRSjVeWry/",
            "url": "https://onion99.github.io/2021/10/31/6JN9JxpnRSjVeWry/",
            "title": "安卓优化-线程优化",
            "date_published": "2021-10-31T12:48:51.000Z",
            "content_html": "<h3 id=\"线程调度\"><a class=\"markdownIt-Anchor\" href=\"#线程调度\">#</a> 线程调度</h3>\n<blockquote>\n<p>任意时刻，只有一个线程占用 CPU，处于运行状态</p>\n</blockquote>\n<p>多线程并发：轮流获取 cpu 使用权<br>\n JVM 负责线程调度：按照特定调度模型分配 CPU 使用权</p>\n<h4 id=\"调度模型\"><a class=\"markdownIt-Anchor\" href=\"#调度模型\">#</a> 调度模型</h4>\n<ul>\n<li>分时调度模型：轮流获取，均匀分配 cpu 时间</li>\n<li>抢占式调度模型：按照优先级来</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"android异步方式\"><a class=\"markdownIt-Anchor\" href=\"#android异步方式\">#</a> Android 异步方式</h3>\n<ul>\n<li>Thread\n<ul>\n<li>最简单、常见的方式</li>\n<li>不易复用，频繁创建销毁开销大</li>\n</ul>\n</li>\n<li>HandlerThread\n<ul>\n<li>自带消息循环的线程</li>\n<li>串行执行，长时间运行，不断从队列中获取任务</li>\n</ul>\n</li>\n<li>IntentService\n<ul>\n<li>继承自 Service 在内部创建 HandlerThread</li>\n<li>异步、不占用主线程</li>\n<li>优先级高，不易被系统 kil</li>\n</ul>\n</li>\n<li>AsyncTask\n<ul>\n<li>Android 提供的工具类</li>\n<li>无需自己处理线程切换</li>\n</ul>\n</li>\n<li>线程池\n<ul>\n<li>jdk 提供的线程池</li>\n<li>易复用，减少频繁创建、销毁的时间</li>\n<li>功能强大：定时、任务列队、并发数控制等</li>\n</ul>\n</li>\n<li>RxJava\n<ul>\n<li>由强大的 Scheduler 集合提供</li>\n<li>不同类型的区分：IO 密集型、CPU 密集型</li>\n</ul>\n</li>\n<li>协程</li>\n</ul>\n<h3 id=\"线程使用准则\"><a class=\"markdownIt-Anchor\" href=\"#线程使用准则\">#</a> 线程使用准则</h3>\n<p>1、严禁使用 new Thread, 因为这样不便控制，可能产生预期之外的事情<br>\n 2、提供基础线程池供各个业务栈使用（避免各个业务栈各自维护一套线程池，导致线程数过多）<br>\n3、根据任务类型选择合适的异步方式（优先级低长时间执行 - HandlerThread，定时执行 - 线程池）<br>\n4、创建线程必须命名（方便定位线程归属，运行期 Thread.currentThread ().setName 修改名字）<br>\n5、关键异步任务监控（异步不等于不耗时，AOP 的方式来做监控）<br>\n6、重视优先级的设置（Process.setThreadPriority (), 可以设置多次）</p>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/9LsQhIFgDkllFt0Q/",
            "url": "https://onion99.github.io/2021/10/31/9LsQhIFgDkllFt0Q/",
            "title": "安卓优化-包体积",
            "date_published": "2021-10-31T12:48:08.000Z",
            "content_html": "<p><a href=\"https://cloud.tencent.com/developer/article/1425318\">Android APP 终极瘦身指南</a></p>\n<ul>\n<li>图片转 WebP</li>\n<li>去掉不必要的 so 库</li>\n<li>开启 shrinkResources 去除无用资源</li>\n<li>开启 minifyEnabled 混淆代码</li>\n<li>删除无用的语言资源</li>\n<li>使用微信资源压缩打包工具</li>\n<li>避免重复库，以及避免不同版本的库</li>\n<li>AndroidManifest 中 -&gt; android:extractNativeLibs=“true”</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/UYa5EEntsM9sKTYz/",
            "url": "https://onion99.github.io/2021/10/31/UYa5EEntsM9sKTYz/",
            "title": "安卓优化-卡顿优化",
            "date_published": "2021-10-31T12:47:12.000Z",
            "content_html": "<blockquote>\n<p>卡顿产生的根本原因就是 CPU 和 GPU 没有及时处理好数据，针对卡顿的优化就有思路了：尽可能减少 CPU 和 GPU 资源的消耗</p>\n</blockquote>\n<ul>\n<li>CPU：中央处理器（CPU，central processing unit）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</li>\n<li>GPU：图形处理器（英语：Graphics Processing Unit，缩写：GPU），又称显示核心，做图像和图形相关运算工作的微处理器</li>\n</ul>\n<h3 id=\"卡顿检测\"><a class=\"markdownIt-Anchor\" href=\"#卡顿检测\">#</a> 卡顿检测</h3>\n<p><a href=\"https://blog.csdn.net/lmj623565791/article/details/58626355\">Android UI 性能优化 检测应用中的 UI 卡顿</a></p>\n<p><a href=\"https://www.jianshu.com/p/9e8f88eac490\">Android 性能优化 - 检测 App 卡顿 - 简书 (jianshu.com)</a></p>\n<span id=\"more\"></span>\n<h4 id=\"用ui线程looper打印的日志\"><a class=\"markdownIt-Anchor\" href=\"#用ui线程looper打印的日志\">#</a> 用 UI 线程 Looper 打印的日志</h4>\n<p>开源工具:<br>\n<a href=\"https://github.com/Kyson/AndroidGodEye\">Kyson/AndroidGodEye: An app performance monitor(APM) , like “Android Studio profiler”, you can easily monitor the performance of your app real time in browser (github.com)</a></p>\n<p><a href=\"https://github.com/markzhai/AndroidPerformanceMonitor\">markzhai/AndroidPerformanceMonitor: A transparent ui-block detection library for Android. (known as BlockCanary) </a></p>\n<p><a href=\"https://github.com/BzCoder/BlockCanaryCompat\">BzCoder/BlockCanaryCompat: 卡顿监控，BlockCanary 适配 Android O 以上系统 (github.com)</a></p>\n<h4 id=\"choreographer\"><a class=\"markdownIt-Anchor\" href=\"#choreographer\">#</a> Choreographer</h4>\n<p>Android 系统每隔 16ms 发出 VSYNC 信号，触发对 UI 进行渲染。开发者可以使用 Choreographer#postFrameCallback 设置自己的 callback 与 Choreographer 交互，你设置的 FrameCallCack（doFrame 方法）会在下一个 frame 被渲染时触发。理论上来说两次回调的时间周期应该在 16ms，如果超过了 16ms 我们则认为发生了卡顿，我们主要就是利用两次回调间的时间周期来判断</p>\n<p>开源工具:<br>\n<a href=\"https://github.com/wasabeef/Takt\">wasabeef/Takt: Takt is Android library for measuring the FPS using Choreographer</a></p>\n<p><a href=\"https://github.com/friendlyrobotnyc/TinyDancer\">friendlyrobotnyc/TinyDancer: An android library for displaying fps from the choreographer and percentage of time with two or more frames dropped </a></p>\n<h3 id=\"anr分析\"><a class=\"markdownIt-Anchor\" href=\"#anr分析\">#</a> ANR 分析</h3>\n<blockquote>\n<p>Application Not Responding，也就是应用程序无响应</p>\n</blockquote>\n<h4 id=\"产生原因\"><a class=\"markdownIt-Anchor\" href=\"#产生原因\">#</a> 产生原因</h4>\n<ul>\n<li>InputDispatching Timeout：5 秒内无法响应屏幕触摸事件或键盘输入事件</li>\n<li>BroadcastQueue Timeout ：在执行前台广播（BroadcastReceiver）的 <code>onReceive()</code>  函数时 10 秒没有处理完成，后台为 60 秒</li>\n<li>Service Timeout：前台服务 20 秒内，后台服务在 200 秒内没有执行完毕</li>\n<li>ContentProvider Timeout：ContentProvider 的 publish 在 10s 内没进行完</li>\n<li>其他\n<ul>\n<li>主线程阻塞或主线程数据读取</li>\n<li>CPU 满负荷，I/O 阻塞</li>\n<li>内存不足</li>\n</ul>\n</li>\n</ul>\n<p>分析:</p>\n<ul>\n<li>log 上的 anr reason</li>\n<li>adb 导出 ANR 日志\n<ul>\n<li><code>adb pull /data/anr/traces.txt</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/T8ghe13OAeLx6NBP/",
            "url": "https://onion99.github.io/2021/10/31/T8ghe13OAeLx6NBP/",
            "title": "安卓优化-内存优化",
            "date_published": "2021-10-31T12:46:21.000Z",
            "content_html": "<h3 id=\"内存信息查看\"><a class=\"markdownIt-Anchor\" href=\"#内存信息查看\">#</a> 内存信息查看</h3>\n<p><a href=\"https://www.jianshu.com/p/28b9cd87e667\">App 内存优化实践：一步一步做内存分析与优化</a></p>\n<p>查看每个 App 进程可以分配到的最大内存</p>\n<pre class=\"line-numbers language-undefined\" data-language=\"undefined\"><code class=\"language-undefined\">adb shell getprop | grep dalvik.vm.heapsize<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>App 的内存使用情况概览</p>\n<pre class=\"line-numbers language-undefined\" data-language=\"undefined\"><code class=\"language-undefined\">adb shell dumpsys meminfo 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"优化工具\"><a class=\"markdownIt-Anchor\" href=\"#优化工具\">#</a> 优化工具</h3>\n<ul>\n<li>CPU Profiler</li>\n<li>Memory Analyzer（MAT）</li>\n<li>LeakCannary</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"优化方向\"><a class=\"markdownIt-Anchor\" href=\"#优化方向\">#</a> 优化方向</h3>\n<p><a href=\"https://www.cnblogs.com/wangjie1990/p/11327112.html\">Android 如何优化 APP 内存 </a></p>\n<ul>\n<li>谨慎使用 Services\n<ul>\n<li>启动一个 Service 时， 系统需要始终保持运行该 Service 的进程，该 Service 占用的 RAM 对其他进程不共享</li>\n<li>避免使用持久性服务，如 <code>JobScheduler</code>  之类</li>\n</ul>\n</li>\n<li>使用经过优化的多数据容器\n<ul>\n<li>如 SparseArray，SparseBooleanArray 和 LongSparseArray</li>\n<li>如有必要，您可以随时切换到原始数组以获得精简的数据结构</li>\n</ul>\n</li>\n<li>使用 nano protobufs 进行序列化数据</li>\n<li>避免内存泄漏\n<ul>\n<li>内存泄露会导致大量的垃圾收集事件发生，从而导致系统执行其他内容 (如渲染或者传输) 的时间变少</li>\n</ul>\n</li>\n<li>移除内存密集型资源，以及 lib 库\n<ul>\n<li>减小 APK 的大小</li>\n<li>请使用不进行反射扫描的依赖注入库 (Dagger2), 频繁的反射需要更多的 CPU 和内存消耗</li>\n<li>谨慎使用外部库，外部库可能对同一个功能有不一样的实现，这可能导致预期之外的事情</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/4LlbPfdOOCp58LMK/",
            "url": "https://onion99.github.io/2021/10/31/4LlbPfdOOCp58LMK/",
            "title": "安卓优化-启动优化",
            "date_published": "2021-10-31T12:43:04.000Z",
            "content_html": "<h3 id=\"启动流程\"><a class=\"markdownIt-Anchor\" href=\"#启动流程\">#</a> 启动流程</h3>\n<h4 id=\"相关\"><a class=\"markdownIt-Anchor\" href=\"#相关\">#</a> 相关</h4>\n<blockquote>\n<p>启动的流程就是通过这六个大类在这三个进程之间不断通信的过程</p>\n</blockquote>\n<h5 id=\"三个进程\"><a class=\"markdownIt-Anchor\" href=\"#三个进程\">#</a> 三个进程</h5>\n<ul>\n<li>Launcher 进程：整个 App 启动流程的起点，负责处理桌面与用户之间的交互事件，可以想象为一个桌面启动器</li>\n<li>SystemServer 进程: Android 中的所有 SystemServer 都由其孵化 (Fork) 出来，例如 AMS,WindowsMannager,PackageManagerService 等</li>\n<li>App 进程：启动的 App 所在的进程</li>\n</ul>\n<span id=\"more\"></span>\n<h5 id=\"六个大类\"><a class=\"markdownIt-Anchor\" href=\"#六个大类\">#</a> 六个大类</h5>\n<ul>\n<li>ActivityManagerService:  即 AMS, 负责管理系统中四大组件的启动，切换，调度以及应用进程的管理</li>\n<li>Instrumentation: 监控应用程序和系统的交互</li>\n<li>ActivityThread: 应用的入口类，通过调用 main 方法，开启消息循环队列。ActivityThread 所在的线程被称为主线程</li>\n<li>ApplicationThread: 提供 Binder 通讯接口，AMS 则通过代理调用此 App 进程的本地方法</li>\n<li>ActivityManagerProxy：AMS 服务在当前进程的代理类，负责与 AMS 通信</li>\n<li>ApplicationThreadProxy：ApplicationThread 在 AMS 服务中的代理类，负责与 ApplicationThread 通信</li>\n</ul>\n<h4 id=\"顺序\"><a class=\"markdownIt-Anchor\" href=\"#顺序\">#</a> 顺序</h4>\n<p><a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\">APP 启动流程解析，墙裂推荐</a><br>\n<a href=\"https://www.cnblogs.com/not2/p/14326090.html\"> App 启动速度优化 T2</a><br>\n<a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\"> 具体代码流程</a></p>\n<ol>\n<li>Launcher 通知 AMS, 要启动某一应用，并说明对应的 LauncherActivity</li>\n<li>AMS 表示收到，等待 Launcher 进入 Pause 状态</li>\n<li>Launcher 进入 Pause 状态，通知 AMS 可以启动某一应用了</li>\n<li>AMS 开始检查某一应用是否启动\n<ul>\n<li>是，则直接启动，流程终止</li>\n<li>否，AMS 则在的进程中创建 ActivityThread 对象，并启动 main 函数</li>\n</ul>\n</li>\n<li>某一应用通知 AMS 启动准备就绪</li>\n<li>AMS 通知某一应用要启动的页面，某一应用启动对应页面</li>\n</ol>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57Z1PJ.png\" alt=\"57Z1PJ.png\"></p>\n<h3 id=\"启动分类\"><a class=\"markdownIt-Anchor\" href=\"#启动分类\">#</a> 启动分类</h3>\n<ul>\n<li>冷启动\n<ul>\n<li>耗时最多，优化重点</li>\n<li><img src=\"https://z3.ax1x.com/2021/10/27/57ZxJJ.png\" alt=\"57ZxJJ.png\"></li>\n</ul>\n</li>\n<li>热启动\n<ul>\n<li>最快。即后台到前台的切换</li>\n</ul>\n</li>\n<li>温启动\n<ul>\n<li>较快，只重走 Activity 的生命周期，即销毁后重建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"耗时统计\"><a class=\"markdownIt-Anchor\" href=\"#耗时统计\">#</a> 耗时统计</h3>\n<h4 id=\"systrace\"><a class=\"markdownIt-Anchor\" href=\"#systrace\">#</a> Systrace</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">TraceCompat</span><span class=\"token punctuation\">.</span><span class=\"token function\">beginSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sectionName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">TraceCompat</span><span class=\"token punctuation\">.</span><span class=\"token function\">endSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>python systrace.py -t 10 [other-options] [categories]</code></p>\n<h4 id=\"traceview\"><a class=\"markdownIt-Anchor\" href=\"#traceview\">#</a> Traceview</h4>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57llge.png\" alt=\"57llge.png\"></p>\n<p>使用方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">.</span><span class=\"token function\">startMethodTracing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Debug</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopMethodTracing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>运行之后可以在目录下生成文件：内部存储 /android/data/${application}/files/fileName.trace，此文件可以使用 Android Studio Profile 打开</p>\n<ul>\n<li>Wall Clock time : 是线程真正执行的时间</li>\n<li>Thread time : CPU 执行的时间，比 Wall Clock Time 少，不包含锁时间，等待时间</li>\n<li>Top Down: 就是函数的调用列表</li>\n<li>Call Chart: 系统 Api 黄色，应用调用的方法绿色，第三方 Api (java sdk 也属于第三方) 蓝色</li>\n<li>Flame Chart:  主要的作用是收集调用方法的时间，比如多次调用 LayoutInflate.inflate，Flame Chart 会把他们都收集到一起。</li>\n<li>Bottom Up: 和 Top Down 是相反的</li>\n</ul>\n<h4 id=\"adb-命令统计\"><a class=\"markdownIt-Anchor\" href=\"#adb-命令统计\">#</a> Adb 命令统计</h4>\n<p><code>adb shell am start -S -W 包名/启动类的全限定名</code></p>\n<p>ThisTime : 最后一个 Activity 的启动耗时<br>\n TotalTime : 启动一连串的 Activity 总耗时<br>\n WaitTime : 应用进程的创建过程 + TotalTime</p>\n<h4 id=\"系统日志统计\"><a class=\"markdownIt-Anchor\" href=\"#系统日志统计\">#</a> 系统日志统计</h4>\n<p>过滤 <code>displayed</code>  输出的启动日志</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57mU4e.png\" alt=\"57mU4e.png\"></p>\n<h3 id=\"冷启动优化\"><a class=\"markdownIt-Anchor\" href=\"#冷启动优化\">#</a> 冷启动优化</h3>\n<p><a href=\"https://jishuin.proginn.com/p/763bfbd345f0\"> App 启动时间优化详解</a></p>\n<p>优化方向:</p>\n<ul>\n<li>延迟加载 / 懒加载</li>\n<li>异步线程执行耗时操作，如图片加载、网络访问、IO 操作等</li>\n<li>ViewStub 的使用</li>\n<li>减少布局层次和嵌套布局</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        }
    ]
}