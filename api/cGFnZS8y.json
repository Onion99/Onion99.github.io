{"per_page":9,"total":4,"current":2,"data":[{"title":"Java并发(1) - volatile","date":"2021-11-07T15:50:26.000Z","date_formatted":{"ll":"2021年11月7日","L":"2021/11/07","MM-DD":"11-07"},"excerpt":"<h3 id=\"java内存模型\">JAVA内存模型<a title=\"#java内存模型\" href=\"#java内存模型\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/04/IZ6xs0.png\" alt=\"IZ6xs0.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Java 内存模型规定了所有的变量都存储在主内存中。每条线程有自己的工作内存，线程的工作内存保存了被该线程所使用到的变量（从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成</p>","link":"2021/11/07/VqykJCDZZcenZo3O","tags":["并发"],"categories":["Java"]},{"title":"自定义View(11) - 滚动速度和滚动计算","date":"2021-11-03T22:09:36.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<h3 id=\"velocitytracker\">VelocityTracker<a title=\"#velocitytracker\" href=\"#velocitytracker\"></a></h3>\n<blockquote>\n<p>跟踪手指在滑动过程中的速度，包括水平和竖直方向的速度</p>\n</blockquote>","link":"2021/11/03/cNDSpE5p4avS2tOi","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(10) - GestureDetector","date":"2021-11-03T22:08:39.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<h3 id=\"gesturedetector\">GestureDetector<a title=\"#gesturedetector\" href=\"#gesturedetector\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>监听器</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OnContextClickListener</td>\n<td>这个很容易让人联想到ContextMenu，然而它和ContextMenu并没有什么关系，它是在Android6.0(API 23)才添加的一个选项，是用于检测外部设备上的按钮是否按下的，例如蓝牙触控笔上的按钮，一般情况下，忽略即可。</td>\n</tr>\n<tr>\n<td>OnDoubleTapListener</td>\n<td>双击事件，有三个回调类型：双击(DoubleTap)、单击确认(SingleTapConfirmed) 和 双击事件回调(DoubleTapEvent)</td>\n</tr>\n<tr>\n<td>OnGestureListener</td>\n<td>手势检测，主要有以下类型事件：按下(Down)、 一扔(Fling)、长按(LongPress)、滚动(Scroll)、触摸反馈(ShowPress) 和 单击抬起(SingleTapUp)</td>\n</tr>\n<tr>\n<td>SimpleOnGestureListener</td>\n<td>这个是上述三个接口的空实现，一般情况下使用这个比较多，也比较方便</td>\n</tr>\n</tbody>\n</table></div></div>","link":"2021/11/03/dY7a31QepeVitGkX","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(9) - 事件分发","date":"2021-11-03T22:07:31.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<blockquote>\n<p>事件分发的过程其实也就是事件传递过程。事件传递的顺序由Acticity传递到根View，这个根View 通常是一个ViewGroup(ViewGroup本身也是View的子类)，然后再传递给ViewGroup下的子View, 若事件在自上而下的传递过程中一直没有被消费，则事件会反向向上传递，此时父ViewGroup可以对事件进行消费，若仍然没有被消费的话，最后会回到Activity的onTouchEvent</p>\n</blockquote>\n<p>所以很多时候如果有冲突的话,最先消费的是最底部的子View<br>\n<img src=\"https://z3.ax1x.com/2021/11/03/IE3gqf.png\" alt=\"IE3gqf.png\" loading=\"lazy\"></p>","link":"2021/11/03/z3aQsRLVolBbFVsl","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(8) - draw 绘制过程","date":"2021-11-03T22:03:38.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<blockquote>\n<p>Android 里面的绘制都是按顺序的，先绘制的内容会被后绘制的盖住</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IES7KP.png\" alt=\"IES7KP.png\" loading=\"lazy\" class=\"φbp\"></p>","link":"2021/11/03/p4CRfuQemJ4TOlAs","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(7) - layout 布局过程","date":"2021-11-03T22:02:46.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"viewasds\" loading=\"lazy\" class=\"φbp\"></p>","link":"2021/11/03/ZyOr4iLxJj7nAQxR","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(6) - measure 测量过程","date":"2021-11-03T22:00:58.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"QJQEcR.jpg\" loading=\"lazy\" class=\"φbp\"></p>","link":"2021/11/03/Qj9f1VMJJowv5Lfb","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(5) - 动画","date":"2021-11-03T21:59:44.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<blockquote>\n<p>三者性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，差别只是使用的便捷性以及功能的灵活性。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFf4h9.gif\" alt=\"IFf4h9.gif\" loading=\"lazy\" class=\"φbp\"></p>","link":"2021/11/03/SA664RldODNgeCrz","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(4) - Canvas相关","date":"2021-11-03T21:58:53.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<h3 id=\"范围裁切\">范围裁切<a title=\"#范围裁切\" href=\"#范围裁切\"></a></h3>\n<h4 id=\"cliprect\">clipRect<a title=\"#cliprect\" href=\"#cliprect\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFKTER.png\" alt=\"IFKTER.png\" loading=\"lazy\" class=\"φbp\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipRect</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 加上 Canvas.save() 和 Canvas.restore() 来及时恢复绘制范围</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipRect</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","link":"2021/11/03/ZOnr24kULe7cQgsc","tags":["图形绘制"],"categories":["Android"]}]}