{"title":"Android AOP - ASM+Transform","date":"2022-03-12T09:45:36.000Z","date_formatted":{"ll":"2022年3月12日","L":"2022/03/12","MM-DD":"03-12"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLyIxO.md.png","link":"2022/03/12/Kt2Wobik8Fv12ZRY","comments":true,"tags":["AOP"],"categories":["Android"],"updated":"2022-03-12T01:50:00.000Z","content":"<span id=\"more\"></span>\n<p><img src=\"https://s1.ax1x.com/2022/03/10/bhoW8O.png\" alt=\"bhoW8O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"transform\">Transform<a title=\"#transform\" href=\"#transform\"></a></h3>\n<blockquote>\n<p>Android Gradle Plugin 从 1.5.0 开始支持 Transform API，以允许第三方插件在经过编译的 .class 文件转换为 .dex 文件之前对其进行操纵。</p>\n</blockquote>\n<p>普通编译过程：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bINI8f.png\" alt=\"bINI8f.png\" loading=\"lazy\"><br>\n可以看到Android 构建流程是一套流水线的工作机制，每一个的构建单元接收上一个构建单元的输出，作为输入，再将产品进行输出，<code>com.android.build</code>库提供了<code>Transform</code>的机制，而这个机制是Android 构建系统为了给外部提供一个可以加入自定义构建单元，如拦截某个构建单元的输出，或者加入一些输出等。而这些Transform是在java源码编译完成之后，package之前进行的。<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIZBy8.md.png\" alt=\"bIZBy8.md.png\" loading=\"lazy\"></p>\n<p>在Android Gradle构建系统中，可以通过<code>AppExtension </code>将<code>transform</code>注册到构建系统中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(Project project)</span> </span>&#123;</span><br><span class=\"line\">        AppExtension appExtension = (AppExtension)project.getProperties().get(<span class=\"string\">&quot;android&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 给App编译过程注册transform</span></span><br><span class=\"line\">        appExtension.registerTransform(<span class=\"keyword\">new</span> CustomTransform(), Collections.EMPTY_LIST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"asm\">ASM<a title=\"#asm\" href=\"#asm\"></a></h3>\n<blockquote>\n<p><a href=\"https://asm.ow2.io/\" target=\"_blank\">ASM</a>是一种通用<strong>Java字节码</strong>操作和分析框架。它可以用来修改现有的类，也可以直接以二进制形式动态生成类。</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/11/bI0iSx.png\" alt=\"bI0iSx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>ASM设计了两种API类型解析文件结构：</p>\n<ul>\n<li>Tree API</li>\n<li>基于Visitor API(visitor pattern)，</li>\n</ul>\n<p>让我们以不同的方式处理下吧🤤🤤🤤</p>\n<h4 id=\"tree-api\">Tree API<a title=\"#tree-api\" href=\"#tree-api\"></a></h4>\n<p>Tree API将class的结构读取到内存，构建一个树形结构，然后需要处理Method、Field等元素时，到树形结构中定位到某个元素，进行操作，然后把操作再写入新的class文件。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appExtension: AppExtension = target.extensions.getByType()</span><br><span class=\"line\">        appExtension.registerTransform(TestTransform())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransform</span> : <span class=\"type\">BaseTransform</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isPrint = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isChange = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modifyClass</span><span class=\"params\">(byteArray: <span class=\"type\">ByteArray</span>)</span></span>: ByteArray &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> classReader = ClassReader(byteArray)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> classNode = ClassNode()</span><br><span class=\"line\">        <span class=\"comment\">// 通过传递 ClassReader 解析对应 ClassFile 生成 ClassNode</span></span><br><span class=\"line\">        classReader.accept(classNode, ClassReader.EXPAND_FRAMES)</span><br><span class=\"line\">        <span class=\"comment\">// 打印测试</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrint)&#123;</span><br><span class=\"line\">            isPrint = <span class=\"literal\">false</span></span><br><span class=\"line\">            Log.log(classNode.toString())</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (methodNode <span class=\"keyword\">in</span> classNode.methods) &#123;</span><br><span class=\"line\">                Log.log(<span class=\"string\">&quot;<span class=\"subst\">$&#123;classNode.name&#125;</span> ------&gt;&gt;&gt; <span class=\"variable\">$methodNode</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果文件对classNode有修改的情况下，需要这样处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isChange)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)</span><br><span class=\"line\">            classNode.accept(classWriter)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> classWriter.toByteArray()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInputTypes</span><span class=\"params\">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransformManager.CONTENT_CLASS</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScopes</span><span class=\"params\">()</span></span>: MutableSet&lt;<span class=\"keyword\">in</span> QualifiedContent.Scope&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mutableSetOf(</span><br><span class=\"line\">            QualifiedContent.Scope.PROJECT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到编译的类正被我们打印出来：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIq3id.png\" alt=\"bIq3id.png\" loading=\"lazy\"></p>\n<h4 id=\"visitor-api\">Visitor API<a title=\"#visitor-api\" href=\"#visitor-api\"></a></h4>\n<p>Visitor API则将通过接口的方式，分离读class和写class的逻辑，一般通过一个ClassReader负责读取class字节码，然后ClassReader通过一个ClassVisitor接口，将字节码的每个细节按顺序通过接口的方式，传递给ClassVisitor（你会发现ClassVisitor中有多个visitXXXX接口），这个过程就像ClassReader带着ClassVisitor游览了class字节码的每一个指令。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appExtension: AppExtension = target.extensions.getByType()</span><br><span class=\"line\">        appExtension.registerTransform(TestVisitorTransform())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClassVisitor</span></span>(visitor: ClassVisitor):ClassVisitor(Opcodes.ASM4,visitor)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVisitorTransform</span> : <span class=\"type\">BaseTransform</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isPrint = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isChange = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modifyClass</span><span class=\"params\">(byteArray: <span class=\"type\">ByteArray</span>)</span></span>: ByteArray &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析class文件</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classReader = ClassReader(byteArray)</span><br><span class=\"line\">        <span class=\"comment\">// 将class文件内容写入到ClassWriter中</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classWriter = ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)</span><br><span class=\"line\">        <span class=\"comment\">// 赋予对应的ClassVisitor读写能力</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classVisitor = TestClassVisitor(classWriter)</span><br><span class=\"line\">        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES)</span><br><span class=\"line\">        <span class=\"comment\">// 打印测试</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrint)&#123;</span><br><span class=\"line\">            isPrint = <span class=\"literal\">false</span></span><br><span class=\"line\">            Log.log(classVisitor.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果文件对classNode有修改的情况下，需要这样处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isChange)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> classWriter.toByteArray()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInputTypes</span><span class=\"params\">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransformManager.CONTENT_CLASS</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScopes</span><span class=\"params\">()</span></span>: MutableSet&lt;<span class=\"keyword\">in</span> QualifiedContent.Scope&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mutableSetOf(</span><br><span class=\"line\">            QualifiedContent.Scope.PROJECT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样可以看到编译的类正被我们打印出来：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIvebV.png\" alt=\"bIvebV.png\" loading=\"lazy\"></p>\n<ul>\n<li>ClassReader：负责对 .class 文件进行读取</li>\n<li>ClassVisitor： 负责访问 .class 文件中各个元素</li>\n<li>ClassWriter： 负责对 .class 文件进行写入，将字节码输出为 byte 数组。</li>\n</ul>\n<h3 id=\"字节码了解\">字节码了解<a title=\"#字节码了解\" href=\"#字节码了解\"></a></h3>\n<p><a href=\"https://plugins.jetbrains.com/plugin/14860-asm-bytecode-viewer-support-kotlin\" target=\"_blank\">Android Studio 辅助类转字节码插件：ASM Bytecode Viewer Support Kotlin</a><br>\n<img src=\"https://pic1.zhimg.com/v2-fdd5caeb51dbfb819539611fa9ccbcd4_r.jpg\" alt=\"preview\" loading=\"lazy\"></p>\n<p><a href=\"https://juejin.cn/post/6944517233674551304#heading-5\" target=\"_blank\">字节码结构分析 - 掘金 (juejin.cn)</a><br>\n<a href=\"https://www.jianshu.com/p/92a75a18cbc1\" target=\"_blank\">Java ByteCode - 简书 (jianshu.com)</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/94498015\" target=\"_blank\">史上最通俗易懂的ASM教程 - 知乎 (zhihu.com)</a></p>\n<h3 id=\"自定义gradle插件\">自定义gradle插件<a title=\"#自定义gradle插件\" href=\"#自定义gradle插件\"></a></h3>\n<blockquote>\n<p>Transform和Asm的结合使用需要用到Gradle插件</p>\n</blockquote>\n<p>自定义插件方式：详看<a href=\"https://docs.gradle.org/current/userguide/custom_plugins.html#example_a_build_for_a_custom_plugin\" target=\"_blank\">Developing Custom Gradle Plugins</a></p>\n<ul>\n<li>Build script</li>\n<li><code>buildSrc</code> 项目</li>\n<li>独立项目（Standalone project）</li>\n</ul>\n<h4 id=\"build-script\">Build script<a title=\"#build-script\" href=\"#build-script\"></a></h4>\n<blockquote>\n<p>直接在项目的build.gradle中添加groovy脚本代码并引用。这样插件在构建脚本之外不可见，只能在此模块中使用脚本插件。</p>\n</blockquote>\n<ol>\n<li>简单编写脚本<br>\nbuild.gradle:</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> apply(Project project) &#123;</span><br><span class=\"line\">        project.task(<span class=\"string\">&#x27;hello&#x27;</span>) &#123;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println <span class=\"string\">&#x27;Hello from the GreetingPlugin&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Apply the plugin</span></span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> GreetingPlugin</span><br></pre></td></tr></table></figure>\n<p>跟上面一样，只不过采用新版kts风格<br>\nbuild.gradle.kts</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(project: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        project.task(<span class=\"string\">&quot;hello&quot;</span>) &#123;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Hello from the GreetingPlugin&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Apply the plugin</span></span><br><span class=\"line\">apply&lt;GreetingPlugin&gt;()</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>运行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gradle -q hello</span><br><span class=\"line\">Hello from the GreetingPlugin</span><br></pre></td></tr></table></figure>\n<h4 id=\"buildsrc-项目\">buildSrc 项目<a title=\"#buildsrc-项目\" href=\"#buildsrc-项目\"></a></h4>\n<blockquote>\n<p>将插件的源代码放在rootProjectDir/buildSrc/src/main/groovy目录中，Gradle将负责编译和测试插件，并使其在构建脚本的类路径中可用。该插件每个构建脚本都是可见的。但是它在构建外部不可见即在当前工程的各个模块都可见，但是项目之外不可见</p>\n</blockquote>\n<p>buildSrc是android中一个保留名，是一个专门用来做gradle插件的module，所以这个module的名字必须是buildSrc，此模块下面有一个固定的目录结构src/main/groovy，这个是用来存放真正的脚本文件的。其他的自定义类可以放在这个目录下，也可以放在自建的其他目录下。</p>\n<ol>\n<li>创建<code>buildSrc</code>Module,可以直接创建目录\n<ul>\n<li>在工程根目录下创建目录<code>buildSrc</code></li>\n<li>在buildSrc下创建目录结构 <code>src/main/groovy</code>或者<code>src/main/java</code></li>\n<li>在buildSrc根目录下创建<code> build.gradle</code>或者<code> build.gradle.kts</code></li>\n</ul>\n</li>\n</ol>\n<p>build.gradle.kts:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    `kotlin-dsl`</span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;jvm&quot;</span>) version <span class=\"string\">&quot;1.4.32&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> compileKotlin: KotlinCompile <span class=\"keyword\">by</span> tasks</span><br><span class=\"line\"><span class=\"keyword\">val</span> compileTestKotlin: KotlinCompile <span class=\"keyword\">by</span> tasks</span><br><span class=\"line\">compileKotlin.kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">compileTestKotlin.kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;com.android.tools.build:gradle:4.1.1&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;commons-io:commons-io:2.6&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;commons-codec:commons-codec:1.15&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;org.ow2.asm:asm-commons:9.2&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;org.ow2.asm:asm-tree:9.2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;groovy&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// gradle插件必须的引用</span></span><br><span class=\"line\">    implementation gradleApi()</span><br><span class=\"line\">    implementation localGroovy()</span><br><span class=\"line\">    </span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.android.tools.build:gradle:4.1.1&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// asm依赖</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm:9.2&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm-util:9.2&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm-commons:9.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 指定编译的编码 不然有中文的话会出现  ’编码GBK的不可映射字符‘</span></span><br><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">    options.encoding = <span class=\"string\">&quot;UTF-8&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&#x27;使用utf8编译&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建插件入口TestPlugin</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.onion.plugin.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span>: <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在App Module 中引入,然后Project Build</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.onion.plugin.plugin.TestPlugin</span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> TestPlugin <span class=\"comment\">// 插桩测试</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"插件发布额外学习\">插件发布额外学习<a title=\"#插件发布额外学习\" href=\"#插件发布额外学习\"></a></h4>\n<ul>\n<li><a href=\"https://juejin.cn/post/6887581345384497165\" title=\"https://juejin.cn/post/6887581345384497165\" target=\"_blank\">Android Gradle 插件开发入门指南（一）</a>，讲解Gradle Plugin开发的完整流程</li>\n<li><a href=\"https://juejin.cn/post/6887583351348133895\" title=\"https://juejin.cn/post/6887583351348133895\" target=\"_blank\">Android Gradle 插件开发入门指南（二）</a>，针对Android的Gradle Plugin开发实践</li>\n<li><a href=\"https://juejin.cn/post/6890544619856068616\" title=\"https://juejin.cn/post/6890544619856068616\" target=\"_blank\">Android Gradle 插件开发入门指南（三）</a>，如何将插件发布到jcenter</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"http://quinnchen.cn/2018/09/13/2018-09-13-asm-transform/\" target=\"_blank\">一起玩转Android项目中的字节码 | Quinn Note (quinnchen.cn)</a><br>\n<a href=\"https://www.jianshu.com/p/92a75a18cbc1\" target=\"_blank\">Java ByteCode</a><br>\n<a href=\"https://blog.csdn.net/qq_23992393/article/details/103696976\" target=\"_blank\">ASM + Transform 在android中的使用</a><br>\n<a href=\"https://www.jianshu.com/p/a1e6b3abd789\" target=\"_blank\">ASM</a><br>\n<a href=\"https://juejin.cn/post/6893917892061413389#heading-3\" target=\"_blank\">白话 Android AOP (一) </a><br>\n<a href=\"https://mp.weixin.qq.com/s/YFi6-DrV22X_VVfFbKHNEg\" target=\"_blank\">Android gradle Transform 分析</a></p>\n","prev":{"title":"Android - 多渠道打包","link":"2022/03/13/XJTlmsU39F0XEnje"},"next":{"title":"Android AOP - AspectJ","link":"2022/03/11/3Bhw0wOwpYCE6F8V"},"plink":"https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}