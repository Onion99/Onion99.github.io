{"title":"源码学习-OkHttp","date":"2021-10-31T21:28:18.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"link":"2021/10/31/4SVquTFcR8Wyv4GV","comments":true,"tags":["源码解析"],"categories":["Android"],"updated":"2021-10-31T13:27:51.000Z","content":"<blockquote>\n<p>http的连接本质上是个socket，根据http协议，通过socket包装发送请求并获得返回结果</p>\n</blockquote>\n<p>网路连接库一开始的样子如下代码所示，其实只要符合Http协议的请求，就可以和网络进行交互，类似于OkHttp的网络请求库，帮助开发者方便和屏蔽了Http协议中类似于请求头，重连、合并、代理、返回结果解析等等Http协议细节的应用层实现。</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">val path <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.baidu.com/\"</span>\n        val host <span class=\"token operator\">=</span> <span class=\"token string\">\"www.baidu.com\"</span>\n        <span class=\"token keyword\">var</span> socket<span class=\"token operator\">:</span> <span class=\"token class-name\">Socket</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">var</span> streamWriter<span class=\"token operator\">:</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">var</span> bufferedWriter<span class=\"token operator\">:</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            socket <span class=\"token operator\">=</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n            streamWriter <span class=\"token operator\">=</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            bufferedWriter <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span>streamWriter<span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET $path HTTP/1.1\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host: www.baidu.com\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            val myRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> d <span class=\"token operator\">=</span> it <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">toChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"整体流程\">整体流程<a title=\"#整体流程\" href=\"#整体流程\"></a></h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetExample</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 核网络管理者 - 核心类</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">OkHttpClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 请求搭建</span>\n    <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n      阻塞式execute -> 立即调用请求，并阻塞，直到响应可以处理或出现错误\n      为了避免资源泄漏，调用者应该关闭Response，而Response又会关闭底层的ResponseBody。 //确保响应(和底层响应体)是关闭的\n      注意，传输层的成功(接收HTTP响应代码、报头和正文)不一定表示应用层的成功:响应可能仍然表示不满意的HTTP响应代码，如404或500。\n     */</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">GetExample</span> example <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span> example<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://raw.github.com/square/okhttp/master/README.md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hiy4O.png\" alt=\"5hiy4O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"连接建立\">连接建立<a title=\"#连接建立\" href=\"#连接建立\"></a></h3>\n<p>Volley等很多网络请求框架很多底层都是通过 HTTPURLConnection 来与服务端建立连接的，而 OkHttp 就比较优秀了。因为 HTTP 协议是建立在 TCP/IP 协议基础之上的，底层还是走的 Socket，所以OkHttp 直接使用 Socket 来完成 HTTP 请求。</p>\n<h3 id=\"okhttpclient\">OkHttpClient<a title=\"#okhttpclient\" href=\"#okhttpclient\"></a></h3>\n<p>官方推荐我们使用单例去创建OkHttpClient，重用所有HTTP调用的时候，性能是最佳的， 这是因为每个客户端都拥有自己的连接池和线程池。 重用连接和线程可减少延迟并节省内存。 相反，为每个请求创建一个客户端会浪费空闲池上的资源</p>\n<h3 id=\"request\">Request<a title=\"#request\" href=\"#request\"></a></h3>\n<p>采用Builder的方式进行设计，主要包含了url、method、headers、body和CacheControl组成的各种配置项</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Dispatcher</span> dispatcher<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//分发器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Proxy</span> proxy<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//代理</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Protocol</span><span class=\"token punctuation\">></span></span> protocols<span class=\"token punctuation\">;</span> <span class=\"token comment\">//协议</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConnectionSpec</span><span class=\"token punctuation\">></span></span> connectionSpecs<span class=\"token punctuation\">;</span> <span class=\"token comment\">//传输层版本和连接协议</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">></span></span> interceptors<span class=\"token punctuation\">;</span> <span class=\"token comment\">//拦截器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">></span></span> networkInterceptors<span class=\"token punctuation\">;</span> <span class=\"token comment\">//网络拦截器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ProxySelector</span> proxySelector<span class=\"token punctuation\">;</span> <span class=\"token comment\">//代理选择</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CookieJar</span> cookieJar<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cookie</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Cache</span> cache<span class=\"token punctuation\">;</span> <span class=\"token comment\">//缓存</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">InternalCache</span> internalCache<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//内部缓存</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">SocketFactory</span> socketFactory<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//socket 工厂</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">SSLSocketFactory</span> sslSocketFactory<span class=\"token punctuation\">;</span> <span class=\"token comment\">//安全套接层socket 工厂，用于HTTPS</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CertificateChainCleaner</span> certificateChainCleaner<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 验证确认响应证书 适用 HTTPS 请求连接的主机名。</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">HostnameVerifier</span> hostnameVerifier<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//  主机名字确认</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CertificatePinner</span> certificatePinner<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  证书链</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Authenticator</span> proxyAuthenticator<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//代理身份验证</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Authenticator</span> authenticator<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 本地身份验证</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ConnectionPool</span> connectionPool<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//连接池,复用连接</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Dns</span> dns<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//域名</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> followSslRedirects<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//安全套接层重定向</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> followRedirects<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//本地重定向</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> retryOnConnectionFailure<span class=\"token punctuation\">;</span> <span class=\"token comment\">//重试连接失败</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> connectTimeout<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//连接超时</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> readTimeout<span class=\"token punctuation\">;</span> <span class=\"token comment\">//read 超时</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> writeTimeout<span class=\"token punctuation\">;</span> <span class=\"token comment\">//write 超时 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"call\">Call<a title=\"#call\" href=\"#call\"></a></h3>\n<blockquote>\n<p>一个提供 HTTP 请求执行相关接口的接口类，具体的实现类是 RealCall</p>\n</blockquote>\n<ul>\n<li>可以取消</li>\n<li>此对象表示单个请求/响应对(流),因此不能执行两次</li>\n</ul>\n<h4 id=\"realcall\">RealCall<a title=\"#realcall\" href=\"#realcall\"></a></h4>\n<blockquote>\n<p>OkHttp的应用层和网络层之间的桥梁,包含了网络的连接、请求、响应和流处理整个流程,也是OkHttp中最关键核心的类</p>\n</blockquote>\n<h5 id=\"asynctimeout\">AsyncTimeout<a title=\"#asynctimeout\" href=\"#asynctimeout\"></a></h5>\n<p>此超时用在在后台线程执行超时时执行操作。 使用它来实现本地不支持的超时，例如写入时被阻止的套接字,子类应该覆盖timedOut以在发生超时时采取行动。 此方法将由共享看门狗线程调用，因此不应执行任何长时间运行的操作。 否则，我们可能会面临触发其他超时的风险。<br>\n使用sink和source将此超时应用于流。 返回的值将超时应用于包装流上的每个操作。<br>\n调用者应该在执行可能超时的工作之前调用enter ，然后退出。 exit的返回值表示是否触发了超时。 请注意，对timedOut的调用是异步的，可以在exit之后调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> val timeout <span class=\"token operator\">=</span> object <span class=\"token operator\">:</span> <span class=\"token class-name\">AsyncTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  override fun <span class=\"token function\">timedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token comment\">// 取消请求  </span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>callTimeoutMillis<span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MILLISECONDS<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"execute\">execute<a title=\"#execute\" href=\"#execute\"></a></h5>\n<blockquote>\n<p>同步请求,  马上执行并阻塞直到可以处理响应或出现错误</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * Atomic就是原子性的意思，源码里用了Volatile属性，即能够保证在高并发的情况下只有一个线程能够访问这个属性值\n   * executed 是一个原子变量，一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求,用 compareAndSet(false, true)\n   * 判断多线程状态下，请求是否重新执行：如果值为false，则抛出一个IllegalStateException，并返回调用lazyMessage的结果。\n   */</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Already Executed\"</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 超时计数开始</span>\n  timeout<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 执行请求前处理 -> 栈跟踪，事件回调等等</span>\n  <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调度器开始执行</span>\n    client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">executed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 返回拦截器处理下的响应</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调度器返回完成信号</span>\n    client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"enqueue\">enqueue<a title=\"#enqueue\" href=\"#enqueue\"></a></h5>\n<blockquote>\n<p>异步调度,  将请求放到队列中等到执行</p>\n</blockquote>\n<p>RealCall.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>responseCallback<span class=\"token operator\">:</span> Callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token comment\">// 首先判断当前请求是否已执行，如果已经执行则打印日志，并抛出 IllegalStateException 异常</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Already Executed\"</span> <span class=\"token punctuation\">&#125;</span>  \n  <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token comment\">// 创建一个AsyncCall对象,放进分发器队列中</span>\n  client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token function\">AsyncCall</span><span class=\"token punctuation\">(</span>responseCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回一个对象，该对象包含在执行此方法时创建的堆栈跟踪</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callStackTrace <span class=\"token operator\">=</span> Platform<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStackTraceForCloseable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response.body().close()\"</span><span class=\"token punctuation\">)</span>\n    eventListener<span class=\"token punctuation\">.</span><span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Dispatcher.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token comment\">// https://zhuanlan.zhihu.com/p/261397170</span>\n<span class=\"token comment\">// ArrayDeque -  Java 集合中双端队列的数组实现</span>\n<span class=\"token comment\">// ArrayDeque 几乎没有容量限制，设计为线程不安全的，禁止 null 元素</span>\n<span class=\"token comment\">// ArrayDeque是Deque的实现类，可以作为栈来使用，效率高于Stack；也可以作为队列来使用，效率高于LinkedList。</span>\n<span class=\"token comment\">// ArrayDeque 大多数的额操作都在固定时间内运行，例外情况包括 remove，removeFirstOccurrence，removeLastOccurrence，contains，iterator.remove()，和批量操作，这些将以线性时间运行</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> runningSyncCalls <span class=\"token operator\">=</span> ArrayDeque<span class=\"token operator\">&lt;</span>RealCall<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> AsyncCall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 将请求 AsyncCall 添加到待执行队列</span>\n    readyAsyncCalls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 判断当前请求是否已存在可复用的 hos</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>call<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span>forWebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">val</span> existingCall <span class=\"token operator\">=</span> <span class=\"token function\">findExistingCallWithHost</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingCall <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">reuseCallsPerHostFrom</span><span class=\"token punctuation\">(</span>existingCall<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 将符合条件的Call从readyAsyncCalls 提升到runningAsyncCalls并在执行它们</span>\n  <span class=\"token function\">promoteAndExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RealCall.AsyncCall</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 给当前AsyncCall异步线程设置名称</span>\n    <span class=\"token function\">threadName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OkHttp <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span><span class=\"token function\">redactedUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> signalledCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      timeout<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取请求结果</span>\n        <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        signalledCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token comment\">// 触发相应回调</span>\n        responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signalledCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// Do not signal the callback twice!</span>\n          Platform<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callback failure for <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span><span class=\"token function\">toLoggableString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">,</span> Platform<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>signalledCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">val</span> canceledException <span class=\"token operator\">=</span> <span class=\"token function\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canceled due to <span class=\"token interpolation variable\">$t</span>\"</span><span class=\"token punctuation\">)</span>\n          canceledException<span class=\"token punctuation\">.</span><span class=\"token function\">addSuppressed</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n          responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> canceledException<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">throw</span> t\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 关闭请求</span>\n        client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"dispatcher(分发器)\">Dispatcher(分发器)<a title=\"#dispatcher(分发器)\" href=\"#dispatcher(分发器)\"></a></h3>\n<blockquote>\n<p>用于管理其对应 OkHttpClient 的所有请求,对Call进行统一的控制，例如结束所有请求、获取线程池等等</p>\n</blockquote>\n<ul>\n<li>readyAsyncCalls：一个新的异步请求首先会被加入该队列中</li>\n<li>runningAsyncCalls：当前正在运行中的异步请求</li>\n<li>runningSyncCalls：当前正在运行的同步请求</li>\n</ul>\n<p>异步请求跟同步请求一样,最终都会调用到<code>getResponseWithInterceptorChain()</code></p>\n<h3 id=\"interceptor(拦截器)\">Interceptor(拦截器)<a title=\"#interceptor(拦截器)\" href=\"#interceptor(拦截器)\"></a></h3>\n<blockquote>\n<p>Interceptor 接口作为一个拦截器的抽象概念，被设计为责任链上的单位节点，用于观察、拦截、处理请求等，例如添加 Header、重定向、数据处理等等。<br>\nInterceptor 之间互相独立，每个 Interceptor 只负责自己关注的任务，不与其他 Interceptor 接触。</p>\n</blockquote>\n<p>RealCall.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Throws</span><span class=\"token punctuation\">(</span>IOException<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// TODO: 2021/8/13 okhttp的核心是拦截器，而拦截器所采用的设计模式是责任链设计，即每个拦截器只处理与自己相关的业务逻辑 https://zhuanlan.zhihu.com/p/340090732</span>\n  <span class=\"token comment\">// 构建整个网络请求拦截</span>\n  <span class=\"token keyword\">val</span> interceptors <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Interceptor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加Client的拦截器</span>\n  interceptors <span class=\"token operator\">+=</span> client<span class=\"token punctuation\">.</span>interceptors\n  <span class=\"token comment\">// 添加失败重连的拦截器</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">RetryAndFollowUpInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加请求桥梁拦截器 - 在对用户的请求头部加了一些信息，然后在获取到的响应中也做了一些处理。而这些处理对用户是透明的，减少了客户请求的工作</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">BridgeInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>cookieJar<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加缓存拦截器 - 理来自缓存的请求并将响应写入缓存。</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">CacheInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加请求中拦截器 - 打开与目标服务器的连接并继续下一个拦截器。 网络可能用于返回的响应，或使用条件 GET 验证缓存的响应</span>\n  interceptors <span class=\"token operator\">+=</span> ConnectInterceptor\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>forWebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    interceptors <span class=\"token operator\">+=</span> client<span class=\"token punctuation\">.</span>networkInterceptors\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 这是链中的最后一个拦截器。 它对服务器进行网络调用,真正的网络请求从这里开始</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">CallServerInterceptor</span><span class=\"token punctuation\">(</span>forWebSocket<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 构建网络请求链 - 一个具体的拦截器链，承载着整个拦截器链：所有应用程序拦截器、OkHttp核心、所有网络拦截器，最后是网络调用者。</span>\n  <span class=\"token keyword\">val</span> chain <span class=\"token operator\">=</span> <span class=\"token function\">RealInterceptorChain</span><span class=\"token punctuation\">(</span>\n      call <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n      interceptors <span class=\"token operator\">=</span> interceptors<span class=\"token punctuation\">,</span>\n      index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      exchange <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      request <span class=\"token operator\">=</span> originalRequest<span class=\"token punctuation\">,</span>\n      connectTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>connectTimeoutMillis<span class=\"token punctuation\">,</span>\n      readTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>readTimeoutMillis<span class=\"token punctuation\">,</span>\n      writeTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>writeTimeoutMillis\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> calledNoMoreExchanges <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>originalRequest<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 是否取消请求</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCanceled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">closeQuietly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Canceled\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> response\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    calledNoMoreExchanges <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">noMoreExchanges</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Throwable\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>calledNoMoreExchanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">noMoreExchanges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RealInterceptorChain.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Throws</span><span class=\"token punctuation\">(</span>IOException<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 判断拦截器是否为空</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> interceptors<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 请求数加1</span>\n  calls<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exchange <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span>finder<span class=\"token punctuation\">.</span><span class=\"token function\">sameHostAndPort</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>interceptors<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">&#125;</span></span> must retain the same host and port\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>calls <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>interceptors<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">&#125;</span></span> must call proceed() exactly once\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// Call the next interceptor in the chain. 调用链中的下一个拦截器</span>\n  <span class=\"token keyword\">val</span> next <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> request <span class=\"token operator\">=</span> request<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 获取当前的拦截器</span>\n  <span class=\"token keyword\">val</span> interceptor <span class=\"token operator\">=</span> interceptors<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 开始一个个的执行每一个拦截器，每个拦截器的intercept都会调到 当前类的proceed ，直至最后一个CallServerInterceptor执行完</span>\n  <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USELESS_ELVIS\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"interceptor <span class=\"token interpolation variable\">$interceptor</span> returned null\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exchange <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> interceptors<span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> next<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation variable\">$interceptor</span> must call proceed() exactly once\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"interceptor <span class=\"token interpolation variable\">$interceptor</span> returned a response with no body\"</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"chain\">Chain<a title=\"#chain\" href=\"#chain\"></a></h4>\n<blockquote>\n<p>Interceptor 与 Chain 彼此互相依赖，互相调用，共同发展，形成了一个完美的调用链</p>\n</blockquote>\n<p>Chain 被用来描述责任链，通过其中的 process 方法开始依次执行链上的每个节点，并返回处理后的 Response。<br>\nChain 的唯一实现为 RealInterceptorChain（下文简称 RIC），RIC 可以称之为<strong>拦截器责任链</strong>，其中的节点由 RealCall 中添加进来的 Interceptor 们组成。由于 Interceptor 的互相独立性，RIC 中还会包含一些公共参数及共享的对象。</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hbpJx.png\" alt=\"5hbpJx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"about\">About<a title=\"#about\" href=\"#about\"></a></h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/116777864\" target=\"_blank\">OkHttp源码深度解析</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/104813091\" target=\"_blank\">OkHttp源码解析</a><br>\n<a href=\"https://juejin.cn/post/7020027832977850381\" target=\"_blank\">OkHttp源码原理</a></p>\n","prev":{"title":"源码学习-Glide","link":"2021/10/31/15jfHwStpctgCeeA"},"next":{"title":"安卓优化-布局优化","link":"2021/10/31/5FIszA6Ut2OHE8Sg"},"plink":"https://onion99.github.io/2021/10/31/4SVquTFcR8Wyv4GV/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}