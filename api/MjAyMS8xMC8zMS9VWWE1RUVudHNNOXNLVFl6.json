{"title":"安卓优化-卡顿优化","date":"2021-10-31T20:47:12.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"link":"2021/10/31/UYa5EEntsM9sKTYz","comments":true,"tags":["性能优化"],"categories":["Android"],"updated":"2021-10-31T12:46:51.000Z","content":"<blockquote>\n<p>卡顿产生的根本原因就是CPU和GPU没有及时处理好数据，针对卡顿的优化就有思路了：尽可能减少 CPU 和 GPU 资源的消耗</p>\n</blockquote>\n<ul>\n<li>CPU：中央处理器（CPU，central processing unit）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</li>\n<li>GPU：图形处理器（英语：Graphics Processing Unit，缩写：GPU），又称显示核心,做图像和图形相关运算工作的微处理器</li>\n</ul>\n<h3 id=\"卡顿检测\">卡顿检测<a title=\"#卡顿检测\" href=\"#卡顿检测\"></a></h3>\n<p><a href=\"https://blog.csdn.net/lmj623565791/article/details/58626355\" target=\"_blank\">Android UI性能优化 检测应用中的UI卡顿</a></p>\n<p><a href=\"https://www.jianshu.com/p/9e8f88eac490\" target=\"_blank\">Android性能优化-检测App卡顿 - 简书 (jianshu.com)</a></p>\n<span id=\"more\"></span>\n<h4 id=\"用ui线程looper打印的日志\">用UI线程Looper打印的日志<a title=\"#用ui线程looper打印的日志\" href=\"#用ui线程looper打印的日志\"></a></h4>\n<p>开源工具:<br>\n<a href=\"https://github.com/Kyson/AndroidGodEye\" target=\"_blank\">Kyson/AndroidGodEye: An app performance monitor(APM) , like “Android Studio profiler”, you can easily monitor the performance of your app real time in browser (github.com)</a></p>\n<p><a href=\"https://github.com/markzhai/AndroidPerformanceMonitor\" target=\"_blank\">markzhai/AndroidPerformanceMonitor: A transparent ui-block detection library for Android. (known as BlockCanary) </a></p>\n<p><a href=\"https://github.com/BzCoder/BlockCanaryCompat\" target=\"_blank\">BzCoder/BlockCanaryCompat: 卡顿监控，BlockCanary 适配Android O 以上系统 (github.com)</a></p>\n<h4 id=\"choreographer\">Choreographer<a title=\"#choreographer\" href=\"#choreographer\"></a></h4>\n<p>Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染。开发者可以使用Choreographer#postFrameCallback设置自己的callback与Choreographer交互，你设置的FrameCallCack（doFrame方法）会在下一个frame被渲染时触发。理论上来说两次回调的时间周期应该在16ms，如果超过了16ms我们则认为发生了卡顿，我们主要就是利用两次回调间的时间周期来判断</p>\n<p>开源工具:<br>\n<a href=\"https://github.com/wasabeef/Takt\" target=\"_blank\">wasabeef/Takt: Takt is Android library for measuring the FPS using Choreographer</a></p>\n<p><a href=\"https://github.com/friendlyrobotnyc/TinyDancer\" target=\"_blank\">friendlyrobotnyc/TinyDancer: An android library for displaying fps from the choreographer and percentage of time with two or more frames dropped </a></p>\n<h3 id=\"anr分析\">ANR分析<a title=\"#anr分析\" href=\"#anr分析\"></a></h3>\n<blockquote>\n<p>Application Not Responding，也就是应用程序无响应</p>\n</blockquote>\n<h4 id=\"产生原因\">产生原因<a title=\"#产生原因\" href=\"#产生原因\"></a></h4>\n<ul>\n<li>InputDispatching Timeout：5秒内无法响应屏幕触摸事件或键盘输入事件</li>\n<li>BroadcastQueue Timeout ：在执行前台广播（BroadcastReceiver）的<code>onReceive()</code>函数时10秒没有处理完成，后台为60秒</li>\n<li>Service Timeout：前台服务20秒内，后台服务在200秒内没有执行完毕</li>\n<li>ContentProvider Timeout：ContentProvider的publish在10s内没进行完</li>\n<li>其他\n<ul>\n<li>主线程阻塞或主线程数据读取</li>\n<li>CPU满负荷，I/O阻塞</li>\n<li>内存不足</li>\n</ul>\n</li>\n</ul>\n<p>分析:</p>\n<ul>\n<li>log上的anr reason</li>\n<li>adb 导出ANR日志\n<ul>\n<li><code>adb pull /data/anr/traces.txt</code></li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"安卓优化-包体积","link":"2021/10/31/9LsQhIFgDkllFt0Q"},"next":{"title":"安卓优化-内存优化","link":"2021/10/31/T8ghe13OAeLx6NBP"},"plink":"https://onion99.github.io/2021/10/31/UYa5EEntsM9sKTYz/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}