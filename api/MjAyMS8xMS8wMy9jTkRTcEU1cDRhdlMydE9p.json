{"title":"自定义View(11) - 滚动速度和滚动计算","date":"2021-11-03T22:09:36.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"link":"2021/11/03/cNDSpE5p4avS2tOi","comments":true,"tags":["图形绘制"],"categories":["Android"],"updated":"2021-11-03T14:09:07.000Z","content":"<h3 id=\"velocitytracker\">VelocityTracker<a title=\"#velocitytracker\" href=\"#velocitytracker\"></a></h3>\n<blockquote>\n<p>跟踪手指在滑动过程中的速度，包括水平和竖直方向的速度</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTrackerTestView</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> <span class=\"token class-name\">Context</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> attrs<span class=\"token operator\">:</span> <span class=\"token class-name\">AttributeSet</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1、创建实例</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mVelocityTracker <span class=\"token operator\">=</span> <span class=\"token class-name\">VelocityTracker</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@SuppressLint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ClickableViewAccessibility\"</span><span class=\"token punctuation\">)</span>\n    override fun <span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Boolean</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//2、重置</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//3、开始追踪</span>\n        mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">addMovement</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n \n        when <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>actionMasked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_MOVE <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//o...</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_UP <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//速度 = （ 终点位置(px) - 起点位置(px) ）/ 时间段(ms)</span>\n                <span class=\"token comment\">//4、设置时间段</span>\n                mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">computeCurrentVelocity</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//5、获取x方向、y方向的速度</span>\n                <span class=\"token comment\">//其中getXVelocity、getYVelocity方法的参数是pointerId，用于多指触控。不考虑多指时，可以不用传参数</span>\n                <span class=\"token keyword\">var</span> xVelocity <span class=\"token operator\">=</span> mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">getXVelocity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">var</span> yVelocity <span class=\"token operator\">=</span> mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">getYVelocity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    override fun <span class=\"token function\">onDetachedFromWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//6、当不需要使用时，重置并回收内存</span>\n        mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDetachedFromWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>VelocityTracker 一般用来判断当前是否达到一定的滑动速度来触发 Fling 的效果，这个滑动速度我们可以自己设置，也可以通过系统提供的来获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mViewConfiguration <span class=\"token operator\">:</span> <span class=\"token class-name\">ViewConfiguration</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">ViewConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mMaxFlingVelocity <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">//触发fling的速度</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mMinFlingVelocity <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\ninit <span class=\"token punctuation\">&#123;</span>\n    mMaxFlingVelocity <span class=\"token operator\">=</span> mViewConfiguration<span class=\"token punctuation\">.</span>scaledMaximumFlingVelocity\n    mMinFlingVelocity <span class=\"token operator\">=</span> mViewConfiguration<span class=\"token punctuation\">.</span>scaledMinimumFlingVelocity\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"scroller\">Scroller<a title=\"#scroller\" href=\"#scroller\"></a></h3>\n<p>在 View 类里面，有两个和滚动相关的类 scrollTo() 和 scrollBy。这两个方法可以实现 View 内容的移动，比如说一个 TextView，如果使用 scrollTo()，那么移动的是里面的文字而不是位置，scrollBy() 也是一样的。那么为什么是移动，不是滚动呢？这是因为这两个方法都是瞬间完成，而不是带有滚动过程的滚动，所以说如果要实现效果比较好的滚动还是需要 Scroller</p>\n<p>常用API:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">computeScrollOffset()</td>\n<td style=\"text-align:center\">判断当前的滑动动作是否完成的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getCurrX()、getCurrY()</td>\n<td style=\"text-align:center\">获取当前滑动的坐标值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getFinalX()、getFinalY()</td>\n<td style=\"text-align:center\">获取最终滑动停止时的坐标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isFinished()</td>\n<td style=\"text-align:center\">用来判断当前滚动是否结束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">startScroll(int startX, int startY, int dx, int dy)</td>\n<td style=\"text-align:center\">用来开始滚动，这个是很重要的一个触发computeScroll()的方法，调用这个方法之后，我们就可以在computeScroll里面获取滚动的信息，然后完成我们的需要。这个还有一个带有滚动持续时间的重载函数，可以根据需求自由使用。特别要注意这四个参数，startX和startY是开始的坐标位置，正数左上，负数右下，dx、dy同理，当在computeScroll()获取getCurrX()的时候，变化范围就与这里地设置有关。</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"overscroller\">OverScroller<a title=\"#overscroller\" href=\"#overscroller\"></a></h3>\n<blockquote>\n<p>对超出滑动边界的情况的处理</p>\n</blockquote>\n","prev":{"title":"Java并发(1) - volatile","link":"2021/11/07/VqykJCDZZcenZo3O"},"next":{"title":"自定义View(10) - GestureDetector","link":"2021/11/03/dY7a31QepeVitGkX"},"plink":"https://onion99.github.io/2021/11/03/cNDSpE5p4avS2tOi/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}