{"title":"安卓优化-启动优化","date":"2021-10-31T20:43:04.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"link":"2021/10/31/4LlbPfdOOCp58LMK","comments":true,"tags":["性能优化"],"categories":["Android"],"updated":"2021-10-31T12:40:57.000Z","content":"<h3 id=\"启动流程\">启动流程<a title=\"#启动流程\" href=\"#启动流程\"></a></h3>\n<h4 id=\"相关\">相关<a title=\"#相关\" href=\"#相关\"></a></h4>\n<blockquote>\n<p>启动的流程就是通过这六个大类在这三个进程之间不断通信的过程</p>\n</blockquote>\n<h5 id=\"三个进程\">三个进程<a title=\"#三个进程\" href=\"#三个进程\"></a></h5>\n<ul>\n<li>Launcher进程: 整个App启动流程的起点,负责处理桌面与用户之间的交互事件,可以想象为一个桌面启动器</li>\n<li>SystemServer进程: Android中的所有SystemServer都由其孵化(Fork)出来,例如AMS,WindowsMannager,PackageManagerService等</li>\n<li>App进程: 启动的App所在的进程</li>\n</ul>\n<span id=\"more\"></span>\n<h5 id=\"六个大类\">六个大类<a title=\"#六个大类\" href=\"#六个大类\"></a></h5>\n<ul>\n<li>ActivityManagerService:  即AMS,负责管理系统中四大组件的启动,切换,调度以及应用进程的管理</li>\n<li>Instrumentation: 监控应用程序和系统的交互</li>\n<li>ActivityThread: 应用的入口类，通过调用main方法，开启消息循环队列。ActivityThread所在的线程被称为主线程</li>\n<li>ApplicationThread: 提供Binder通讯接口，AMS则通过代理调用此App进程的本地方法</li>\n<li>ActivityManagerProxy：AMS服务在当前进程的代理类，负责与AMS通信</li>\n<li>ApplicationThreadProxy：ApplicationThread在AMS服务中的代理类，负责与ApplicationThread通信</li>\n</ul>\n<h4 id=\"顺序\">顺序<a title=\"#顺序\" href=\"#顺序\"></a></h4>\n<p><a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\" target=\"_blank\">APP启动流程解析,墙裂推荐</a><br>\n<a href=\"https://www.cnblogs.com/not2/p/14326090.html\" target=\"_blank\">App启动速度优化 T2</a><br>\n<a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\" target=\"_blank\">具体代码流程</a></p>\n<ol>\n<li>Launcher通知AMS, 要启动某一应用,并说明对应的LauncherActivity</li>\n<li>AMS表示收到, 等待Launcher进入Pause状态</li>\n<li>Launcher进入Pause状态, 通知AMS可以启动某一应用了</li>\n<li>AMS开始检查某一应用是否启动\n<ul>\n<li>是,则直接启动,流程终止</li>\n<li>否,AMS则在的进程中创建ActivityThread对象,并启动main函数</li>\n</ul>\n</li>\n<li>某一应用通知AMS启动准备就绪</li>\n<li>AMS通知某一应用要启动的页面,某一应用启动对应页面</li>\n</ol>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57Z1PJ.png\" alt=\"57Z1PJ.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"启动分类\">启动分类<a title=\"#启动分类\" href=\"#启动分类\"></a></h3>\n<ul>\n<li>冷启动\n<ul>\n<li>耗时最多,优化重点</li>\n<li><img src=\"https://z3.ax1x.com/2021/10/27/57ZxJJ.png\" alt=\"57ZxJJ.png\" loading=\"lazy\" class=\"φbp\"></li>\n</ul>\n</li>\n<li>热启动\n<ul>\n<li>最快.即后台到前台的切换</li>\n</ul>\n</li>\n<li>温启动\n<ul>\n<li>较快,只重走Activity的生命周期,即销毁后重建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"耗时统计\">耗时统计<a title=\"#耗时统计\" href=\"#耗时统计\"></a></h3>\n<h4 id=\"systrace\">Systrace<a title=\"#systrace\" href=\"#systrace\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TraceCompat.beginSection(<span class=\"string\">&quot;sectionName&quot;</span>)</span><br><span class=\"line\">TraceCompat.endSection();</span><br></pre></td></tr></table></figure>\n<p><code>python systrace.py -t 10 [other-options] [categories]</code></p>\n<h4 id=\"traceview\">Traceview<a title=\"#traceview\" href=\"#traceview\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57llge.png\" alt=\"57llge.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Debug.startMethodTracing(<span class=\"string\">&quot;fileName&quot;</span>)</span><br><span class=\"line\">Debug.stopMethodTracing()</span><br></pre></td></tr></table></figure>\n<p>运行之后可以在目录下生成文件：内部存储/android/data/${application}/files/fileName.trace，此文件可以使用Android Studio Profile打开</p>\n<ul>\n<li>Wall Clock time : 是线程真正执行的时间</li>\n<li>Thread time : CPU执行的时间,比Wall Clock Time少,不包含锁时间,等待时间</li>\n<li>Top Down:就是函数的调用列表</li>\n<li>Call Chart: 系统Api黄色，应用调用的方法绿色，第三方Api(java sdk也属于第三方)蓝色</li>\n<li>Flame Chart:  主要的作用是收集调用方法的时间，比如多次调用LayoutInflate.inflate，Flame Chart会把他们都收集到一起。</li>\n<li>Bottom Up: 和Top Down是相反的</li>\n</ul>\n<h4 id=\"adb-命令统计\">Adb 命令统计<a title=\"#adb-命令统计\" href=\"#adb-命令统计\"></a></h4>\n<p><code>adb shell am start -S -W 包名/启动类的全限定名</code></p>\n<p>ThisTime : 最后一个 Activity 的启动耗时<br>\nTotalTime : 启动一连串的 Activity 总耗时<br>\nWaitTime : 应用进程的创建过程 + TotalTime</p>\n<h4 id=\"系统日志统计\">系统日志统计<a title=\"#系统日志统计\" href=\"#系统日志统计\"></a></h4>\n<p>过滤<code>displayed</code>输出的启动日志</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57mU4e.png\" alt=\"57mU4e.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"冷启动优化\">冷启动优化<a title=\"#冷启动优化\" href=\"#冷启动优化\"></a></h3>\n<p><a href=\"https://jishuin.proginn.com/p/763bfbd345f0\" target=\"_blank\"> App 启动时间优化详解</a></p>\n<p>优化方向:</p>\n<ul>\n<li>延迟加载 / 懒加载</li>\n<li>异步线程执行耗时操作，如图片加载、网络访问、IO操作等</li>\n<li>ViewStub的使用</li>\n<li>减少布局层次和嵌套布局</li>\n</ul>\n","prev":{"title":"安卓优化-内存优化","link":"2021/10/31/T8ghe13OAeLx6NBP"},"plink":"https://onion99.github.io/2021/10/31/4LlbPfdOOCp58LMK/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}