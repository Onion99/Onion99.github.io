{"title":"Android AOP - JDK动态代理","date":"2022-03-10T21:25:00.000Z","date_formatted":{"ll":"2022年3月10日","L":"2022/03/10","MM-DD":"03-10"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLrVJK.md.png","link":"2022/03/10/qyGiQE7cKbQOfEKm","comments":true,"tags":["AOP"],"categories":["Android"],"updated":"2022-03-10T13:27:23.000Z","content":"<p>JDK的动态代理底层是通过Java反射机制实现的，并且需要目标对象继承自一个接口才能生成它的代理类</p>\n<span id=\"more\"></span>\n<h4 id=\"java动态代理\">Java动态代理<a title=\"#java动态代理\" href=\"#java动态代理\"></a></h4>\n<blockquote>\n<p>JDK 运行期间，动态创建 class 字节码并加载到 JVM</p>\n</blockquote>\n<ol>\n<li>JDK的动态代理需要实现一个处理方法调用的Handler，用于实现代理方法的内部逻辑，实现InvocationHandler接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JdkProxyHandler</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// proxy：生成的代理对象, obj：目标方法, args：目标方法参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理前&quot;</span>);</span><br><span class=\"line\">        Object result = method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理后&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>代理</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">send</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2-2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sending msg&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2-3</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJdkProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ISender sender = (ISender) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Class[]&#123;ISender.class&#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> JdkProxyHandler(<span class=\"keyword\">new</span> SmsSender()));</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = sender.send();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;代理对象：&quot;</span> + sender.getClass().getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;输出结果：&quot;</span> + result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通 过 JDK 的 java.lang.reflect.Proxy 类实现动态代理 ， 会使用其静态方法newProxyInstance()，依据目标对象、业务接口及调用处理器三者，自动生成一个动态代理对象。</p>\n<p><code>public static newProxyInstance ( ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</code></p>\n<ul>\n<li>loader：目标类的类加载器，通过目标对象的反射可获取</li>\n<li>interfaces：目标类实现的接口数组，通过目标对象的反射可获取</li>\n<li>handler：调用处理器。</li>\n</ul>\n<h5 id=\"原理\">原理<a title=\"#原理\" href=\"#原理\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.检查</span></span><br><span class=\"line\">    Objects.requireNonNull(h);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//查找或生成指定的代理类</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通过反射创建代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">            AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        Throwable t = e.getCause();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"局限性\">局限性<a title=\"#局限性\" href=\"#局限性\"></a></h3>\n<p>只能代理接口，并且只能修改接口声明的方法</p>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jb51.net/article/209607.htm\" target=\"_blank\">Java动态代理四种实现方式详解</a><br>\n<a href=\"https://www.cnblogs.com/wkfvawl/p/15030814.html\" target=\"_blank\">Java 动态代理 - 王陸</a></p>\n","prev":{"title":"Android AOP - AspectJ","link":"2022/03/11/3Bhw0wOwpYCE6F8V"},"next":{"title":"Android AOP - 概论","link":"2022/03/10/9rnRdFk7xf4rnvds"},"plink":"https://onion99.github.io/2022/03/10/qyGiQE7cKbQOfEKm/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}