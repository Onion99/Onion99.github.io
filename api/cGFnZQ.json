{"per_page":9,"total":5,"current":1,"data":[{"title":"Android - 多渠道打包","date":"2022-03-13T09:49:49.000Z","date_formatted":{"ll":"2022年3月13日","L":"2022/03/13","MM-DD":"03-13"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bL6CLQ.md.png","excerpt":"<blockquote>\n<p>本质就是给APK添加特定的标签信息</p>\n</blockquote>","link":"2022/03/13/XJTlmsU39F0XEnje","categories":["Android"]},{"title":"Android AOP - ASM+Transform","date":"2022-03-12T09:45:36.000Z","date_formatted":{"ll":"2022年3月12日","L":"2022/03/12","MM-DD":"03-12"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLyIxO.md.png","excerpt":"","link":"2022/03/12/Kt2Wobik8Fv12ZRY","tags":["AOP"],"categories":["Android"]},{"title":"Android AOP - AspectJ","date":"2022-03-11T09:40:38.000Z","date_formatted":{"ll":"2022年3月11日","L":"2022/03/11","MM-DD":"03-11"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLyk8K.md.png","excerpt":"<blockquote>\n<p>AspectJ通过注解的形式来标注切入点、切入对象等，然后在代码编译期间将代码织入到java的字节码中</p>\n</blockquote>","link":"2022/03/11/3Bhw0wOwpYCE6F8V","tags":["AOP"],"categories":["Android"]},{"title":"Android AOP - JDK动态代理","date":"2022-03-10T21:25:00.000Z","date_formatted":{"ll":"2022年3月10日","L":"2022/03/10","MM-DD":"03-10"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLrVJK.md.png","excerpt":"<p>JDK的动态代理底层是通过Java反射机制实现的，并且需要目标对象继承自一个接口才能生成它的代理类</p>","link":"2022/03/10/qyGiQE7cKbQOfEKm","tags":["AOP"],"categories":["Android"]},{"title":"Android AOP - 概论","date":"2022-03-10T09:26:27.000Z","date_formatted":{"ll":"2022年3月10日","L":"2022/03/10","MM-DD":"03-10"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLD5RS.md.png","excerpt":"<h3 id=\"编程架构思想\">编程架构思想<a title=\"#编程架构思想\" href=\"#编程架构思想\"></a></h3>\n<ul>\n<li>\n<p>面向对象(Object Oriented Programming)</p>\n</li>\n<li>\n<p>面向过程(Procedure Oriented Programming)</p>\n</li>\n<li>\n<p>面向切面(Aspect Oriented Programming)</p>\n</li>\n</ul>","link":"2022/03/10/9rnRdFk7xf4rnvds","tags":["AOP"],"categories":["Android"]},{"title":"Android-动态化方案探索","date":"2022-03-09T09:21:31.000Z","date_formatted":{"ll":"2022年3月9日","L":"2022/03/09","MM-DD":"03-09"},"excerpt":"","link":"2022/03/09/wkROkqAosRBXidma","categories":["Android"]},{"title":"Android - 组件化","date":"2022-03-08T09:17:11.000Z","date_formatted":{"ll":"2022年3月8日","L":"2022/03/08","MM-DD":"03-08"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLBAmR.md.png","excerpt":"<blockquote>\n<p>组件是可拆除的就表示组件与组件之间是不会耦合的。 组件化就是需要去拆分出组件和实现组件之间通信的过程</p>\n</blockquote>\n<p>项目发展到一定程度，随着人员的增多，代码越来越臃肿，这时候就必须进行模块化的拆分。模块化是一种指导理念，其核心思想就是分而治之、降低耦合最终目的方便项目开发更加流畅，分工更加明确。同时业务线只需要依赖自己的模块无需引入其他业务模块从而可以加快编译速度</p>","link":"2022/03/08/r2WB7zoGFwDaiwmB","categories":["Android"]},{"title":"Android黑科技 - 插件化","date":"2022-03-07T22:46:11.000Z","date_formatted":{"ll":"2022年3月7日","L":"2022/03/07","MM-DD":"03-07"},"thumbnail":"https://s1.ax1x.com/2022/03/07/b60yFg.md.png","excerpt":"<p>插件化技术最初源于免安装运行apk的想法，这个免安装的apk可以理解为插件。支持插件化的app可以在运行时加载和运行插件，这样便可以将app中一些不常用的功能模块做成插件，一方面减小了安装包的大小，另一方面可以实现app功能的动态扩展。</p>\n<p>想要实现插件化，主要是解决下面三个问题：</p>\n<ul>\n<li>插件中代码的加载和与主工程的互相调用</li>\n<li>插件中资源的加载和与主工程的互相访问</li>\n<li>四大组件生命周期的管理</li>\n</ul>","link":"2022/03/07/yriIudTcpjYyMHli","tags":["黑科技"],"categories":["Android"]},{"title":"Android黑科技 - 热修复","date":"2022-03-07T22:38:05.000Z","date_formatted":{"ll":"2022年3月7日","L":"2022/03/07","MM-DD":"03-07"},"thumbnail":"https://s1.ax1x.com/2022/03/07/b6wtK0.md.png","excerpt":"<blockquote>\n<p>热修复本质就是将错误的代码替换成正确的代码,但这里的替换不是改写原有的代码,而是提供一份新的正确的代码,让应用运行时绕过错误的代码,从而执行正确的代码</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/06/bDtcIx.png\" alt=\"bDtcIx.png\" loading=\"lazy\" class=\"φbp\"></p>","link":"2022/03/07/phzbEh3JEzAC0XwD","tags":["黑科技"],"categories":["Android"]}]}