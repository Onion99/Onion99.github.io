{"title":"自定义View(5) - 动画","date":"2021-11-03T21:59:44.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"link":"2021/11/03/SA664RldODNgeCrz","comments":true,"tags":["图形绘制"],"categories":["Android"],"updated":"2021-11-03T13:59:44.117Z","content":"<blockquote>\n<p>三者性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，差别只是使用的便捷性以及功能的灵活性。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFf4h9.gif\" alt=\"IFf4h9.gif\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"viewpropertyanimator\">ViewPropertyAnimator<a title=\"#viewpropertyanimator\" href=\"#viewpropertyanimator\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.animate()</span><br><span class=\"line\">        .scaleX(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .scaleY(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .alpha(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"objectanimator\">ObjectAnimator<a title=\"#objectanimator\" href=\"#objectanimator\"></a></h3>\n<blockquote>\n<p>多个动画配合执行</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;scaleX&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;scaleY&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">PropertyValuesHolder holder3 = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;alpha&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder1, holder2, holder3)</span><br><span class=\"line\">animator.start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"valueanimator\">ValueAnimator<a title=\"#valueanimator\" href=\"#valueanimator\"></a></h3>\n<blockquote>\n<p>ValueAnimator 本身不作用于任何一个属性，也不提供任何一种动画。它就是一个数值发生器，可以产生想要的各种数值</p>\n</blockquote>\n<p>ValueAnimator 并不常用，因为它的功能太基础了。ValueAnimator 是 ObjectAnimator 的父类，实际上，ValueAnimator 就是一个不能指定目标对象版本的 ObjectAnimato</p>\n","prev":{"title":"自定义View(6) - measure 测量过程","link":"2021/11/03/Qj9f1VMJJowv5Lfb"},"next":{"title":"自定义View(4) - Canvas相关","link":"2021/11/03/ZOnr24kULe7cQgsc"},"plink":"https://onion99.github.io/2021/11/03/SA664RldODNgeCrz/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}