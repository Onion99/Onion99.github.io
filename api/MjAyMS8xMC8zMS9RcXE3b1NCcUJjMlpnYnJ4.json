{"title":"课程-登陆与授权","date":"2021-10-31T21:31:00.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"link":"2021/10/31/Qqq7oSBqBc2Zgbrx","comments":true,"tags":["课程学习"],"categories":["Android"],"updated":"2021-10-31T13:30:32.000Z","content":"<h2 id=\"登录授权、tcp/ip、https和代理\">登录授权、TCP/IP、HTTPS和代理<a title=\"#登录授权、tcp/ip、https和代理\" href=\"#登录授权、tcp/ip、https和代理\"></a></h2>\n<p>登录：身份认证，确认你是你的过程。<br>\n授权：由身份或持有的令牌确认享有某些权限（例如获取用户信息）。登录过程实质上的目的也是为了确认权限</p>\n<span id=\"more\"></span>\n<h3 id=\"http中授权方式\">HTTP中授权方式<a title=\"#http中授权方式\" href=\"#http中授权方式\"></a></h3>\n<h4 id=\"cookie\">Cookie<a title=\"#cookie\" href=\"#cookie\"></a></h4>\n<blockquote>\n<p>使用Cookie管理登录状态</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qrP4f.png\" alt=\"5qrP4f.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qrmbn.png\" alt=\"5qrmbn.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"cookie工作机制\">Cookie工作机制<a title=\"#cookie工作机制\" href=\"#cookie工作机制\"></a></h5>\n<ol>\n<li>服务器需要客户端保存的内容，放在Set-Cookie的headers里返回，客户端会自动保存。</li>\n<li>客户端保存的Cookies，会在之后的所有请求里都携带进Cookie header里发回给服务器。</li>\n<li>客户端保存Cookie是按照服务器域名来分类的，例如shop.com发回的Cookie保存下来以后，在之后向games.com的请求中并不会被携带。</li>\n<li>.客户端保存的Cookie在超时后会被删除，没有设置超时时间的Cookie（称作Session Cookie）在浏览器关闭后就会自动删除，另外，服务器也可以主动删除还未过期的客户端Cookies</li>\n<li>Cookie是由服务端管理的，客户端只是被动接受。</li>\n</ol>\n<h4 id=\"authorization-header\">Authorization Header<a title=\"#authorization-header\" href=\"#authorization-header\"></a></h4>\n<blockquote>\n<p>两种主流方式 Basic 和 Beare</p>\n</blockquote>\n<h5 id=\"basic\">Basic<a title=\"#basic\" href=\"#basic\"></a></h5>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>格式：Authorization: Basic&lt;username:password(Base64)&gt;</span><br><span class=\"line\"><span class=\"number\">2.</span>Basic认证过程</span><br><span class=\"line\"><span class=\"number\">1.</span>浏览器发送请求到服务器</span><br><span class=\"line\">                GET / HTTP /<span class=\"number\">1.1</span></span><br><span class=\"line\">                Host:xxx.xxx.com</span><br><span class=\"line\"><span class=\"number\">2.</span>服务端发送验证请求<span class=\"number\">401</span></span><br><span class=\"line\">                HTTP/<span class=\"number\">1.1</span> <span class=\"number\">401</span> Unauthorised</span><br><span class=\"line\">                Server: bfe/<span class=\"number\">1.0</span><span class=\"number\">.8</span><span class=\"number\">.18</span></span><br><span class=\"line\">                WWW-Authenticate: Basic realm=<span class=\"string\">&quot;XXXXX.com&quot;</span></span><br><span class=\"line\">                Content-<span class=\"built_in\">Type</span>: text/html; charset=utf<span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"number\">3.</span>客户端收到<span class=\"number\">401</span>返回值后，将自动弹出登录窗口，等待用户输入用户名，密码</span><br><span class=\"line\"><span class=\"number\">4.</span>将用户名密码进行Base64编码后发送给服务端进行验证</span><br><span class=\"line\">                GET / HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">                Host: xxx.xxx.xxx.com</span><br><span class=\"line\">                Authorization: Basic xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class=\"line\"><span class=\"number\">5.</span>服务端取出Authorization中头信息，并与数据库进行比对，如果合法则返回<span class=\"number\">200</span>，不合法，则返回<span class=\"number\">401</span>。</span><br></pre></td></tr></table></figure>\n<h5 id=\"bearer\">Bearer<a title=\"#bearer\" href=\"#bearer\"></a></h5>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>格式：Authorization: Bearer &lt;bearer token&gt;</span><br><span class=\"line\"><span class=\"number\">2.</span>bearer token 的获取方式：通过OAuth2的授权流程</span><br><span class=\"line\"><span class=\"number\">3.</span>OAuth2的流程</span><br><span class=\"line\">            <span class=\"number\">1.</span>第三方网站向授权网站申请授权合作，拿到client <span class=\"keyword\">id</span>和client secret</span><br><span class=\"line\">            <span class=\"number\">2.</span>用户在使用第三方网站的时候，点击通过授权，第三方网站将跳转授权网站，并将clientid传递给授权网站。</span><br><span class=\"line\">            <span class=\"number\">4.</span>授权方网站根据clientid，将第三方网站的信息和第三方网站需要的用户权限展示给用户，询问用户是否同意授权。</span><br><span class=\"line\">            <span class=\"number\">5.</span>当用户点击同意授权，授权方网站返回第三方网站，并传入Authorization code作为用户认可的凭证。</span><br><span class=\"line\">            <span class=\"number\">6.</span>第三方网站将Authorization code上送给自己的服务器，服务器将Authorization code跟自己服务器端存储的client secret发送给授权方服务器，授权方服务器通过验证后，返回给access token，整个OAuth2流程结束。</span><br><span class=\"line\">            <span class=\"number\">7.</span>在整个OAuth流程结束后，第三方网站服务器可以试用access token 作用用户授权的token，用此来向授权方网站请求获取用户信息等操作。</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"number\">4.</span>问题：</span><br><span class=\"line\">            为什么OAuth认证要引入Authorization code，并且需要申请授权的第三方将Authorization code传给第三方服务器，并且通过第三方服务器将Authorization code传递给授权方服务器。然后再获取授权方服务器的access token。这样做的目的是为了通信安全，因为OAuth不强制使用HTTPS，因此需要保证通信路径中存在窃听者的时候，还能保证足够的安全。</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"number\">5.</span>第三方APP通过微信登录的流程：</span><br><span class=\"line\">            这是一个标准的OAuth2的流程。</span><br><span class=\"line\">            <span class=\"number\">1.</span>第三方APP向腾讯方申请合作，拿到client <span class=\"keyword\">id</span> 和client secret</span><br><span class=\"line\">            <span class=\"number\">2.</span>当用户在第三方APP上需要微信登录的时候，第三方APP将使用微信SDK打开微信授权页面，并且传入client <span class=\"keyword\">id</span>作为自己授权<span class=\"keyword\">id</span>。</span><br><span class=\"line\">            <span class=\"number\">3.</span>微信拿到第三方app的client <span class=\"keyword\">id</span>后，提交微信后台，验证成功，则返回给第三方app Authorization code。</span><br><span class=\"line\">            <span class=\"number\">4.</span>第三方app拿到Authorization code后，将Authorization code传递给自己的服务器，第三方app的服务端将Authorization code 与 client secret 传递给微信后台，微信后台验证后返回access token。</span><br><span class=\"line\">            <span class=\"number\">5.</span>第三方app后台通过access token 想微信后台请求获取用户信息，微信验证通过后，则返回用户信息。</span><br><span class=\"line\">            <span class=\"number\">6.</span>服务器接受到用户信息后，在自己的数据库中建立一个账户，并将从微信获取的用户信息填入数据库中。并创建用户<span class=\"keyword\">id</span>，并将此<span class=\"keyword\">id</span>与微信<span class=\"keyword\">id</span>做好关联。</span><br><span class=\"line\">            <span class=\"number\">7.</span>当第三方app后台创建好用户后，想客户端的请求发出响应，并回传会刚刚创建的用户信息。</span><br><span class=\"line\">            <span class=\"number\">8.</span>客户端响应，获取用户信息，登录成功。</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"number\">6.</span>在自家APP中使用Bearer token</span><br><span class=\"line\">            部分app会在api设计中，将登录和授权设计出类似于OAuth2的过程，他会简化掉Authorization code的概念。既直接在接口请求成功后，返回access token，然后再之后的客户端的请求中，使用这个access token 作为Bearer token进行用户操作。</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"number\">7.</span>Refresh token</span><br><span class=\"line\">            Access token 都会有失效时间，当他失效后，第三方app的服务端会通过refresh token 接口传入refresh token 来获取新的access token。这样的的原因是安全，因为refresh token是放置在服务端的，即使access token被窃取，他也是有失效时间的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"tcp/ip\">TCP/IP<a title=\"#tcp/ip\" href=\"#tcp/ip\"></a></h3>\n<blockquote>\n<p>两台计算机之间的通讯是通过TCP/IP协议在因特网上进行的</p>\n</blockquote>\n<p>TCP：Transmission Control Protocol 传输控制协议, 用于应用程序之间的通信<br>\nIP：Internet Protocol 网际协议, 用于计算机之间的通信</p>\n<h4 id=\"分层\">分层<a title=\"#分层\" href=\"#分层\"></a></h4>\n<blockquote>\n<p>因为网络具有不稳定性,要保证通信正常</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qccSf.png\" alt=\"5qccSf.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"tcp连接\">TCP连接<a title=\"#tcp连接\" href=\"#tcp连接\"></a></h4>\n<blockquote>\n<p>通信双方建立确认「可以通信」，不会将对方的消息丢弃，即为「建立连接」</p>\n</blockquote>\n<h5 id=\"连接建立\">连接建立<a title=\"#连接建立\" href=\"#连接建立\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5LRCDS.png\" alt=\"5LRCDS.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"连接关闭\">连接关闭<a title=\"#连接关闭\" href=\"#连接关闭\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5LRGCR.png\" alt=\"5LRGCR.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"长连接\">长连接<a title=\"#长连接\" href=\"#长连接\"></a></h5>\n<blockquote>\n<p>强制不让连接的通道关闭</p>\n</blockquote>\n<ul>\n<li>TCP短连接\n<ul>\n<li>client向server发起连接请求，server接到请求，然后双方建立连接。client向server 发送消息，server回应client，然后一次读写就完成了</li>\n<li>一般的server不会回复完client后立即关闭连接的, 所以一般是client先发起close操作</li>\n</ul>\n</li>\n<li>TCP长连接\n<ul>\n<li>client向server发起连接，server接受client连接，双方建立连接。Client与server完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接</li>\n</ul>\n</li>\n</ul>\n<p>怎样实现长连接？<br>\n⼼跳。即在一定间隔时间内，使⽤TCP连接发送超短无意义消息来让网关不能将⾃己定义为「空闲连接」，从而防止网关将⾃己的连接关闭</p>\n<h3 id=\"https\">HTTPS<a title=\"#https\" href=\"#https\"></a></h3>\n<blockquote>\n<p>HTTP over SSL的简称，即工作在SSL(或TLS)上的HTTP。是加密通信的HTTP</p>\n</blockquote>\n<h4 id=\"工作原理\">工作原理<a title=\"#工作原理\" href=\"#工作原理\"></a></h4>\n<blockquote>\n<p>在客户端和服务器之间协商出一套对称密钥，每次发送消息之前将内容加密，收到之后解密，达到内容的加密传输</p>\n</blockquote>\n<p>为什么不直接用非对称加密?<br>\n非对称加密由于使用了复杂的数学原理，因此计算相当复杂，如果完全使用非对称加密来加密通信内容，会严重影响网络通信的性能</p>\n<h4 id=\"https流程\">HTTPS流程<a title=\"#https流程\" href=\"#https流程\"></a></h4>\n<ol>\n<li>客户端请求建立TLS连接</li>\n<li>服务器发回证书</li>\n<li>客户端验证服务器证书</li>\n<li>客户端信任服务器后，和服务器协商对称密钥</li>\n<li>使用对称密钥开始通信</li>\n</ol>\n<h2 id=\"about\">About<a title=\"#about\" href=\"#about\"></a></h2>\n<p><a href=\"https://www.jianshu.com/p/2a890d952461\" target=\"_blank\">登录授权、TCP/IP、HTTPS和代理</a><br>\n<a href=\"https://blog.csdn.net/kimlllll/article/details/103041225\" target=\"_blank\">编码、加密、Hash、TCP/IP、HTTPS</a><br>\n<a href=\"https://github.com/hsicen/HencoderPlus/blob/master/note/04-TCPIP%E5%92%8CHTTPS.md\" target=\"_blank\">HencoderPlus/04-TCPIP和HTTPS</a></p>\n","prev":{"title":"课程-编码与加密","link":"2021/10/31/MgnT9VQ3PhWZOJAq"},"next":{"title":"源码学习-Glide","link":"2021/10/31/15jfHwStpctgCeeA"},"plink":"http://onion66.gitee.io/blog/2021/10/31/Qqq7oSBqBc2Zgbrx/","toc":[{"id":"登录授权、tcp/ip、https和代理","title":"登录授权、TCP&#x2F;IP、HTTPS和代理","index":"1"},{"id":"about","title":"About","index":"2"}],"reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}