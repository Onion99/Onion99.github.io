{"title":"自定义View(6) - measure 测量过程","date":"2021-11-03T22:00:58.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"link":"2021/11/03/Qj9f1VMJJowv5Lfb","comments":true,"tags":["图形绘制"],"categories":["Android"],"updated":"2021-11-03T13:59:15.000Z","content":"<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"QJQEcR.jpg\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"measurespec\">MeasureSpec<a title=\"#measurespec\" href=\"#measurespec\"></a></h3>\n<blockquote>\n<p>MeasureSpec 代表测量规格，是一个 32 位的 int 值，高 2 位代表 SpecMode（测量模式），低 30 位代表 SpecSize（测量大小）</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IF7OM9.png\" alt=\"IF7OM9.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>MeasureSpec 通过将 SpecMode 和 SpecSize 打包成一个 int 值来避免过多的内存分配，并提供了打包和解包的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"specmode\">SpecMode<a title=\"#specmode\" href=\"#specmode\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFbTc4.png\" alt=\"IFbTc4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"measurespec值计算\">MeasureSpec值计算<a title=\"#measurespec值计算\" href=\"#measurespec值计算\"></a></h3>\n<blockquote>\n<p>View 的 MeasureSpec 值是由 View 的布局参数和父容器 的 MeasureSpec 值计算</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAVp1e.png\" alt=\"IAVp1e.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 源码分析：getChildMeasureSpec（）</span></span><br><span class=\"line\"><span class=\"comment\"> * 作用：根据父视图的MeasureSpec &amp; 布局参数LayoutParams，计算单个子View的MeasureSpec</span></span><br><span class=\"line\"><span class=\"comment\"> * 注：子view的大小由父view的MeasureSpec值 和 子view的LayoutParams属性 共同决定</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> spec           父view的详细测量值 (MeasureSpec)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> padding        view当前尺寸的的内边距和外边距(padding, margin)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> childDimension 子视图的布局参数（宽 / 高）</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父view的测量模式</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">    <span class=\"comment\">//父view的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\">    <span class=\"comment\">//通过父view计算出的子view大小 = 父大小-边距（父要求的大小，但子view不一定用这个值）   </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//子view想要的实际大小和模式（需要计算）  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//通过父view的MeasureSpec和子view的LayoutParams确定子view的大小  </span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当父view的模式为EXACITY时，父view强加给子view确切的值</span></span><br><span class=\"line\">        <span class=\"comment\">//一般是父view设置为match_parent或者固定值的ViewGroup </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">            <span class=\"comment\">// 当子view的LayoutParams&gt;0，即有确切的值  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子view大小为子自身所赋的值，模式大小为EXACTLY  </span></span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//当子view的LayoutParams为MATCH_PARENT时(-1)  </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子view大小为父view大小，模式为EXACTLY  </span></span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 当子view的LayoutParams为WRAP_CONTENT时(-2)      </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子view决定自己的大小，但最大不能超过父view，模式为AT_MOST  </span></span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 当父view的模式为AT_MOST时，父view强加给子view一个最大的值。（一般是父view设置为wrap_content）  </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">            <span class=\"comment\">// 道理同上  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 当父view的模式为UNSPECIFIED时，父容器不对view有任何限制，要多大给多大</span></span><br><span class=\"line\">        <span class=\"comment\">// 多见于ListView、GridView  </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 子view大小为子自身所赋的值  </span></span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为父view为UNSPECIFIED，所以MATCH_PARENT的话子类大小为0  </span></span><br><span class=\"line\">                resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为父view为UNSPECIFIED，所以WRAP_CONTENT的话子类大小为0  </span></span><br><span class=\"line\">                resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAemLj.png\" alt=\"IAemLj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"measure-过程\">Measure 过程<a title=\"#measure-过程\" href=\"#measure-过程\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAuMTA.png\" alt=\"IAuMTA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>布局过程自定义的方式</p>\n<ol>\n<li>重写  <code>onMeasure()</code>  来修改已有的  <code>View</code>  的尺寸；</li>\n<li>重写  <code>onMeasure()</code>  来全新定制自定义  <code>View</code>  的尺寸；</li>\n<li>重写  <code>onMeasure()</code>  和  <code>onLayout()</code>  来全新定制自定义  <code>ViewGroup</code>  的内部布局。</li>\n</ol>\n<h4 id=\"view的measure\">View的measure<a title=\"#view的measure\" href=\"#view的measure\"></a></h4>\n<p>View 的 measure 过程由其<code>measure()</code> 方法完成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 源码分析：measure（）</span></span><br><span class=\"line\"><span class=\"comment\">* 定义：Measure过程的入口；属于View.java类 &amp; final类型，即子类不能重写此方法</span></span><br><span class=\"line\"><span class=\"comment\">* 作用：基本测量逻辑的判断</span></span><br><span class=\"line\"><span class=\"comment\">**/</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要重新测量           </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (forceLayout || needsLayout) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否有缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cacheIndex = forceLayout ? -<span class=\"number\">1</span> : mMeasureCache.indexOfKey(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cacheIndex &lt; <span class=\"number\">0</span> || sIgnoreMeasureCache) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 开始测量</span></span><br><span class=\"line\">            onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> value = mMeasureCache.valueAt(cacheIndex);</span><br><span class=\"line\">            <span class=\"comment\">// Casting a long to int drops the high 32 bits, no mask needed</span></span><br><span class=\"line\">            setMeasuredDimensionRaw((<span class=\"keyword\">int</span>) (value &gt;&gt; <span class=\"number\">32</span>), (<span class=\"keyword\">int</span>) value);</span><br><span class=\"line\">            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>setMeasuredDimension()</code>方法会设置 View 的宽/高的测量值，因此我们只需要看<code>getDefaultSize()</code> 方法即可</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAGYZT.png\" alt=\"IAGYZT.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * onMeasure（）要的做是事情</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 根据View宽/高的测量规格计算View的宽/高值：getDefaultSize()</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 存储测量后的View宽 / 高：setMeasuredDimension()</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">     setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">             getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> size        提供的默认大小</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> measureSpec 宽/高的测量规格</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 设置默认大小</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">     <span class=\"comment\">// 获取宽/高测量规格的模式 &amp; 测量大小</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">     <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 模式为UNSPECIFIED时，使用提供的默认大小 = 参数Size</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">         result = size;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 模式为AT_MOST,EXACTLY时，使用View测量后的宽/高值 = measureSpec中的Size  </span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">         result = specSize;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 返回View的宽/高值</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125;  </span><br></pre></td></tr></table></figure>\n<p>当模式是 UNSPECIFIED 时，使用的是提供的默认大小:</p>\n<ul>\n<li>若 View 无设置背景，那么 View 的宽度 = mMinWidth。mMinWidth为 android:minWidth属性所指定的值，默认为 0</li>\n<li>若 View设置了背景，View 的宽度为 mMinWidth 和 mBackground.getMinimumWidth()中的最大值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ9mV.png\" alt=\"IAJ9mV.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ1te.png\" alt=\"IAJ1te.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"viewgroup的measure\">ViewGroup的measure<a title=\"#viewgroup的measure\" href=\"#viewgroup的measure\"></a></h4>\n<blockquote>\n<p>ViewGroup是个抽象类,不同ViewGroup的onMeasure的实现都个不相同,除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素再递归去执行这个过程</p>\n</blockquote>\n<ol>\n<li>遍历所有子 View &amp; 测量：measureChildren()</li>\n<li>合并所有子 View 的尺寸大小，最终得到 ViewGroup 的测量值（需自身实现）</li>\n<li>存储测量后 View 宽/高的值：调用 setMeasuredDimension()</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义存放测量后的View宽/高的变量</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> widthMeasure ;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> heightMeasure ;</span><br><span class=\"line\">      <span class=\"comment\">// 1. 遍历所有子 View &amp; 测量(measureChildren())</span></span><br><span class=\"line\">      measureChildren(widthMeasureSpec, heightMeasureSpec)；</span><br><span class=\"line\">      <span class=\"comment\">// 2. 合并所有子View的尺寸大小，最终得到ViewGroup父视图的测量值</span></span><br><span class=\"line\">      <span class=\"comment\">// 需自身实现</span></span><br><span class=\"line\">      measureMerge();</span><br><span class=\"line\">      <span class=\"comment\">// 3. 存储测量后View宽/高的值：调用setMeasuredDimension()</span></span><br><span class=\"line\">      <span class=\"comment\">// 类似单一View的过程，此处不作过多描述</span></span><br><span class=\"line\">      setMeasuredDimension(widthMeasure,  heightMeasure);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>measureChildren()</code>遍历子 View 并且调用 measureChild() 进行下一步测量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 要求该视图的所有子视图度量自己，同时考虑该视图的MeasureSpec要求及其填充。我们跳过了处于GONE状态的子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class=\"line\">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAokqI.png\" alt=\"IAokqI.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAo1Ln.png\" alt=\"IAo1Ln.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"linearlayout-measure分析\">LinearLayout measure分析<a title=\"#linearlayout-measure分析\" href=\"#linearlayout-measure分析\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的布局属性进行不同的计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">measureVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取垂直方向上的子View个数</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 遍历子View获取其高度，并记录下子View中最高的高度数值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 子View不可见，直接跳过该View的measure过程，getChildrenSkipCount()返回值恒为0</span></span><br><span class=\"line\">        <span class=\"comment\">// 注：若view的可见属性设置为VIEW.INVISIBLE，还是会计算该view大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">           i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 记录子View是否有weight属性设置，用于后面判断是否需要二次measure</span></span><br><span class=\"line\">        totalWeight += lp.weight;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果LinearLayout的specMode为EXACTLY且子View设置了weight属性，在这里会跳过子View的measure过程</span></span><br><span class=\"line\">            <span class=\"comment\">// 同时标记skippedMeasure属性为true，后面会根据该属性决定是否进行第二次measure</span></span><br><span class=\"line\">            <span class=\"comment\">// 若LinearLayout的子View设置了weight，会进行两次measure计算，比较耗时</span></span><br><span class=\"line\">            <span class=\"comment\">// 这就是为什么LinearLayout的子View需要使用weight属性时候，最好替换成RelativeLayout布局</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">            mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</span><br><span class=\"line\">            skippedMeasure = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</span><br><span class=\"line\">            <span class=\"comment\">// 步骤1：遍历所有子View &amp; 测量：measureChildren（）</span></span><br><span class=\"line\">            <span class=\"comment\">// 注：该方法内部，最终会调用measureChildren（），从而 遍历所有子View &amp; 测量</span></span><br><span class=\"line\">            measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec, totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</span><br><span class=\"line\">                   ...</span><br><span class=\"line\">            <span class=\"comment\">//步骤2：合并所有子View的尺寸大小,最终得到ViewGroup父视图的测量值（自身实现）</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 1. mTotalLength用于存储LinearLayout在竖直方向的高度</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 2. 每测量一个子View的高度， mTotalLength就会增加</span></span><br><span class=\"line\">            mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin +</span><br><span class=\"line\">                           lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 3. 记录LinearLayout占用的总高度</span></span><br><span class=\"line\">    <span class=\"comment\">// 即除了子View的高度，还有本身的padding属性值</span></span><br><span class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightSize = mTotalLength;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//步骤3：存储测量后View宽/高的值：调用setMeasuredDimension()</span></span><br><span class=\"line\">    setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState), heightSizeAndState);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取view的宽高\">获取View的宽高<a title=\"#获取view的宽高\" href=\"#获取view的宽高\"></a></h3>\n<blockquote>\n<p>Activity 启动时，在 onCreate()、onStart()、onResume() 中均无法正确的得到某个 View 的宽高信息，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的</p>\n</blockquote>\n<ul>\n<li>onWindowFocusChanged()\n<ul>\n<li>需要注意的是，onWindowFocusChanged() 会被调用多次，当 Activity 的窗口得到焦点和失去焦点时均会被调用一次。</li>\n</ul>\n</li>\n<li>View.post(runnable)</li>\n<li>ViewTreeObserver</li>\n<li>手动调用 View 的 measure 方法</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://blog.csdn.net/u010289802/article/details/80183142\" target=\"_blank\">Android 知识体系学习目录_lerendan的博客-CSDN博客</a></p>\n","prev":{"title":"自定义View(7) - layout 布局过程","link":"2021/11/03/ZyOr4iLxJj7nAQxR"},"next":{"title":"自定义View(5) - 动画","link":"2021/11/03/SA664RldODNgeCrz"},"plink":"http://onion66.gitee.io/blog/2021/11/03/Qj9f1VMJJowv5Lfb/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}