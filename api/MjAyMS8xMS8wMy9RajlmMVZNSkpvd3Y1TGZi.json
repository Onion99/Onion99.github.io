{"title":"自定义View(6) - measure 测量过程","date":"2021-11-03T22:00:58.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"link":"2021/11/03/Qj9f1VMJJowv5Lfb","comments":true,"tags":["图形绘制"],"categories":["Android"],"updated":"2021-11-03T13:59:15.000Z","content":"<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"QJQEcR.jpg\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"measurespec\">MeasureSpec<a title=\"#measurespec\" href=\"#measurespec\"></a></h3>\n<blockquote>\n<p>MeasureSpec 代表测量规格，是一个 32 位的 int 值，高 2 位代表 SpecMode（测量模式），低 30 位代表 SpecSize（测量大小）</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IF7OM9.png\" alt=\"IF7OM9.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>MeasureSpec 通过将 SpecMode 和 SpecSize 打包成一个 int 值来避免过多的内存分配，并提供了打包和解包的方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> widthMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> widthSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"specmode\">SpecMode<a title=\"#specmode\" href=\"#specmode\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFbTc4.png\" alt=\"IFbTc4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"measurespec值计算\">MeasureSpec值计算<a title=\"#measurespec值计算\" href=\"#measurespec值计算\"></a></h3>\n<blockquote>\n<p>View 的 MeasureSpec 值是由 View 的布局参数和父容器 的 MeasureSpec 值计算</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAVp1e.png\" alt=\"IAVp1e.png\" loading=\"lazy\" class=\"φbp\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 源码分析：getChildMeasureSpec（）\n * 作用：根据父视图的MeasureSpec &amp; 布局参数LayoutParams，计算单个子View的MeasureSpec\n * 注：子view的大小由父view的MeasureSpec值 和 子view的LayoutParams属性 共同决定\n * 参数说明\n * @param spec           父view的详细测量值 (MeasureSpec)\n * @param padding        view当前尺寸的的内边距和外边距(padding, margin)\n * @param childDimension 子视图的布局参数（宽 / 高）\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getChildMeasureSpec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> spec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> padding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> childDimension<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//父view的测量模式</span>\n    <span class=\"token keyword\">int</span> specMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//父view的大小</span>\n    <span class=\"token keyword\">int</span> specSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//通过父view计算出的子view大小 = 父大小-边距（父要求的大小，但子view不一定用这个值）   </span>\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> specSize <span class=\"token operator\">-</span> padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">//子view想要的实际大小和模式（需要计算）  </span>\n    <span class=\"token keyword\">int</span> resultSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> resultMode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">//通过父view的MeasureSpec和子view的LayoutParams确定子view的大小  </span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>specMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//当父view的模式为EXACITY时，父view强加给子view确切的值</span>\n        <span class=\"token comment\">//一般是父view设置为match_parent或者固定值的ViewGroup </span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 当子view的LayoutParams>0，即有确切的值  </span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//子view大小为子自身所赋的值，模式大小为EXACTLY  </span>\n                resultSize <span class=\"token operator\">=</span> childDimension<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n                \n                <span class=\"token comment\">//当子view的LayoutParams为MATCH_PARENT时(-1)  </span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>MATCH_PARENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//子view大小为父view大小，模式为EXACTLY  </span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 当子view的LayoutParams为WRAP_CONTENT时(-2)      </span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//子view决定自己的大小，但最大不能超过父view，模式为AT_MOST  </span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 当父view的模式为AT_MOST时，父view强加给子view一个最大的值。（一般是父view设置为wrap_content）  </span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 道理同上  </span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultSize <span class=\"token operator\">=</span> childDimension<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>MATCH_PARENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 当父view的模式为UNSPECIFIED时，父容器不对view有任何限制，要多大给多大</span>\n        <span class=\"token comment\">// 多见于ListView、GridView  </span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 子view大小为子自身所赋的值  </span>\n                resultSize <span class=\"token operator\">=</span> childDimension<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>MATCH_PARENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 因为父view为UNSPECIFIED，所以MATCH_PARENT的话子类大小为0  </span>\n                resultSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 因为父view为UNSPECIFIED，所以WRAP_CONTENT的话子类大小为0  </span>\n                resultSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeMeasureSpec</span><span class=\"token punctuation\">(</span>resultSize<span class=\"token punctuation\">,</span> resultMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAemLj.png\" alt=\"IAemLj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"measure-过程\">Measure 过程<a title=\"#measure-过程\" href=\"#measure-过程\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAuMTA.png\" alt=\"IAuMTA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>布局过程自定义的方式</p>\n<ol>\n<li>重写  <code>onMeasure()</code>  来修改已有的  <code>View</code>  的尺寸；</li>\n<li>重写  <code>onMeasure()</code>  来全新定制自定义  <code>View</code>  的尺寸；</li>\n<li>重写  <code>onMeasure()</code>  和  <code>onLayout()</code>  来全新定制自定义  <code>ViewGroup</code>  的内部布局。</li>\n</ol>\n<h4 id=\"view的measure\">View的measure<a title=\"#view的measure\" href=\"#view的measure\"></a></h4>\n<p>View 的 measure 过程由其<code>measure()</code> 方法完成：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* 源码分析：measure（）\n* 定义：Measure过程的入口；属于View.java类 &amp; final类型，即子类不能重写此方法\n* 作用：基本测量逻辑的判断\n**/</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">measure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 判断是否需要重新测量           </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forceLayout <span class=\"token operator\">||</span> needsLayout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">// 判断是否有缓存</span>\n        <span class=\"token keyword\">int</span> cacheIndex <span class=\"token operator\">=</span> forceLayout <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> mMeasureCache<span class=\"token punctuation\">.</span><span class=\"token function\">indexOfKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cacheIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> sIgnoreMeasureCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 开始测量</span>\n            <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mPrivateFlags3 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> mMeasureCache<span class=\"token punctuation\">.</span><span class=\"token function\">valueAt</span><span class=\"token punctuation\">(</span>cacheIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Casting a long to int drops the high 32 bits, no mask needed</span>\n            <span class=\"token function\">setMeasuredDimensionRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>></span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mPrivateFlags3 <span class=\"token operator\">|=</span> PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>setMeasuredDimension()</code>方法会设置 View 的宽/高的测量值，因此我们只需要看<code>getDefaultSize()</code> 方法即可</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAGYZT.png\" alt=\"IAGYZT.png\" loading=\"lazy\" class=\"φbp\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * onMeasure（）要的做是事情\n * 1. 根据View宽/高的测量规格计算View的宽/高值：getDefaultSize()\n * 2. 存储测量后的View宽 / 高：setMeasuredDimension()\n **/</span>\n <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSuggestedMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSuggestedMinimumHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n \n <span class=\"token comment\">/**\n  * @param size        提供的默认大小\n  * @param measureSpec 宽/高的测量规格\n  */</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> measureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">// 设置默认大小</span>\n     <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 获取宽/高测量规格的模式 &amp; 测量大小</span>\n     <span class=\"token keyword\">int</span> specMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>measureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> specSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>measureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>specMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">// 模式为UNSPECIFIED时，使用提供的默认大小 = 参数Size</span>\n       <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token operator\">:</span>\n         result <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 模式为AT_MOST,EXACTLY时，使用View测量后的宽/高值 = measureSpec中的Size  </span>\n       <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token operator\">:</span>\n       <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token operator\">:</span>\n         result <span class=\"token operator\">=</span> specSize<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">// 返回View的宽/高值</span>\n     <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当模式是 UNSPECIFIED 时，使用的是提供的默认大小:</p>\n<ul>\n<li>若 View 无设置背景，那么 View 的宽度 = mMinWidth。mMinWidth为 android:minWidth属性所指定的值，默认为 0</li>\n<li>若 View设置了背景，View 的宽度为 mMinWidth 和 mBackground.getMinimumWidth()中的最大值。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSuggestedMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mBackground <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mMinWidth <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mMinWidth<span class=\"token punctuation\">,</span> mBackground<span class=\"token punctuation\">.</span><span class=\"token function\">getMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ9mV.png\" alt=\"IAJ9mV.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ1te.png\" alt=\"IAJ1te.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"viewgroup的measure\">ViewGroup的measure<a title=\"#viewgroup的measure\" href=\"#viewgroup的measure\"></a></h4>\n<blockquote>\n<p>ViewGroup是个抽象类,不同ViewGroup的onMeasure的实现都个不相同,除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素再递归去执行这个过程</p>\n</blockquote>\n<ol>\n<li>遍历所有子 View &amp; 测量：measureChildren()</li>\n<li>合并所有子 View 的尺寸大小，最终得到 ViewGroup 的测量值（需自身实现）</li>\n<li>存储测量后 View 宽/高的值：调用 setMeasuredDimension()</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 定义存放测量后的View宽/高的变量</span>\n      <span class=\"token keyword\">int</span> widthMeasure <span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> heightMeasure <span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 1. 遍历所有子 View &amp; 测量(measureChildren())</span>\n      <span class=\"token function\">measureChildren</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span>；\n      <span class=\"token comment\">// 2. 合并所有子View的尺寸大小，最终得到ViewGroup父视图的测量值</span>\n      <span class=\"token comment\">// 需自身实现</span>\n      <span class=\"token function\">measureMerge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 3. 存储测量后View宽/高的值：调用setMeasuredDimension()</span>\n      <span class=\"token comment\">// 类似单一View的过程，此处不作过多描述</span>\n      <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span>widthMeasure<span class=\"token punctuation\">,</span>  heightMeasure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>measureChildren()</code>遍历子 View 并且调用 measureChild() 进行下一步测量</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">measureChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 要求该视图的所有子视图度量自己，同时考虑该视图的MeasureSpec要求及其填充。我们跳过了处于GONE状态的子节点</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> mChildrenCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children <span class=\"token operator\">=</span> mChildren<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>mViewFlags <span class=\"token operator\">&amp;</span> VISIBILITY_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> GONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">measureChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAokqI.png\" alt=\"IAokqI.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAo1Ln.png\" alt=\"IAo1Ln.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"linearlayout-measure分析\">LinearLayout measure分析<a title=\"#linearlayout-measure分析\" href=\"#linearlayout-measure分析\"></a></h5>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 根据不同的布局属性进行不同的计算</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mOrientation <span class=\"token operator\">==</span> VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">measureVertical</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">measureHorizontal</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">measureVertical</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取垂直方向上的子View个数</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 遍历子View获取其高度，并记录下子View中最高的高度数值</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 子View不可见，直接跳过该View的measure过程，getChildrenSkipCount()返回值恒为0</span>\n        <span class=\"token comment\">// 注：若view的可见属性设置为VIEW.INVISIBLE，还是会计算该view大小</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>GONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           i <span class=\"token operator\">+=</span> <span class=\"token function\">getChildrenSkipCount</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n \n        <span class=\"token comment\">// 记录子View是否有weight属性设置，用于后面判断是否需要二次measure</span>\n        totalWeight <span class=\"token operator\">+=</span> lp<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heightMode <span class=\"token operator\">==</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY <span class=\"token operator\">&amp;&amp;</span> lp<span class=\"token punctuation\">.</span>height <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> lp<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果LinearLayout的specMode为EXACTLY且子View设置了weight属性，在这里会跳过子View的measure过程</span>\n            <span class=\"token comment\">// 同时标记skippedMeasure属性为true，后面会根据该属性决定是否进行第二次measure</span>\n            <span class=\"token comment\">// 若LinearLayout的子View设置了weight，会进行两次measure计算，比较耗时</span>\n            <span class=\"token comment\">// 这就是为什么LinearLayout的子View需要使用weight属性时候，最好替换成RelativeLayout布局</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> totalLength <span class=\"token operator\">=</span> mTotalLength<span class=\"token punctuation\">;</span>\n            mTotalLength <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">,</span> totalLength <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>topMargin <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>bottomMargin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            skippedMeasure <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> oldHeight <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 步骤1：遍历所有子View &amp; 测量：measureChildren（）</span>\n            <span class=\"token comment\">// 注：该方法内部，最终会调用measureChildren（），从而 遍历所有子View &amp; 测量</span>\n            <span class=\"token function\">measureChildBeforeLayout</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> mTotalLength <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token comment\">//步骤2：合并所有子View的尺寸大小,最终得到ViewGroup父视图的测量值（自身实现）</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childHeight <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getMeasuredHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// 1. mTotalLength用于存储LinearLayout在竖直方向的高度</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> totalLength <span class=\"token operator\">=</span> mTotalLength<span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// 2. 每测量一个子View的高度， mTotalLength就会增加</span>\n            mTotalLength <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">,</span> totalLength <span class=\"token operator\">+</span> childHeight <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>topMargin <span class=\"token operator\">+</span>\n                           lp<span class=\"token punctuation\">.</span>bottomMargin <span class=\"token operator\">+</span> <span class=\"token function\">getNextLocationOffset</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token comment\">// 3. 记录LinearLayout占用的总高度</span>\n    <span class=\"token comment\">// 即除了子View的高度，还有本身的padding属性值</span>\n    mTotalLength <span class=\"token operator\">+=</span> mPaddingTop <span class=\"token operator\">+</span> mPaddingBottom<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightSize <span class=\"token operator\">=</span> mTotalLength<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightSizeAndState <span class=\"token operator\">=</span> <span class=\"token function\">resolveSizeAndState</span><span class=\"token punctuation\">(</span>heightSize<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">//步骤3：存储测量后View宽/高的值：调用setMeasuredDimension()</span>\n    <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolveSizeAndState</span><span class=\"token punctuation\">(</span>maxWidth<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> childState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> heightSizeAndState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"获取view的宽高\">获取View的宽高<a title=\"#获取view的宽高\" href=\"#获取view的宽高\"></a></h3>\n<blockquote>\n<p>Activity 启动时，在 onCreate()、onStart()、onResume() 中均无法正确的得到某个 View 的宽高信息，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的</p>\n</blockquote>\n<ul>\n<li>onWindowFocusChanged()\n<ul>\n<li>需要注意的是，onWindowFocusChanged() 会被调用多次，当 Activity 的窗口得到焦点和失去焦点时均会被调用一次。</li>\n</ul>\n</li>\n<li>View.post(runnable)</li>\n<li>ViewTreeObserver</li>\n<li>手动调用 View 的 measure 方法</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://blog.csdn.net/u010289802/article/details/80183142\" target=\"_blank\">Android 知识体系学习目录_lerendan的博客-CSDN博客</a></p>\n","prev":{"title":"自定义View(7) - layout 布局过程","link":"2021/11/03/ZyOr4iLxJj7nAQxR"},"next":{"title":"自定义View(5) - 动画","link":"2021/11/03/SA664RldODNgeCrz"},"plink":"https://onion99.github.io/2021/11/03/Qj9f1VMJJowv5Lfb/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}