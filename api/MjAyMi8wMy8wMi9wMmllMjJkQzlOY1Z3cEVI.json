{"title":"源码学习 - LiveData","date":"2022-03-02T17:47:39.000Z","date_formatted":{"ll":"2022年3月2日","L":"2022/03/02","MM-DD":"03-02"},"thumbnail":"https://s4.ax1x.com/2022/03/02/b8oz5R.md.png","link":"2022/03/02/p2ie22dC9NcVwpEH","comments":true,"tags":["源码解析"],"categories":["Android"],"updated":"2022-03-02T09:43:45.000Z","content":"<blockquote>\n<p><a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\" target=\"_blank\"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"优点\">优点<a title=\"#优点\" href=\"#优点\"></a></h3>\n<ul>\n<li>确保界面符合数据状态\n<ul>\n<li>LiveData 遵循观察者模式。当底层数据发生变化时，LiveData 会通知 Observer 对象。您可以整合代码以在这些 Observer 对象中更新界面。这样一来，您无需在每次应用数据发生变化时更新界面，因为观察者会替您完成更新。</li>\n</ul>\n</li>\n<li>不会发生内存泄漏\n<ul>\n<li>观察者会绑定到 Lifecycle 对象，并在其关联的生命周期遭到销毁后进行自我清理。</li>\n</ul>\n</li>\n<li>不会因 Activity 停止而导致崩溃\n<ul>\n<li>如果观察者的生命周期处于非活跃状态（如返回栈中的 Activity），则它不会接收任何 LiveData 事件。</li>\n</ul>\n</li>\n<li>不再需要手动处理生命周期\n<ul>\n<li>界面组件只是观察相关数据，不会停止或恢复观察。LiveData 将自动管理所有这些操作，因为它在观察时可以感知相关的生命周期状态变化。</li>\n</ul>\n</li>\n<li>数据始终保持最新状态\n<ul>\n<li>如果生命周期变为非活跃状态，它会在再次变为活跃状态时接收最新的数据。例如，曾经在后台的 Activity 会在返回前台后立即接收最新的数据。</li>\n</ul>\n</li>\n<li>适当的配置更改\n<ul>\n<li>如果由于配置更改（如设备旋转）而重新创建了 Activity 或 Fragment，它会立即接收最新的可用数据。</li>\n</ul>\n</li>\n<li>共享资源\n<ul>\n<li>您可以使用单例模式扩展 LiveData 对象以封装系统服务，以便在应用中共享它们。LiveData 对象连接到系统服务一次，然后需要相应资源的任何观察者只需观察 LiveData 对象。如需了解详情，请参阅扩展 LiveData。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h3>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailVideModel</span> : <span class=\"type\">ViewModel &#123;</span></span></span><br><span class=\"line\">\t  <span class=\"keyword\">val</span> getTopTabLiveData <span class=\"keyword\">by</span> lazy &#123;  MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaDetailsActivity</span> : <span class=\"type\">BaseActivity</span></span>()&#123;</span><br><span class=\"line\">\t  viewModel.getTopTabLiveData.observe(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">\t       <span class=\"comment\">// do some thing    </span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>![I8k2xH.png](<a href=\"https://z3.ax1x.com/2021/11/08/I8k2xH.png\">https://z3.ax1x.com/2021/11/08/I8k2xH.png</a> =100x100)</p>\n<h3 id=\"observer()做了什么\">observer()做了什么<a title=\"#observer()做了什么\" href=\"#observer()做了什么\"></a></h3>\n<blockquote>\n<p>将指定事件跟生命周期绑定</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 在给定所有者的生命周期内将给定的观察者添加到观察者列表中。 */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断生命周期为销毁,则忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 实例一个新的生命周期绑定观察者</span></span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否之前已经赋值,来防止有煞笔重复调用,专治代码水土不服</span></span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 注意看LifecycleBoundObserver.isAttachedTo()</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果之前已经赋值但又有煞笔在不同LifecycleOwner(生命周期管理者)中调用,话不多说,直接给crash,google就是牛逼</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经赋值且上面煞笔处理没问题,就不再做处理了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 看到了没有,核心啊,精髓啊,给当前LifecycleOwner加入Observer(观察者),在生命周期各个阶段响应事件</span></span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;   </span><br></pre></td></tr></table></figure>\n<p>看看mObservers.putIfAbsent:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* LinkedList，它伪装成一个Map并支持在迭代期间进行修改。它不是线程安全的 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeIterableMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果指定的键尚未与值关联，则将其与给定值关联,返回与指定键关联的前一个值，如果该键没有映射，则null */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> K key, <span class=\"meta\">@NonNull</span> V v)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;K, V&gt; entry = get(key);</span><br><span class=\"line\">        <span class=\"comment\">// 如果给定的值已经存在,则返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> entry.mValue;</span><br><span class=\"line\">        <span class=\"comment\">// 否则存进去,真似厉害啊</span></span><br><span class=\"line\">        put(key, v);</span><br><span class=\"line\">        <span class=\"comment\">// 返回代表之前不存在的null值,这就是理解有木有 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;   </span><br></pre></td></tr></table></figure>\n<p>看看LifecycleBoundObserver :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"comment\">// 生命周期管理者</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\">    <span class=\"comment\">// 看到这里没,直接赋值了,有什么好说的</span></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        mOwner = owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有点意思,这里判断是否处在活跃状态,就可以他妈的做正确的生命周期回调响应</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">        <span class=\"comment\">// 若生命周期已为销毁状态, 则移除 observer, 避免内存泄露</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">            prevState = currentState;</span><br><span class=\"line\">            activeStateChanged(shouldBeActive());</span><br><span class=\"line\">            currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断两个生命周期管理者是否为同一个</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了到这LiveData.observe()已经观察完毕了,到看看LiveData.postValue()了,<br>\n别说,google还是有点讲究的,看看这个官方提示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liveData.postValue(<span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">// 异步传值</span></span><br><span class=\"line\">liveData.setValue(<span class=\"string\">&quot;b&quot;</span>); <span class=\"comment\">//同步传值</span></span><br><span class=\"line\"><span class=\"comment\">// 结果: 值“b”将首先设置，然后主线程将用值“a”覆盖它。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在此主线程执行postValue()之前多次调用postValue()，则只会调度最后一个值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"postvalue()做了什么\">postValue()做了什么<a title=\"#postvalue()做了什么\" href=\"#postvalue()做了什么\"></a></h3>\n<blockquote>\n<p>他妈的,还能做什么,就是传值啊,这还用说的文章到此结束了,不会吧,不会吧,异步传值得注意处理多线程下的共享变量问题呢</p>\n</blockquote>\n<p>![I8mrdA.png](<a href=\"https://z3.ax1x.com/2021/11/08/I8mrdA.png\">https://z3.ax1x.com/2021/11/08/I8mrdA.png</a> =100x100)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 判断之前是否已经赋值过了</span></span><br><span class=\"line\">     postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">     <span class=\"comment\">// 给mPendingData赋值 </span></span><br><span class=\"line\">     mPendingData = value;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 看到没有,他妈的,之前已经赋值就return了,好气哦,干嘛这样呢</span></span><br><span class=\"line\">   <span class=\"comment\">// 嘿,看下mPostValueRunnable没有,他就是防止煞笔多线程下多次赋相同值做的</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!postTask) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 把传值线程放到主线程执行</span></span><br><span class=\"line\">   ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 未赋值状态</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NOT_SET = <span class=\"keyword\">new</span> Object()</span><br><span class=\"line\"><span class=\"comment\">// 默认就是未赋值状态</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> Object mPendingData = NOT_SET</span><br><span class=\"line\"><span class=\"comment\">// 传值线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 看到没有,真正传值都是通过newValue来传的好不好</span></span><br><span class=\"line\">    Object newValue;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">      newValue = mPendingData;</span><br><span class=\"line\">      <span class=\"comment\">// 嘿嘿,这里回归默认未赋值状态了</span></span><br><span class=\"line\">      mPendingData = NOT_SET;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最终还是调到setValue啊,果然啊,条条道路通setValue啊</span></span><br><span class=\"line\">    setValue((T) newValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"setvalue()\">setValue()<a title=\"#setvalue()\" href=\"#setvalue()\"></a></h3>\n<blockquote>\n<blockquote>\n<p>有什么好说的,其他的一枪秒了,我才是传输数据的核心代码好不好,屁,dispatchingValue才是</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置传输数据。 如果有活跃的ObserverWrapper(观察者)，值将被分发给他们。    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">  mVersion++;</span><br><span class=\"line\">  mData = value;</span><br><span class=\"line\">  dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断事件分发是否已经在执行,是则打断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 事件分发开始</span></span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        <span class=\"comment\">// 事件分发结束</span></span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果生命周期管理者已经销毁,则忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在分发之前检查下最先状态,如果不在活跃阶段,则不改变状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断version , 因为从上面来看,每次赋值version都会变得</span></span><br><span class=\"line\">        <span class=\"comment\">// 他妈的的,这样就不会陷入多次分发,保证只取最先的传值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">// 执行每个生命周期管理者的观察者的事件分发</span></span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>get到没有?<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/I8YNWQ.png\" alt=\"I8YNWQ.png\" loading=\"lazy\">]</p>\n","prev":{"title":"Android黑科技 - 热修复和插件化基础","link":"2022/03/07/ukYPIjylHjywfytF"},"next":{"title":"源码学习 - Lifecycle","link":"2022/03/01/uVaapTCHAYrYDaHP"},"plink":"https://onion99.github.io/2022/03/02/p2ie22dC9NcVwpEH/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}