{"title":"Java并发(1) - volatile","date":"2021-11-07T15:50:26.000Z","date_formatted":{"ll":"2021年11月7日","L":"2021/11/07","MM-DD":"11-07"},"link":"2021/11/07/VqykJCDZZcenZo3O","comments":true,"tags":["并发"],"categories":["Java"],"updated":"2021-11-07T07:49:47.000Z","content":"<h3 id=\"java内存模型\">JAVA内存模型<a title=\"#java内存模型\" href=\"#java内存模型\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/04/IZ6xs0.png\" alt=\"IZ6xs0.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Java 内存模型规定了所有的变量都存储在主内存中。每条线程有自己的工作内存，线程的工作内存保存了被该线程所使用到的变量（从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成</p>\n<span id=\"more\"></span>\n<h3 id=\"volatile特性\">volatile特性<a title=\"#volatile特性\" href=\"#volatile特性\"></a></h3>\n<h4 id=\"可见性\">可见性<a title=\"#可见性\" href=\"#可见性\"></a></h4>\n<blockquote>\n<p>一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的</p>\n</blockquote>\n<p>如果对声明了 volatile 变量进行写操作时，JVM 会向处理器发送一条 Lock 前缀的指令，将这个变量所在缓存行的数据写会到系统内存。 这一步确保了如果有其他线程对声明了 volatile 变量进行修改，则立即更新主内存中数据。但这时候其他处理器的缓存还是旧的，所以在多处理器环境下，为了保证各个处理器缓存一致，每个处理会通过嗅探在总线上传播的数据来检查自己的缓存是否过期，当处理器发现自己缓存行对应的内存地址被修改了，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作时，会强制重新从系统内存把数据读到处理器缓存里。 这一步确保了其他线程获得的声明了 volatile 变量都是从主内存中获取最新的</p>\n<h4 id=\"禁止重排序\">禁止重排序<a title=\"#禁止重排序\" href=\"#禁止重排序\"></a></h4>\n<blockquote>\n<p>重排序是指处理器为了提高程序运行效率,可能会输入代码进行优化,可能会使执行顺序有所改变,但最终的结果会是一样的</p>\n</blockquote>\n<p>禁止指令重排序的意义:</p>\n<ul>\n<li>当程序执行到 volatile 变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行。</li>\n<li>在进行指令优化时，不能将在对 volatile 变量的读操作或者写操作的语句放在其后面执行，也不能把 volatile 变量后面的语句放到其前面执行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//x,y 为普通变量,volflag 被 volatile 修饰</span></span><br><span class=\"line\">x = <span class=\"number\">10</span>;          <span class=\"comment\">//语句1</span></span><br><span class=\"line\">y = <span class=\"number\">3</span>;           <span class=\"comment\">//语句2</span></span><br><span class=\"line\">volflag = <span class=\"keyword\">true</span>;  <span class=\"comment\">//语句3</span></span><br><span class=\"line\">x= <span class=\"number\">5</span>;           <span class=\"comment\">//语句4</span></span><br><span class=\"line\">y = <span class=\"number\">9</span>;           <span class=\"comment\">//语句5</span></span><br></pre></td></tr></table></figure>\n<p>代码思路:</p>\n<ul>\n<li>volflag被volatile修饰，所以语句3不会被重排到语句1、语句2前面，也不会被重排到语句4、语句5 的后面</li>\n<li>语句1、2 和语句4、5 的顺序是不能保证的</li>\n<li>volatile可以保证在执行到语句3的时候语句1、2是执行完毕的，语句4、5是没有执行的，并且语句1、2的执行结果对语句4、5是可见的</li>\n</ul>\n<h4 id=\"为什么不能保证一致性\">为什么不能保证一致性<a title=\"#为什么不能保证一致性\" href=\"#为什么不能保证一致性\"></a></h4>\n<blockquote>\n<p>一致性要满足三个条件：原子性，有序性，可见性</p>\n</blockquote>\n<ul>\n<li>原子性：即一个操作或者多个操作要么全部执行且执行的过程不会被任何因素打断，要么就都不执行。</li>\n<li>可见性：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li>\n<li>有序性：即程序执行的顺序按照代码的先后顺序执行</li>\n</ul>\n<p>volatile 变量是比锁弱一级的同步机制。当一个线程获取锁之后，别的线程就不能对其进行读写，但是声明一个 volatile 变量只会让该线程对该变量的任何修改对其他线程可见,所以不能保证原子性</p>\n<h3 id=\"应用\">应用<a title=\"#应用\" href=\"#应用\"></a></h3>\n<p>单例模式中的 double check:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;    </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125; </span><br><span class=\"line\">      </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;        </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>) &#123;            </span><br><span class=\"line\">           <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;                </span><br><span class=\"line\">             <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">       <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现机制\">实现机制<a title=\"#实现机制\" href=\"#实现机制\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到加入volatile关键字时，汇编后会多出一个lock前缀指令</span></span><br><span class=\"line\">Java代码: instance = <span class=\"keyword\">new</span> Singleton();<span class=\"comment\">//instance是volatile变量</span></span><br><span class=\"line\">汇编代码:  <span class=\"number\">0x01a3de1d</span>: movb $<span class=\"number\">0x0</span>,<span class=\"number\">0x1104800</span>(%esi);<span class=\"number\">0x01a3de24</span>: lock addl $<span class=\"number\">0x0</span>,(%esp);</span><br></pre></td></tr></table></figure>\n<p>Lock前缀指令实际上相当于一个内存屏障（也称内存围栏）,其作用如下:</p>\n<ul>\n<li>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成</li>\n<li>强制将对缓存的修改操作立即写入主内存</li>\n<li>如果是写操作，它会导致其他CPU中对应的缓存行无效</li>\n</ul>\n<h3 id=\"实现原理\">实现原理<a title=\"#实现原理\" href=\"#实现原理\"></a></h3>\n<ul>\n<li>可见性\n<ul>\n<li>volatile 修饰的共享变量的写操作会触发“嗅探”，让处理器本地缓存中的 volatile 变量失效</li>\n<li>声明了 volatile 的变量进行写操作时，JVM 会向处理器发送一条 Lock 前缀的指令，将这个变量所在缓存行的数据写回到系统内存。这一步确保了如果有其他线程对声明了 volatile 变量进行修改，则立即更新主内存中数据</li>\n</ul>\n</li>\n<li>有序性\n<ul>\n<li>内存屏障的作用</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"Java并发(2) - synchronize","link":"2021/11/07/FEETAEwJ336KYqim"},"next":{"title":"自定义View(11) - 滚动速度和滚动计算","link":"2021/11/03/cNDSpE5p4avS2tOi"},"plink":"http://onion66.gitee.io/blog/2021/11/07/VqykJCDZZcenZo3O/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}