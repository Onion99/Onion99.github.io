{"per_page":9,"total":5,"current":4,"data":[{"title":"课程 - 编码与加密","date":"2021-10-31T21:32:00.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h2 id=\"加密\">加密<a title=\"#加密\" href=\"#加密\"></a></h2>\n<blockquote>\n<p>加密(整容)是通过Intranet、Extranet和Internet进行安全的信息交换的基础</p>\n</blockquote>\n<p>常用加密</p>\n<ul>\n<li>对称加密算法</li>\n<li>非对称加密算法</li>\n<li>哈希算法</li>\n</ul>","link":"2021/10/31/MgnT9VQ3PhWZOJAq","tags":["课程学习"],"categories":["Android"]},{"title":"课程 - 登陆与授权","date":"2021-10-31T21:31:00.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h2 id=\"登录授权、tcp/ip、https和代理\">登录授权、TCP/IP、HTTPS和代理<a title=\"#登录授权、tcp/ip、https和代理\" href=\"#登录授权、tcp/ip、https和代理\"></a></h2>\n<p>登录：身份认证，确认你是你的过程。<br>\n授权：由身份或持有的令牌确认享有某些权限（例如获取用户信息）。登录过程实质上的目的也是为了确认权限</p>","link":"2021/10/31/Qqq7oSBqBc2Zgbrx","tags":["课程学习"],"categories":["Android"]},{"title":"源码学习 - Glide","date":"2021-10-31T21:29:17.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(fragment)</span><br><span class=\"line\">    .load(myUrl)</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"with()\">with()<a title=\"#with()\" href=\"#with()\"></a></h3>\n<blockquote>\n<p>用Method初始化glide的一些必需的环境，然后调用Requestmanagerretriver的<code>get()</code>获取requestManager。如果传入的对象是全局Context，你就不需要处理生命周期;如果输入是具有生命周期的View(包含Frg或Act)则将添加一个隐藏的Fragment来感知生命周期</p>\n</blockquote>","link":"2021/10/31/15jfHwStpctgCeeA","tags":["源码解析"],"categories":["Android"]},{"title":"源码学习 - OkHttp","date":"2021-10-31T21:28:18.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<blockquote>\n<p>http的连接本质上是个socket，根据http协议，通过socket包装发送请求并获得返回结果</p>\n</blockquote>\n<p>网路连接库一开始的样子如下代码所示，其实只要符合Http协议的请求，就可以和网络进行交互，类似于OkHttp的网络请求库，帮助开发者方便和屏蔽了Http协议中类似于请求头，重连、合并、代理、返回结果解析等等Http协议细节的应用层实现。</p>","link":"2021/10/31/4SVquTFcR8Wyv4GV","tags":["源码解析"],"categories":["Android"]},{"title":"安卓优化 - 布局优化","date":"2021-10-31T20:50:14.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h3 id=\"布局耗时统计\">布局耗时统计<a title=\"#布局耗时统计\" href=\"#布局耗时统计\"></a></h3>\n<ul>\n<li>手动埋点</li>\n<li>AOP/ArtHook\n<ul>\n<li>切入Activity的setContentView</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"布局加载优化\">布局加载优化<a title=\"#布局加载优化\" href=\"#布局加载优化\"></a></h3>\n<ul>\n<li>代码写布局\n<ul>\n<li>Java代码写布局</li>\n<li>Anko</li>\n<li>JetpackCompose</li>\n</ul>\n</li>\n<li>X2C</li>\n<li>Litho</li>\n</ul>","link":"2021/10/31/5FIszA6Ut2OHE8Sg","tags":["性能优化"],"categories":["Android"]},{"title":"安卓优化 - 线程优化","date":"2021-10-31T20:48:51.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h3 id=\"线程调度\">线程调度<a title=\"#线程调度\" href=\"#线程调度\"></a></h3>\n<blockquote>\n<p>任意时刻，只有一个线程占用CPU，处于运行状态</p>\n</blockquote>\n<p>多线程并发：轮流获取cpu使用权<br>\nJVM负责线程调度：按照特定调度模型分配CPU使用权</p>\n<h4 id=\"调度模型\">调度模型<a title=\"#调度模型\" href=\"#调度模型\"></a></h4>\n<ul>\n<li>分时调度模型: 轮流获取,均匀分配cpu时间</li>\n<li>抢占式调度模型:  按照优先级来</li>\n</ul>","link":"2021/10/31/6JN9JxpnRSjVeWry","tags":["性能优化"],"categories":["Android"]},{"title":"安卓优化 - 包体积","date":"2021-10-31T20:48:08.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"","link":"2021/10/31/9LsQhIFgDkllFt0Q","tags":["性能优化"],"categories":["Android"]},{"title":"安卓优化 - 卡顿优化","date":"2021-10-31T20:47:12.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<blockquote>\n<p>卡顿产生的根本原因就是CPU和GPU没有及时处理好数据，针对卡顿的优化就有思路了：尽可能减少 CPU 和 GPU 资源的消耗</p>\n</blockquote>\n<ul>\n<li>CPU：中央处理器（CPU，central processing unit）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</li>\n<li>GPU：图形处理器（英语：Graphics Processing Unit，缩写：GPU），又称显示核心,做图像和图形相关运算工作的微处理器</li>\n</ul>\n<h3 id=\"卡顿检测\">卡顿检测<a title=\"#卡顿检测\" href=\"#卡顿检测\"></a></h3>\n<p><a href=\"https://blog.csdn.net/lmj623565791/article/details/58626355\" target=\"_blank\">Android UI性能优化 检测应用中的UI卡顿</a></p>\n<p><a href=\"https://www.jianshu.com/p/9e8f88eac490\" target=\"_blank\">Android性能优化-检测App卡顿 - 简书 (jianshu.com)</a></p>","link":"2021/10/31/UYa5EEntsM9sKTYz","tags":["性能优化"],"categories":["Android"]},{"title":"安卓优化 - 内存优化","date":"2021-10-31T20:46:21.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h3 id=\"内存信息查看\">内存信息查看<a title=\"#内存信息查看\" href=\"#内存信息查看\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/28b9cd87e667\" target=\"_blank\">App内存优化实践：一步一步做内存分析与优化</a></p>\n<p>查看每个App进程可以分配到的最大内存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell getprop | grep dalvik.vm.heapsize</span><br></pre></td></tr></table></figure>\n<p>App的内存使用情况概览</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys meminfo 包名</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化工具\">优化工具<a title=\"#优化工具\" href=\"#优化工具\"></a></h3>\n<ul>\n<li>CPU Profiler</li>\n<li>Memory Analyzer（MAT）</li>\n<li>LeakCannary</li>\n</ul>","link":"2021/10/31/T8ghe13OAeLx6NBP","tags":["性能优化"],"categories":["Android"]}]}