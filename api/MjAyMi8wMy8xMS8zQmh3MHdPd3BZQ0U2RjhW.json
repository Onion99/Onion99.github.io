{"title":"Android AOP - AspectJ","date":"2022-03-11T09:40:38.000Z","date_formatted":{"ll":"2022年3月11日","L":"2022/03/11","MM-DD":"03-11"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLyk8K.md.png","link":"2022/03/11/3Bhw0wOwpYCE6F8V","comments":true,"tags":["AOP"],"categories":["Android"],"updated":"2022-03-11T02:45:00.000Z","content":"<blockquote>\n<p>AspectJ通过注解的形式来标注切入点、切入对象等，然后在代码编译期间将代码织入到java的字节码中</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>Android开源方案：<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx\" target=\"_blank\">AspectJX</a></p>\n<h3 id=\"引入依赖\">引入依赖<a title=\"#引入依赖\" href=\"#引入依赖\"></a></h3>\n<p>gradle引入：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">&#x27;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>应用plugin：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;android-aspectjx&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>AspectJX配置：</p>\n<p>AspectJX默认会处理所有的二进制代码文件和库，为了提升编译效率及规避部分第三方库出现的编译兼容性问题，AspectJX提供<code>include</code>,<code>exclude</code>命令来过滤需要处理的文件及排除某些文件(包括class文件及jar文件)。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspectjx &#123;</span><br><span class=\"line\">    <span class=\"comment\">//排除所有package路径中包含`android.support`的class文件及库（jar文件）</span></span><br><span class=\"line\">\texclude <span class=\"string\">&#x27;android.support&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开关配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspectjx &#123;</span><br><span class=\"line\">    <span class=\"comment\">//关闭AspectJX功能</span></span><br><span class=\"line\">\tenabled <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单使用\">简单使用<a title=\"#简单使用\" href=\"#简单使用\"></a></h3>\n<ol>\n<li>准备切入的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;animal fly method:&quot;</span> + <span class=\"keyword\">this</span>.toString() + <span class=\"string\">&quot;#fly&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写对应的切面类，用@Aspect注解</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">//①</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标注切入的方法，看到没有这里用的Poincut的 call</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&quot;)</span><span class=\"comment\">//②</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标注函数执行前处理</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;callMethod()&quot;)</span><span class=\"comment\">//③</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeMethodCall</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;before-&gt;&quot;</span> + joinPoint.getTarget().toString()); <span class=\"comment\">//④</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编译后就可以看到类的方法在执行前有代码插入了<br>\n<img src=\"https://s1.ax1x.com/2022/03/10/bhAMh8.png\" alt=\"bhAMh8.png\" loading=\"lazy\"></li>\n</ol>\n<h3 id=\"语法\">语法<a title=\"#语法\" href=\"#语法\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">JPoint</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">Pointcut语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">method call</td>\n<td style=\"text-align:left\">函数调用</td>\n<td style=\"text-align:left\">call(MethodSignature)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">method execution</td>\n<td style=\"text-align:left\">函数内部执行</td>\n<td style=\"text-align:left\">execution(MethodSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">method execution</td>\n<td style=\"text-align:left\">构造函数调用</td>\n<td style=\"text-align:left\">call(ConstructorSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">constructor execution</td>\n<td style=\"text-align:left\">构造函数内部执行</td>\n<td style=\"text-align:left\">execution(ConstructorSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field get</td>\n<td style=\"text-align:left\">读变量</td>\n<td style=\"text-align:left\">get(FieldSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field set</td>\n<td style=\"text-align:left\">写变量</td>\n<td style=\"text-align:left\">set(FieldSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static initialization</td>\n<td style=\"text-align:left\">静态代码块初始化</td>\n<td style=\"text-align:left\">staticinitialization(TypeSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">handler</td>\n<td style=\"text-align:left\">异常处理</td>\n<td style=\"text-align:left\">handler(TypeSignature),只能与@Before()配置使用</td>\n</tr>\n</tbody>\n</table></div></div><br/>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">Advice</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@Before(Pointcut)</td>\n<td style=\"text-align:left\">执行Jpoint之前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@After(Pointcut)</td>\n<td style=\"text-align:left\">执行Jpoint之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Around(Pointcut)</td>\n<td style=\"text-align:left\">替换原理的代码</td>\n</tr>\n</tbody>\n</table></div></div><p>完整语法看这<a href=\"https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf\" target=\"_blank\">AspectJ</a></p>\n<h3 id=\"注意点\">注意点<a title=\"#注意点\" href=\"#注意点\"></a></h3>\n<p>标注<code>call</code>和<code>execution</code>执行的时候，This和Target不同的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;callMethod-&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;callMethod()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeMethodCall</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;getTarget-&gt;&quot;</span> + joinPoint.getTarget());</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;getThis-&gt;&quot;</span> + joinPoint.getThis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>切入方：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    Animal animal = new Animal();</span><br><span class=\"line\">    animal.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTarget-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br><span class=\"line\">getThis-&gt;com.wandering.sample.aspectj.MainActivity@<span class=\"number\">98</span>c38bf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明target指代的是切入点方法的所有者，而this指代的是被织入代码所属类的实例对象。</p>\n</blockquote>\n<p>将切点的<code>call</code>改为<code>execution</code>：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTarget-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br><span class=\"line\">getThis-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br></pre></td></tr></table></figure>\n<h3 id=\"缺点\">缺点<a title=\"#缺点\" href=\"#缺点\"></a></h3>\n<ul>\n<li>如果相应的class没有实现相应的对点方法将无法织入，如Activity没有实现onResume方法的话，将无法织入代码。</li>\n<li>无法处理Lambda语法</li>\n<li>会有一系列兼容性问题，如R8、gradle版本不同等</li>\n<li>性能较差，APP项目比较大时编译时间明显加长</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf\" target=\"_blank\">Android-Demos/AspectJ.pdf</a><br>\n<a href=\"https://juejin.cn/post/6888548726424469511\" target=\"_blank\">Android AOP方案(一)——AspectJ</a><br>\n<a href=\"https://www.jianshu.com/p/28aa352af7fb\" target=\"_blank\">Android AOP - 简书</a><br>\n<a href=\"https://www.jianshu.com/p/d07c996ea13c\" target=\"_blank\">Android AspectJ</a></p>\n","prev":{"title":"Android AOP - ASM+Transform","link":"2022/03/12/Kt2Wobik8Fv12ZRY"},"next":{"title":"Android AOP - JDK动态代理","link":"2022/03/10/qyGiQE7cKbQOfEKm"},"plink":"https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}