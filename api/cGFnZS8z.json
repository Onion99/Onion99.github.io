{"per_page":9,"total":4,"current":3,"data":[{"title":"自定义View(5) - 动画","date":"2021-11-03T21:59:44.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<blockquote>\n<p>三者性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，差别只是使用的便捷性以及功能的灵活性。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFf4h9.gif\" alt=\"IFf4h9.gif\" loading=\"lazy\" class=\"φbp\"></p>","link":"2021/11/03/SA664RldODNgeCrz","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(4) - Canvas相关","date":"2021-11-03T21:58:53.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<h3 id=\"范围裁切\">范围裁切<a title=\"#范围裁切\" href=\"#范围裁切\"></a></h3>\n<h4 id=\"cliprect\">clipRect<a title=\"#cliprect\" href=\"#cliprect\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFKTER.png\" alt=\"IFKTER.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.clipRect(left, top, right, bottom);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, x, y, paint);</span><br><span class=\"line\"><span class=\"comment\">// 加上 Canvas.save() 和 Canvas.restore() 来及时恢复绘制范围</span></span><br><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.clipRect(left, top, right, bottom);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, x, y, paint);</span><br><span class=\"line\">canvas.restore();</span><br></pre></td></tr></table></figure>","link":"2021/11/03/ZOnr24kULe7cQgsc","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(3) - Text相关","date":"2021-11-03T21:57:48.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"excerpt":"<h3 id=\"文字绘制(canvas)\">文字绘制(Canvas)<a title=\"#文字绘制(canvas)\" href=\"#文字绘制(canvas)\"></a></h3>\n<h4 id=\"绘制方式\">绘制方式<a title=\"#绘制方式\" href=\"#绘制方式\"></a></h4>\n<h5 id=\"drawtext\">drawText<a title=\"#drawtext\" href=\"#drawtext\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IiheJA.png\" alt=\"IiheJA.png\" loading=\"lazy\" class=\"φbp\"></p>","link":"2021/11/03/VjI1fQxy8MSFqUqm","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(2) - Paint相关","date":"2021-11-01T22:19:10.000Z","date_formatted":{"ll":"2021年11月1日","L":"2021/11/01","MM-DD":"11-01"},"excerpt":"<h3 id=\"color\">Color<a title=\"#color\" href=\"#color\"></a></h3>\n<h4 id=\"基本颜色\">基本颜色<a title=\"#基本颜色\" href=\"#基本颜色\"></a></h4>\n<p>setColor(int color):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setColor(Color.parseColor(<span class=\"string\">&quot;#009688&quot;</span>));</span><br><span class=\"line\">canvas.drawRect(<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">230</span>, <span class=\"number\">180</span>, paint);</span><br></pre></td></tr></table></figure>","link":"2021/11/01/weRgrdLnBqIUWkcH","tags":["图形绘制"],"categories":["Android"]},{"title":"自定义View(1) - 基本绘制","date":"2021-11-01T22:17:37.000Z","date_formatted":{"ll":"2021年11月1日","L":"2021/11/01","MM-DD":"11-01"},"excerpt":"<blockquote>\n<p>简单的绘制基本由<code>Canvas.drawxxx()</code>和Paint的配置组成</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC9uZj.png\" alt=\"IC9uZj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaintView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>) : View(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mPaint <span class=\"keyword\">by</span> lazy &#123; Paint() &#125;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDraw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas)</span><br><span class=\"line\">    paint.setColor(Color.RED)<span class=\"comment\">// 设置为红色</span></span><br><span class=\"line\">    canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, paint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","link":"2021/11/01/K0uh0dFU4QBtZ8Wm","tags":["图形绘制"],"categories":["Android"]},{"title":"Java 理论","date":"2021-10-31T21:33:20.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h2 id=\"jvm\">JVM<a title=\"#jvm\" href=\"#jvm\"></a></h2>\n<blockquote>\n<p>即Java虚拟机,是java程序与OS之间的处理中介,屏蔽了与OS平台相关的具体信息.从而实现跨平台</p>\n</blockquote>\n<p>JRE: java运行环境<br>\nJDK:java开发工具包</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/29/5XeI1O.png\" alt=\"5XeI1O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>组成:</p>\n<ul>\n<li>类装载子系统（ClassLoader）</li>\n<li>运行时数据区</li>\n<li>执行引擎</li>\n<li>内存回收</li>\n</ul>","link":"2021/10/31/nOSSxZ51uxl6hUq8","tags":["理论学习"],"categories":["Java"]},{"title":"课程-编码与加密","date":"2021-10-31T21:32:00.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h2 id=\"加密\">加密<a title=\"#加密\" href=\"#加密\"></a></h2>\n<blockquote>\n<p>加密(整容)是通过Intranet、Extranet和Internet进行安全的信息交换的基础</p>\n</blockquote>\n<p>常用加密</p>\n<ul>\n<li>对称加密算法</li>\n<li>非对称加密算法</li>\n<li>哈希算法</li>\n</ul>","link":"2021/10/31/MgnT9VQ3PhWZOJAq","tags":["课程学习"],"categories":["Android"]},{"title":"课程-登陆与授权","date":"2021-10-31T21:31:00.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<h2 id=\"登录授权、tcp/ip、https和代理\">登录授权、TCP/IP、HTTPS和代理<a title=\"#登录授权、tcp/ip、https和代理\" href=\"#登录授权、tcp/ip、https和代理\"></a></h2>\n<p>登录：身份认证，确认你是你的过程。<br>\n授权：由身份或持有的令牌确认享有某些权限（例如获取用户信息）。登录过程实质上的目的也是为了确认权限</p>","link":"2021/10/31/Qqq7oSBqBc2Zgbrx","tags":["课程学习"],"categories":["Android"]},{"title":"源码学习-Glide","date":"2021-10-31T21:29:17.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"excerpt":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(fragment)</span><br><span class=\"line\">    .load(myUrl)</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"with()\">with()<a title=\"#with()\" href=\"#with()\"></a></h3>\n<blockquote>\n<p>用Method初始化glide的一些必需的环境，然后调用Requestmanagerretriver的<code>get()</code>获取requestManager。如果传入的对象是全局Context，你就不需要处理生命周期;如果输入是具有生命周期的View(包含Frg或Act)则将添加一个隐藏的Fragment来感知生命周期</p>\n</blockquote>","link":"2021/10/31/15jfHwStpctgCeeA","tags":["源码解析"],"categories":["Android"]}]}