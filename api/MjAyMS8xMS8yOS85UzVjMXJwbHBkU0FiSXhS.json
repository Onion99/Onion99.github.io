{"title":"源码学习-ViewModel","date":"2021-11-29T23:30:53.000Z","date_formatted":{"ll":"2021年11月29日","L":"2021/11/29","MM-DD":"11-29"},"link":"2021/11/29/9S5c1rplpdSAbIxR","comments":true,"tags":["源码解析"],"categories":["Android"],"updated":"2021-11-29T15:30:31.000Z","content":"<p>首先看看ViewModel是怎么样实例化</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel?&gt;</span> <span class=\"title\">getFragmentScopeViewModel</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!::fragmentProvider.isInitialized) &#123;</span><br><span class=\"line\">        fragmentProvider = ViewModelProvider(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragmentProvider.<span class=\"keyword\">get</span>(modelClass)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel?&gt;</span> <span class=\"title\">getActivityScopeViewModel</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!::activityProvider.isInitialized) &#123;</span><br><span class=\"line\">        activityProvider = ViewModelProvider(requireActivity())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> activityProvider.<span class=\"keyword\">get</span>(modelClass)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我超,原来是通过一个ViewModelProvider去get到的,他妈的这是干什么的呢,为什么要通过ViewModelProvider获取呢<br>\n<img src=\"http://img.doutula.com/production/uploads/image/2019/06/06/20190606755268_TSvBec.jpg\" alt=\"\" loading=\"lazy\"><br>\n我怎么知道,瞧瞧官方正儿八经的回答吧<br>\n<code>ViewModel</code>:旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存<br>\n<code>ViewModelProvider</code>: ViewModel的辅助程序类，该类负责为界面准备数据。在配置更改期间会自动保留 ViewModel 对象，以便它们存储的数据立即可供下一个 activity 或 fragment 实例使用</p>\n<span id=\"more\"></span>\n<p>好家伙,原来是这对组合,以生命周期的方式耶,看看有什么不同</p>\n<h3 id=\"activty与viewmodel的生命周期\">Activty与ViewModel的生命周期<a title=\"#activty与viewmodel的生命周期\" href=\"#activty与viewmodel的生命周期\"></a></h3>\n<blockquote>\n<p>牛逼,战斗直至Finish</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8L0jU.png\" alt=\"I8L0jU.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>官方说:ViewModel对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的Lifecycle。ViewModel将一直留在内存中，直到限定其存在时间范围的Lifecycle永久消失：<br>\n对于activity，是在activity完成时；<br>\n对于fragment，是在 fragment分离时</p>\n<p>好了,来看看ViewModelProvider是怎样实现构造的</p>\n<h3 id=\"viewmodelprovider()\">ViewModelProvider()<a title=\"#viewmodelprovider()\" href=\"#viewmodelprovider()\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尼玛的,偷偷调用另一构造函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 1.创建用来存储ViewModel的ViewModelStore, 2. 创建用于实例化新ViewModel的Factory</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), owner <span class=\"keyword\">instanceof</span> HasDefaultViewModelProviderFactory</span><br><span class=\"line\">                ? ((HasDefaultViewModelProviderFactory) owner).getDefaultViewModelProviderFactory()</span><br><span class=\"line\">                : NewInstanceFactory.getInstance());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelstore\">ViewModelStore<a title=\"#viewmodelstore\" href=\"#viewmodelstore\"></a></h4>\n<p>这个是接口何许玩意,原来到后面Activity,Fragment等都实现了这个接口,以来获取跟当前生命周期相关的ViewModelStore,看到没有,有图有真相<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/I8xIk4.png\" alt=\"I8xIk4.png\" loading=\"lazy\"><br>\n看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 叉,这里照我猜想肯定是实现ViewModelStore的单例</span></span><br><span class=\"line\">    ensureViewModelStore();</span><br><span class=\"line\">    <span class=\"comment\">// 返回与此Activity关联的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ensureViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检索先前由onRetainNonConfigurationInstance()返回的配置变更后的缓存配置</span></span><br><span class=\"line\">        NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 如果缓存配置不为空,则取缓存配置的viewModelStore</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nc != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mViewModelStore = nc.viewModelStore;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 否则自己实例一个</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mViewModelStore == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mViewModelStore = <span class=\"keyword\">new</span> ViewModelStore();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<p>嘿嘿,存储ViewModel的ViewModelStore,牛逼啊,用一个HashMap来缓存看到有木有:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) oldViewModel.onCleared();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IG8UgA.png\" alt=\"IG8UgA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"viewmodelproviderfactory\">ViewModelProviderFactory<a title=\"#viewmodelproviderfactory\" href=\"#viewmodelproviderfactory\"></a></h4>\n<p>同样的后面Activity,Fragment等也实现了HasDefaultViewModelProviderFactory接口,实现自己创建ViewModel的ViewModelProviderFactory, 来看图<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGEOT1.png\" alt=\"IGEOT1.png\" loading=\"lazy\"><br>\n再来看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ViewModelProvider.<span class=\"function\">Factory <span class=\"title\">getDefaultViewModelProviderFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 妈的,就是这么简单,直接实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mDefaultFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mDefaultFactory = <span class=\"keyword\">new</span> SavedStateViewModelFactory(</span><br><span class=\"line\">                getApplication(),</span><br><span class=\"line\">                <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                getIntent() != <span class=\"keyword\">null</span> ? getIntent().getExtras() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mDefaultFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有点东西,这样就实例<code>SavedStateViewModelFactory</code>了,看看具体怎么<code>get()</code>霍</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步:小get</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">    String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">    <span class=\"comment\">// 好家伙,看到没有,如果这里判断是局部类或者匿名类,就直接给crash了,谷歌就是牛逼</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canonicalName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 嘿,继续get下去</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 第二步:大get</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">    ViewModel viewModel = mViewModelStore.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 首先是判断是否有缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> OnRequeryFactory) &#123;</span><br><span class=\"line\">            ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 然后如果为null,则通过具体工厂类去实例化ViewModel</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mFactory <span class=\"keyword\">instanceof</span> KeyedFactory) &#123;</span><br><span class=\"line\">        viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 嘿嘿,放进缓存</span></span><br><span class=\"line\">    mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// ViewModel的实例化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isAndroidViewModel = AndroidViewModel.class.isAssignableFrom(modelClass);</span><br><span class=\"line\">    Constructor&lt;T&gt; constructor;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射,去找到当前ViewModel的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        constructor = findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        constructor = findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (constructor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mFactory.create(modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SavedStateHandleController controller = SavedStateHandleController.create(</span><br><span class=\"line\">            mSavedStateRegistry, mLifecycle, key, mDefaultArgs);</span><br><span class=\"line\">    <span class=\"comment\">// 嘿嘿,调用构造函数,实例化        </span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        T viewmodel;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            viewmodel = constructor.newInstance(mApplication, controller.getHandle());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewmodel = constructor.newInstance(controller.getHandle());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        viewmodel.setTagIfAbsent(TAG_SAVED_STATE_HANDLE_CONTROLLER, controller);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> viewmodel;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;Failed to access &quot;</span> + modelClass, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;A &quot;</span> + modelClass + <span class=\"string\">&quot; cannot be instantiated.&quot;</span>, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;An exception happened in constructor of &quot;</span></span><br><span class=\"line\">                + modelClass, e.getCause());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n<h3 id=\"viewmodel的架构作用\">ViewModel的架构作用<a title=\"#viewmodel的架构作用\" href=\"#viewmodel的架构作用\"></a></h3>\n<p>向官方敬礼,懂不懂这张图的含金量,懂不懂MMVM<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGd3ff.png\" alt=\"IGd3ff.png\" loading=\"lazy\"><br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGwfKg.png\" alt=\"IGwfKg.png\" loading=\"lazy\"></p>\n","next":{"title":"源码学习-HashMap","link":"2021/11/29/4diQitvVwGPnicN5"},"plink":"https://onion99.github.io/2021/11/29/9S5c1rplpdSAbIxR/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}