{"title":"源码学习-ViewModel","date":"2021-11-29T23:30:53.000Z","date_formatted":{"ll":"2021年11月29日","L":"2021/11/29","MM-DD":"11-29"},"thumbnail":"https://s4.ax1x.com/2022/03/02/b3GOSg.md.png","link":"2021/11/29/9S5c1rplpdSAbIxR","comments":true,"tags":["源码解析"],"categories":["Android"],"updated":"2021-11-29T15:30:31.000Z","content":"<blockquote>\n<p>ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存,将视图和数据进行了分离解耦，为视图层提供数据</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"配置变更保存数据的方式\">配置变更保存数据的方式<a title=\"#配置变更保存数据的方式\" href=\"#配置变更保存数据的方式\"></a></h3>\n<ul>\n<li>onSaveInstance(Bundle)</li>\n<li>ViewModel</li>\n</ul>\n<h3 id=\"viewmodel优势\">ViewModel优势<a title=\"#viewmodel优势\" href=\"#viewmodel优势\"></a></h3>\n<ul>\n<li>ViewModel是将数据存到内存中，而onSaveInstance()是通过Bundle将序列化数据存在磁盘中</li>\n<li>ViewModel可以存储任何形式的数据，且大小不限制(不超过App分配的内存即可)，onSaveInstance()中只能存储可序列化的数据，且大小一般不超过1M（IPC通信数据限制）</li>\n</ul>\n<h3 id=\"viewmodel生命周期\">ViewModel生命周期<a title=\"#viewmodel生命周期\" href=\"#viewmodel生命周期\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8L0jU.png\" alt=\"I8L0jU.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>ViewModel对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的Lifecycle。ViewModel将一直留在内存中，直到限定其存在时间范围的Lifecycle永久消失：<br>\n对于activity，是在activity销毁时；<br>\n对于fragment，是在 fragment分离时</p>\n<h3 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h3>\n<h4 id=\"viewmodel是怎么样实例化的?\">ViewModel是怎么样实例化的?<a title=\"#viewmodel是怎么样实例化的?\" href=\"#viewmodel是怎么样实例化的?\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BindingActivity</span>&lt;<span class=\"type\">T : ViewDataBinding</span>&gt; <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    <span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> layoutId: <span class=\"built_in\">Int</span></span><br><span class=\"line\">) : AppCompatActivity(), HasAndroidInjector &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel?&gt;</span> <span class=\"title\">getActivityScopeViewModel</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化对应Scope的ViewModelProvider</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::activityProvider.isInitialized) &#123;</span><br><span class=\"line\">            activityProvider = ViewModelProvider(requireActivity())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取ViewModelProvider获取Viewmodel</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> activityProvider.<span class=\"keyword\">get</span>(modelClass)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelprovider又是啥?\">ViewModelProvider又是啥?<a title=\"#viewmodelprovider又是啥?\" href=\"#viewmodelprovider又是啥?\"></a></h4>\n<blockquote>\n<p>ViewModel的辅助程序类，该类负责为界面准备数据。在配置更改期间会自动保留 ViewModel 对象，以便它们存储的数据立即可供下一个 activity 或 fragment 实例使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 为Fragment/Activity提供ViewModels的实用程序类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.创建用来存储ViewModel的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 创建用于实例化新ViewModel的Factory</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), owner <span class=\"keyword\">instanceof</span> HasDefaultViewModelProviderFactory</span><br><span class=\"line\">                ? ((HasDefaultViewModelProviderFactory) owner).getDefaultViewModelProviderFactory()</span><br><span class=\"line\">                : NewInstanceFactory.getInstance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner, <span class=\"meta\">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStore store, <span class=\"meta\">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class=\"line\">        mFactory = factory;</span><br><span class=\"line\">        mViewModelStore = store;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModelProvider 关键参数组成:</p>\n<ul>\n<li>ViewModelStoreOwner：ViewModel存储器拥有者，用来提供ViewModelStore</li>\n<li>ViewModelStore：ViewModel存储器，用来存储ViewModel</li>\n<li>ViewModelProviderFactory：创建ViewModel的工厂</li>\n</ul>\n<p>首先尝试通过ViewModelStore.get(key)获取ViewModel，如果不为空直接返回该实例；如果为空，通过Factory.create创建ViewModel并保存到ViewModelStore中。先来看Factory是如何创建ViewModel的，ViewModelProvider构造函数中，如果没有传入Factory，那么会使用NewInstanceFactory</p>\n<h4 id=\"viewmodelprovider中的owner和factory怎么来的?\">ViewModelProvider中的Owner和Factory怎么来的?<a title=\"#viewmodelprovider中的owner和factory怎么来的?\" href=\"#viewmodelprovider中的owner和factory怎么来的?\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"viewmodelproviderfactory\">ViewModelProviderFactory<a title=\"#viewmodelproviderfactory\" href=\"#viewmodelproviderfactory\"></a></h5>\n<blockquote>\n<p>Activity,Fragment默认实现了HasDefaultViewModelProviderFactory接口,实现自己创建ViewModel的ViewModelProviderFactory</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGEOT1.png\" alt=\"IGEOT1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>再来看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span></span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"comment\">/* 返回未向ViewModelProvider构造函数提供自定义Factory时应使用的默认ViewModelProvider.Factory  */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewModelProvider.<span class=\"function\">Factory <span class=\"title\">getDefaultViewModelProviderFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 妈的,就是这么简单,直接实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDefaultFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mDefaultFactory = <span class=\"keyword\">new</span> SavedStateViewModelFactory(</span><br><span class=\"line\">                    getApplication(),</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    getIntent() != <span class=\"keyword\">null</span> ? getIntent().getExtras() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mDefaultFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<h5 id=\"viewmodelstore\">ViewModelStore<a title=\"#viewmodelstore\" href=\"#viewmodelstore\"></a></h5>\n<blockquote>\n<p>Activity,Fragment也默认实现了这个接口,以来获取跟当前生命周期相关的ViewModelStore,看到没有,有图有真相</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8xIk4.png\" alt=\"I8xIk4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 叉,这里照我猜想肯定是实现ViewModelStore的单例</span></span><br><span class=\"line\">    ensureViewModelStore();</span><br><span class=\"line\">    <span class=\"comment\">// 返回与此Activity关联的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>void ensureViewModelStore() &#123;\n    if (mViewModelStore == null) &#123;\n        // 检索先前由onRetainNonConfigurationInstance()返回的配置变更后的缓存配置\n        NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance();\n        // 如果缓存配置不为空,则取缓存配置的viewModelStore\n        if (nc != null) &#123;\n            mViewModelStore = nc.viewModelStore;\n        &#125;\n        // 否则自己实例一个\n        if (mViewModelStore == null) &#123;\n            mViewModelStore = new ViewModelStore();\n        &#125;\n    &#125;\n&#125;    \n</code></pre>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**通过getLastNonConfigurationInstance()我们可以在知道 **</span><br><span class=\"line\">ViewModelStore的存取都是间接在ActivityThread中进行并保存在ActivityClientRecord中。在Activity配置变化时，ViewModelStore可以在Activity销毁时得以保存并在重建时重新从lastNonConfigurationInstances中获取，又因为ViewModelStore提供了ViewModel，所以ViewModel也可以在Activity配置变化时得以保存，这也是为什么ViewModel的生命周期比Activity生命周期长的原因了。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 最后ViewModelProvider是如何<span class=\"keyword\">get</span>到 Viewmodel的?</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">    <span class=\"comment\">// 第一步:小get</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"comment\">// 好家伙,看到没有,如果这里判断是局部类或者匿名类,就直接给crash了,谷歌就是牛逼</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 首先构造了一个key，直接调用下面的get(key,modelClass)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第二步:大get</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br><span class=\"line\">        <span class=\"comment\">// 尝试从ViewModelStore中获取ViewModel</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory instanceof OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// viewModel不为空直接返回该实例</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 然后如果为null,则通过具体工厂类去实例化ViewModel</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory instanceof KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 嘿嘿,放进缓存</span></span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ViewModel的实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T create(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        boolean isAndroidViewModel = AndroidViewModel.<span class=\"keyword\">class</span>.isAssignableFrom(modelClass);</span><br><span class=\"line\">        Constructor&lt;T&gt; <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射,去找到当前ViewModel的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">constructor</span> = findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">constructor</span> = findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">constructor</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SavedStateHandleController controller = SavedStateHandleController.create(</span><br><span class=\"line\">                mSavedStateRegistry, mLifecycle, key, mDefaultArgs);</span><br><span class=\"line\">        <span class=\"comment\">// 嘿嘿,调用构造函数,实例化        </span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T viewmodel;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                viewmodel = <span class=\"keyword\">constructor</span>.newInstance(mApplication, controller.getHandle());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                viewmodel = <span class=\"keyword\">constructor</span>.newInstance(controller.getHandle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            viewmodel.setTagIfAbsent(TAG_SAVED_STATE_HANDLE_CONTROLLER, controller);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> viewmodel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;Failed to access &quot;</span> + modelClass, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;A &quot;</span> + modelClass + <span class=\"string\">&quot; cannot be instantiated.&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;An exception happened in constructor of &quot;</span></span><br><span class=\"line\">                    + modelClass, e.getCause());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelstore-是是如何存储viewmodel的?\">ViewModelStore 是是如何存储ViewModel的?<a title=\"#viewmodelstore-是是如何存储viewmodel的?\" href=\"#viewmodelstore-是是如何存储viewmodel的?\"></a></h4>\n<p>嘿嘿,存储ViewModel的ViewModelStore,牛逼啊,用一个HashMap来缓存看到有木有:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/61bfe8240cd5d1648037da8bdc77ea8e.png\" alt=\"viewmodelcreate.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) oldViewModel.onCleared();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IG8UgA.png\" alt=\"IG8UgA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"viewmodel意义\">ViewModel意义<a title=\"#viewmodel意义\" href=\"#viewmodel意义\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGd3ff.png\" alt=\"IGd3ff.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGwfKg.png\" alt=\"IGwfKg.png\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"源码学习-Lifecycle","link":"2022/03/01/uVaapTCHAYrYDaHP"},"next":{"title":"源码学习-HashMap","link":"2021/11/29/4diQitvVwGPnicN5"},"plink":"http://onion66.gitee.io/blog/2021/11/29/9S5c1rplpdSAbIxR/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}