{"title":"Android - 多渠道打包","date":"2022-03-13T09:49:49.000Z","date_formatted":{"ll":"2022年3月13日","L":"2022/03/13","MM-DD":"03-13"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bL6CLQ.md.png","link":"2022/03/13/XJTlmsU39F0XEnje","comments":true,"categories":["Android"],"updated":"2022-03-13T01:50:00.000Z","content":"<blockquote>\n<p>本质就是给APK添加特定的标签信息</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"普通多渠道打包方案\">普通多渠道打包方案<a title=\"#普通多渠道打包方案\" href=\"#普通多渠道打包方案\"></a></h3>\n<h4 id=\"android-gradle-plugin\">Android Gradle Plugin<a title=\"#android-gradle-plugin\" href=\"#android-gradle-plugin\"></a></h4>\n<ol>\n<li>首先，在AndroidManifest.xml中添加渠道信息占位符：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:name</span>=<span class=\"string\">&quot;InstallChannel&quot;</span> <span class=\"attr\">android:value</span>=<span class=\"string\">&quot;$&#123;InstallChannel&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过Gradle Plugin提供的<code>productFlavors</code>标签，添加渠道信息：</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">productFlavors&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;YingYongBao&quot;</span>&#123;</span><br><span class=\"line\">        manifestPlaceholders = [<span class=\"attr\">InstallChannel :</span> <span class=\"string\">&quot;YingYongBao&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"string\">&quot;360&quot;</span>&#123;</span><br><span class=\"line\">        manifestPlaceholders = [<span class=\"attr\">InstallChannel :</span> <span class=\"string\">&quot;360&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"apktool\">ApkTool<a title=\"#apktool\" href=\"#apktool\"></a></h4>\n<blockquote>\n<p>ApkTool是一个逆向分析工具，可以把APK解开，添加代码后，重新打包成APK</p>\n</blockquote>\n<ul>\n<li>复制一份新的APK</li>\n<li>通过ApkTool工具，解压APK（apktool d origin.apk）</li>\n<li>删除已有签名信息</li>\n<li>添加渠道信息（可以在APK的任何文件添加渠道信息）</li>\n<li>通过ApkTool工具，重新打包生成新APK（apktool b newApkDir）</li>\n<li>重新签名</li>\n</ul>\n<p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\">Apktool - A tool for reverse engineering 3rd party, closed, binary Android apps</a></p>\n<h3 id=\"添加comments多渠道打包\">添加comments多渠道打包<a title=\"#添加comments多渠道打包\" href=\"#添加comments多渠道打包\"></a></h3>\n<blockquote>\n<p>利用的是Zip文件“可以添加comment（摘要）”的数据结构特点，在文件的末尾写入任意数据，而不用重新解压zip文件（apk文件就是zip文件格式）</p>\n</blockquote>\n<p>开源实现:<a href=\"https://github.com/seven456/MultiChannelPackageTool\" target=\"_blank\">seven456/MultiChannelPackageTool: Android Multi channel package tool （安卓多渠道打包工具）</a></p>\n<p>但由于Android7.0之后新增了V2签名，该签名会校验整个APK的数据摘要，导致上述渠道打包方案失效。所以如果想继续使用上述方案，需要关闭Gradle Plugin中的V2签名选项，禁用V2签名。</p>\n<h3 id=\"美团的android多渠道打包\">美团的Android多渠道打包<a title=\"#美团的android多渠道打包\" href=\"#美团的android多渠道打包\"></a></h3>\n<blockquote>\n<p>通过可扩展的APK Signature Scheme v2 Block,添加渠道信息</p>\n</blockquote>\n<p>开源实现: <a href=\"https://github.com/Meituan-Dianping/walle\" target=\"_blank\">Meituan-Dianping/walle: Android Signature V2 Scheme签名下的新一代渠道包打包神器</a></p>\n<p>原理:<a href=\"https://tech.meituan.com/2017/01/13/android-apk-v2-signature-scheme.html\" target=\"_blank\">新一代开源Android渠道包生成工具Walle - 美团技术团队 (meituan.com)</a></p>\n<h3 id=\"豌豆荚android多渠道打包\">豌豆荚Android多渠道打包<a title=\"#豌豆荚android多渠道打包\" href=\"#豌豆荚android多渠道打包\"></a></h3>\n<blockquote>\n<p>把一个Android应用包当作zip文件包进行解压，然后发现在签名生成的目录下添加一个空文件不需要重新签名。利用这个机制，该文件的文件名就是渠道名。但由于v2签名的校验机制,添加了一个非空文件就会破坏签名校验，需要重新签名。</p>\n</blockquote>\n<!--more-->\n<p>提前构建一个没有渠道的APK，输入原始APK文件和渠道号，产出包含渠道号标记的APK.</p>\n<p>1.使用AAPT添加渠道文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aapt add base.apk asserts/channel.txt</span><br></pre></td></tr></table></figure>\n<p>2.使用zipalign工具将APK进行字节对齐</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign -f 4 base.apk  app_zipalign.apk&#125;</span><br></pre></td></tr></table></figure>\n<p>3.使用apksigner对apk重新签名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apksigner sign --v1-signer-name CERT -ks $&#123;mStore&#125; --ks-key-alias $&#123;mAlias&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apk打包流程\">APK打包流程<a title=\"#apk打包流程\" href=\"#apk打包流程\"></a></h3>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWKCWV.png\" alt=\"bWKCWV.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>打包资源文件，生成 R.java 文件\n<ul>\n<li>aapt 工具（aapt.exe） -&gt; AndroidManifest.xml 和 布局文件 XMl 都会编译 -&gt; R.java -&gt; AndroidManifest.xml 会被 aapt 编译成二进制</li>\n<li>res 目录下资源 -&gt; 编译，变成二进制文件，生成 resource id -&gt; 最后生成 resouce.arsc（文件索引表）</li>\n</ul>\n</li>\n<li>处理 aidl 文件，生成相应的 Java 文件\n<ul>\n<li>aidl 工具（aidl.exe）</li>\n</ul>\n</li>\n<li>编译项目源代码，生成 class 文件</li>\n<li>转换所有 class 文件，生成 classes.dex 文件\n<ul>\n<li>dx.bat</li>\n</ul>\n</li>\n<li>打包生成 APK 文件\n<ul>\n<li>apkbuilder 工具打包到最终的 .apk 文件中</li>\n</ul>\n</li>\n<li>对APK文件进行签名</li>\n<li>对签名后的 APK 文件进行对齐处理（正式包）</li>\n<li>对 APK 进行对齐处理，用到的工具是 zipalign</li>\n</ul>\n<h3 id=\"apk-签名\">APK 签名<a title=\"#apk-签名\" href=\"#apk-签名\"></a></h3>\n<blockquote>\n<p>了解 HTTPS 通信的同学都知道，在消息通信时，必须至少解决两个问题：一是确保消息来源的真实性，二是确保消息不会被第三方篡改。<br>\n同理，在安装 apk 时，同样也需要确保 apk 来源的真实性，以及 apk 没有被第三方篡改</p>\n</blockquote>\n<p>签名机制主要有两种用途：</p>\n<ul>\n<li>使用特殊的 key 签名可以获取到一些不同的权限</li>\n<li>验证数据保证不被篡改，防止应用被恶意的第三方覆盖</li>\n</ul>\n<p>签名工具</p>\n<ul>\n<li>jarsigner：jdk 自带的签名工具，对 jar 进行签名。使用 keystore 文件进行签名，生成的签名文件默认使用 keystore 的别名命名。</li>\n<li>apksigner：Android sdk 提供的专门用于 Android 应用的签名工具。使用 pk8、x509.pem 文件进行签名。 pk8 是私钥文件，x509.pem 是含有公钥的文件。生成的签名文件统一使用“CERT”命名。</li>\n</ul>\n<h4 id=\"v1-签名\">V1 签名<a title=\"#v1-签名\" href=\"#v1-签名\"></a></h4>\n<blockquote>\n<p>基于 JAR 签名</p>\n</blockquote>\n<h5 id=\"签名\">签名<a title=\"#签名\" href=\"#签名\"></a></h5>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWMbDg.png\" alt=\"bWMbDg.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"校验\">校验<a title=\"#校验\" href=\"#校验\"></a></h5>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWQS2V.png\" alt=\"bWQS2V.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>检查 APK 中包含的所有文件，对应的摘要值与 MANIFEST.MF 文件中记录的值一致。</li>\n<li>使用证书文件（RSA 文件）检验签名文件（SF 文件）没有被修改过。</li>\n<li>使用签名文件（SF 文件）检验 MF 文件没有被修改过。</li>\n</ul>\n<h5 id=\"v1-弊端\">v1 弊端<a title=\"#v1-弊端\" href=\"#v1-弊端\"></a></h5>\n<ul>\n<li>签名检验速度慢：对所有文件进行摘要绩，如果 Android 机器差，安装速度慢。</li>\n<li>完整性保障不够：META-INF 目录用来存放签名，但可以随意添加文件。</li>\n</ul>\n<h4 id=\"v2-签名\">v2 签名<a title=\"#v2-签名\" href=\"#v2-签名\"></a></h4>\n<blockquote>\n<p>一种全文件签名方案，能够发现对 APK 的受保护部分进行的所有更改，从而有助于加快验证速度并增强完整性保证。</p>\n</blockquote>\n<ul>\n<li>\n<p>验证归档中的所有字节，而不是单个 ZIP 条目，因此，在签署后无法再运行 ZIPalign（必须在签名之前执行）</p>\n</li>\n<li>\n<p>v2 会在原先 APK 块中增加了一个Signing Block（签名块），新的块存储了签名、摘要、签名算法、证书链和额外属性等信息。最终的签名APK有四块：头文件区、V2签名块、中央目录、尾部。</p>\n</li>\n</ul>\n<p>各版本签名组成:<br>\n<img src=\"https://s1.ax1x.com/2022/03/09/bWl9JI.png\" alt=\"bWl9JI.png\" loading=\"lazy\"></p>\n<h4 id=\"v3-签名\">v3 签名<a title=\"#v3-签名\" href=\"#v3-签名\"></a></h4>\n<p>在v2的基础上加入了证书的旋转校验，即可以在一次的升级安装中使用新的证书，新的私钥来签名APK。当然这个新的证书是需要老证书来保证的，类似一个证书链。</p>\n<h4 id=\"签名版本区别\">签名版本区别<a title=\"#签名版本区别\" href=\"#签名版本区别\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">版本</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">v1</td>\n<td>基于JAR 签名,签名以文件的形式存在于apk包中，这个版本的apk包就是一个标准的zip包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">v2</td>\n<td>在 Android 7.0 引入,签名信息被塞到了apk文件本身中，这时apk已经不符合一个标准的zip压缩包的文件结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">v3</td>\n<td>在 Android 9.0 引入,添加了一种更新证书的方式，这部分更新证书的数据同样被放在了签名信息中</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/5baea0e1cd1e\" target=\"_blank\">Android多渠道打包（VasDolly实现原理） - 简书 (jianshu.com)</a><br>\n<a href=\"https://www.jb51.net/article/174939.htm\" target=\"_blank\">详解Android v1、v2、v3签名(小结）_</a><br>\n<a href=\"https://blog.csdn.net/bobby_fu/article/details/103843038\" target=\"_blank\">Android P v3签名新特性</a><br>\n<a href=\"https://github.com/yoyiyi/SoleilNotes/blob/master/Android/v1%E3%80%81v2%E3%80%81v3%E7%AD%BE%E5%90%8D%E5%8C%BA%E5%88%AB.md\" target=\"_blank\">SoleilNotes/v1、v2、v3签名区别</a></p>\n","next":{"title":"Android AOP - ASM+Transform","link":"2022/03/12/Kt2Wobik8Fv12ZRY"},"plink":"https://onion99.github.io/2022/03/13/XJTlmsU39F0XEnje/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}