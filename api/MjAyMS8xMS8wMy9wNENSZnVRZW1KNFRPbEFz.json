{"title":"自定义View(8) - draw 绘制过程","date":"2021-11-03T22:03:38.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"link":"2021/11/03/p4CRfuQemJ4TOlAs","comments":true,"tags":["图形绘制"],"categories":["Android"],"updated":"2021-11-03T14:03:06.000Z","content":"<blockquote>\n<p>Android 里面的绘制都是按顺序的，先绘制的内容会被后绘制的盖住</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IES7KP.png\" alt=\"IES7KP.png\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"draw-过程解析\">draw 过程解析<a title=\"#draw-过程解析\" href=\"#draw-过程解析\"></a></h3>\n<p>一个完整的绘制过程会依次绘制以下几个内容：<br>\n<img src=\"https://z3.ax1x.com/2021/11/03/IEp3Ie.png\" alt=\"IEp3Ie.png\" loading=\"lazy\"></p>\n<ul>\n<li><code>drawBackground()</code>绘制背景\n<ul>\n<li>这个方法是 private 的，不能重写，你如果要设置背景，只能用自带的 API 去设置</li>\n</ul>\n</li>\n<li><code>onDraw()</code>绘制主体\n<ul>\n<li>这个方法在 View 和 ViewGroup 里都是空实现，因此自定义时需要复写</li>\n</ul>\n</li>\n<li><code>dispatchDraw()</code>绘制子 View\n<ul>\n<li>在于单一 View 中无子 View，故在 View 中此方法默认为空实</li>\n<li>在 ViewGroup中系统已经复写好此方法对其子视图进行绘制因此我们不需要复写</li>\n</ul>\n</li>\n<li><code>onDrawForeground()</code>滑动边缘渐变和滑动条以及前景</li>\n</ul>\n<p>ViewGroup中的<code>dispatchDraw()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flags = mGroupFlags;</span><br><span class=\"line\">    <span class=\"comment\">// 动画处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((flags &amp; FLAG_RUN_ANIMATION) != <span class=\"number\">0</span> &amp;&amp; canAnimate()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> buildCache = !isHardwareAccelerated();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = child.getLayoutParams();</span><br><span class=\"line\">                attachLayoutAnimationParameters(child, params, i, childrenCount);</span><br><span class=\"line\">                bindLayoutAnimation(child);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// xxx</span></span><br><span class=\"line\">        controller.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 间距处理</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> clipSaveCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> clipToPadding = (flags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clipToPadding) &#123;</span><br><span class=\"line\">        clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);</span><br><span class=\"line\">        canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,</span><br><span class=\"line\">                mScrollX + mRight - mLeft - mPaddingRight,</span><br><span class=\"line\">                mScrollY + mBottom - mTop - mPaddingBottom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子View</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2. 绘制子View视图    </span></span><br><span class=\"line\">                more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"draw顺序\">draw顺序<a title=\"#draw顺序\" href=\"#draw顺序\"></a></h3>\n<h4 id=\"ondraw()\">onDraw()<a title=\"#ondraw()\" href=\"#ondraw()\"></a></h4>\n<blockquote>\n<p>自定义绘制最基本的形态：继承 View 类，在 onDraw() 中完全自定义它的绘制</p>\n</blockquote>\n<p>定义 View 时，绘制代码写在 super.onDraw() 的上面还是下面都无所谓,但基于已有控件的自定义绘制，就不能不考虑 <code>super.onDraw()</code> 了，你需要根据自己的需求，判断出你绘制的内容需要盖住控件原有的内容还是需要被控件原有的内容盖住，从而确定你的绘制代码是应该写在 super.onDraw() 的上面还是下面。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">上面</th>\n<th style=\"text-align:center\">下面</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IEFrgH.png\" alt=\"IEFrgH.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IEFHrn.png\" alt=\"IEFHrn.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"dispatchdraw()\">dispatchDraw()<a title=\"#dispatchdraw()\" href=\"#dispatchdraw()\"></a></h4>\n<blockquote>\n<p>如果想在一个ViewGroup中按上面的做法在下面添加绘制内容则是不行的,因为在绘制过程中每一个 ViewGroup 会先调用自己的 onDraw() 来绘制完自己的主体之后再去绘制它的子 View,会覆盖其主体</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEEpH1.png\" alt=\"IEEpH1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpottedLinearLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">LinearLayout</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 把 onDraw() 换成了 dispatchDraw()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.dispatchDraw(canvas);</span><br><span class=\"line\">       ... <span class=\"comment\">// 绘制斑点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然 View 和 ViewGroup 都有 dispatchDraw() 方法，不过由于 View 是没有子 View 的，所以一般来说 dispatchDraw() 这个方法只对 ViewGroup（以及它的子类）有意义。</p>\n<h4 id=\"ondrawforeground()\">onDrawForeground()<a title=\"#ondrawforeground()\" href=\"#ondrawforeground()\"></a></h4>\n<blockquote>\n<p>前景前后处理</p>\n</blockquote>\n<p>在 super.onDrawForeground() 的上面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawForeground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       ... <span class=\"comment\">// 绘制「New」标签</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onDrawForeground(canvas);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEVgSS.png\" alt=\"IEVgSS.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在 super.onDrawForeground() 的下面:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawForeground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onDrawForeground(canvas);</span><br><span class=\"line\">       ... <span class=\"comment\">// 绘制「New」标签</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEZV0A.png\" alt=\"IEZV0A.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"draw()\">draw()<a title=\"#draw()\" href=\"#draw()\"></a></h4>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEZ1XQ.png\" alt=\"IEZ1XQ.png\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"自定义View(9) - 事件分发","link":"2021/11/03/z3aQsRLVolBbFVsl"},"next":{"title":"自定义View(7) - layout 布局过程","link":"2021/11/03/ZyOr4iLxJj7nAQxR"},"plink":"http://onion66.gitee.io/blog/2021/11/03/p4CRfuQemJ4TOlAs/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}