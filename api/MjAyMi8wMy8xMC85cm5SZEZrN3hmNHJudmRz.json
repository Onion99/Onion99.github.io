{"title":"Android AOP - 概论","date":"2022-03-10T09:26:27.000Z","date_formatted":{"ll":"2022年3月10日","L":"2022/03/10","MM-DD":"03-10"},"thumbnail":"https://s1.ax1x.com/2022/03/14/bLD5RS.md.png","link":"2022/03/10/9rnRdFk7xf4rnvds","comments":true,"tags":["AOP"],"categories":["Android"],"updated":"2022-03-10T05:09:00.000Z","content":"<h3 id=\"编程架构思想\">编程架构思想<a title=\"#编程架构思想\" href=\"#编程架构思想\"></a></h3>\n<ul>\n<li>\n<p>面向对象(Object Oriented Programming)</p>\n</li>\n<li>\n<p>面向过程(Procedure Oriented Programming)</p>\n</li>\n<li>\n<p>面向切面(Aspect Oriented Programming)</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<p>AOP 意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术，和 OOP 以对象为核心不同，AOP是针对业务处理过程中的类似的代码逻辑进行切入，然后统一处理。</p>\n<p>AOP其实是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。</p>\n<p><img src=\"https://s1.ax1x.com/2022/03/10/bfRiDK.png\" alt=\"bfRiDK.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"常见概念\">常见概念<a title=\"#常见概念\" href=\"#常见概念\"></a></h3>\n<ul>\n<li>连接点(<em>Joinpoint</em>)\n<ul>\n<li>程序中可能作为代码注入目标的特定的点，例如一个方法调用或者方法入口。</li>\n</ul>\n</li>\n<li>切点（<em>Pointcut</em>）\n<ul>\n<li>告诉代码注入工具，在任何注入一段特定代码的表达式。例如，在哪些joint points应用一个特定的Advice。</li>\n<li>切入点可以选择唯一一个，比如执行某一个方法，也可以有多个选择，比如，标记了一个定义成@DebugLog的自定义注解的所有方法。</li>\n</ul>\n</li>\n<li>增强（<em>Advice</em>）\n<ul>\n<li>注入到class文件中的代码。</li>\n<li>典型的Advice类型有before、after和around，分别表示在目标方法执行之前、执行后和完全代替目标方法执行的代码。</li>\n</ul>\n</li>\n<li>目标对象 (<em>Target</em>)</li>\n<li>引介(<em>Introduction</em>)</li>\n<li>织入（<em>Weaving</em>）\n<ul>\n<li>注入代码（advices）到目标位置（joint points）的过程</li>\n</ul>\n</li>\n<li>代理（<em>Proxy</em>）</li>\n<li>切面（<em>Aspect</em>）\n<ul>\n<li>Pointcut和Advice的组合看做切面。例如，我们在应用中通过定义一个Pointcut和给定恰当的Advice，添加一个日志切面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分类\">分类<a title=\"#分类\" href=\"#分类\"></a></h3>\n<blockquote>\n<p>一类是，例如Java的动态代理；另一类可以归结为，例如经常听说的，AspecJ等框架</p>\n</blockquote>\n<ul>\n<li>运行期的AOP\n<ul>\n<li>Java的动态代理</li>\n</ul>\n</li>\n<li>编译期的AOP\n<ul>\n<li>ASM</li>\n<li>AspecJ</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用\">应用<a title=\"#应用\" href=\"#应用\"></a></h3>\n<ul>\n<li>Hot Fix\n<ul>\n<li>基于AOP技术，编译期修改Java字节码，对每一个方法进行插桩操作，以便于hook每一个方法，做到方法级别的热修复</li>\n</ul>\n</li>\n<li>监测方法耗时</li>\n<li>日志记录</li>\n<li>统一处理点击抖动</li>\n<li>其他的监控方面</li>\n</ul>\n<h3 id=\"aop与apt区别\">AOP与APT区别<a title=\"#aop与apt区别\" href=\"#aop与apt区别\"></a></h3>\n<p>APT(Annotation Processing Tool)即注解处理器，是一种处理注解的工具，确切的说它是javac的一个工具，它用来在编译时扫描和处理注解。注解处理器以Java代码(或者编译过的字节码)作为输入，生成<code>.java文件</code>作为输出。</p>\n<ul>\n<li>APT是在编译期，通过注解生成<code>java</code>文件，然后.java文件仍然需要进一步编译生成<code>.class</code>文件</li>\n<li>AOP是在编译完成后直接通过修改<code>.class</code>文件，添加或者修改代码逻辑</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxODg0MzU2OQ==&amp;mid=2247483887&amp;idx=1&amp;sn=d54e3f210a4f31f477dba06c3dcd352e&amp;scene=21#wechat_redirect\" target=\"_blank\">AOP技术在客户端的应用与实践</a></p>\n","prev":{"title":"Android AOP - JDK动态代理","link":"2022/03/10/qyGiQE7cKbQOfEKm"},"next":{"title":"Android-动态化方案探索","link":"2022/03/09/wkROkqAosRBXidma"},"plink":"https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}