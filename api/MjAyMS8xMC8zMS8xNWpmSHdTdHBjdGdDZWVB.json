{"title":"源码学习 - Glide","date":"2021-10-31T21:29:17.000Z","date_formatted":{"ll":"2021年10月31日","L":"2021/10/31","MM-DD":"10-31"},"link":"2021/10/31/15jfHwStpctgCeeA","comments":true,"tags":["源码解析"],"categories":["Android"],"updated":"2021-10-31T13:28:31.000Z","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(fragment)</span><br><span class=\"line\">    .load(myUrl)</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"with()\">with()<a title=\"#with()\" href=\"#with()\"></a></h3>\n<blockquote>\n<p>用Method初始化glide的一些必需的环境，然后调用Requestmanagerretriver的<code>get()</code>获取requestManager。如果传入的对象是全局Context，你就不需要处理生命周期;如果输入是具有生命周期的View(包含Frg或Act)则将添加一个隐藏的Fragment来感知生命周期</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestManager <span class=\"title\">with</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Context context)</span> </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> getRetriever(context).get(context);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getretriever()\">getRetriever()<a title=\"#getretriever()\" href=\"#getretriever()\"></a></h4>\n<blockquote>\n<p>RequestManagerRetriever,用于创建新的RequestManager或从Activity和Fragment中检索现有的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RequestManagerRetriever <span class=\"title\">getRetriever</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 由于其他原因，上下文可能为空（即用户传入空值），但实际上它只会由于 Fragment 生命周期的错误而发生。</span></span><br><span class=\"line\">  Preconditions.checkNotNull(</span><br><span class=\"line\">      context,<span class=\"string\">&quot;You cannot start a load on a not yet attached View or a Fragment where getActivity() &quot;</span></span><br><span class=\"line\">          + <span class=\"string\">&quot;returns null (which usually occurs when getActivity() is called before the Fragment &quot;</span></span><br><span class=\"line\">          + <span class=\"string\">&quot;is attached or after the Fragment is destroyed).&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取RequestManagerRetriever</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Glide.get(context).getRequestManagerRetriever();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"get()\">get()<a title=\"#get()\" href=\"#get()\"></a></h4>\n<blockquote>\n<p>单例实现Glide的初始化</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双重检查锁定在这里是安全的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> static Glide <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> Context context) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (glide == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射GeneratedAppGlideModuleImpl实例化Glide</span></span><br><span class=\"line\">    GeneratedAppGlideModule annotationGeneratedModule =</span><br><span class=\"line\">        getAnnotationGeneratedGlideModules(context.getApplicationContext()); </span><br><span class=\"line\">    synchronized (Glide.<span class=\"keyword\">class</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (glide == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        checkAndInitializeGlide(context, annotationGeneratedModule);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> glide;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestmanagerretriever.get()\">RequestManagerRetriever.get()<a title=\"#requestmanagerretriever.get()\" href=\"#requestmanagerretriever.get()\"></a></h4>\n<blockquote>\n<p>创建对应生命周期的RequestManager</p>\n</blockquote>\n<ul>\n<li>首先判断是在子线程,则拿一个全Context然后在工厂模式创建下RequestManager,所以推荐不要在子线程执行此操作</li>\n<li>如为FragmentActivity,则通过FragmentManager,创建一个空Fragment放进当前<code>Fragment</code>或者<code>Activity</code>,这样就可以感知宿主的生命周期,然后在工厂模式创建下RequestManager</li>\n<li>如为Activity…</li>\n<li>如为ContextWrapper…</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get((FragmentActivity) activity);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertNotDestroyed(activity);</span><br><span class=\"line\">    frameWaiter.registerSelf(activity);</span><br><span class=\"line\">    android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragmentGet(activity, fm, <span class=\"comment\">/*parentHint=*/</span> <span class=\"keyword\">null</span>, isActivityVisible(activity));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// FragmentActivity Simple </span></span><br><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> FragmentActivity activity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertNotDestroyed(activity);</span><br><span class=\"line\">    frameWaiter.registerSelf(activity);</span><br><span class=\"line\">    FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> supportFragmentGet(activity, fm, <span class=\"comment\">/*parentHint=*/</span> <span class=\"keyword\">null</span>, isActivityVisible(activity));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过supportFragment感知创建</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RequestManager <span class=\"title\">supportFragmentGet</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@NonNull</span> Context context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@NonNull</span> FragmentManager fm,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Nullable</span> Fragment parentHint,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class=\"line\">  SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);</span><br><span class=\"line\">  RequestManager requestManager = current.getRequestManager();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 工厂模式创建</span></span><br><span class=\"line\">    Glide glide = Glide.get(context);</span><br><span class=\"line\">    requestManager =</span><br><span class=\"line\">        factory.build(</span><br><span class=\"line\">            glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class=\"line\">    <span class=\"comment\">// 这是一个小技巧，我们将启动 RequestManager，而不是相应的 Lifecycle。启动 RequestManager 是安全的，但启动 Lifecycle 可能会引发内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isParentVisible) &#123;</span><br><span class=\"line\">      requestManager.onStart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    current.setRequestManager(requestManager);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> requestManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"load()\">load()<a title=\"#load()\" href=\"#load()\"></a></h3>\n<blockquote>\n<p>对全局变量赋值,构建ReqeustBuilder</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drawable Simple</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestBuilder&lt;Drawable&gt; <span class=\"title\">load</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Drawable drawable)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> asDrawable().load(drawable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"into()\">into()<a title=\"#into()\" href=\"#into()\"></a></h3>\n<p>设置资源到加载的ImageView中 ，取消任何现有的加载，并释放 Glide 之前可能加载到ImageView的任何资源，以便它们可以被重用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置资源配置到TargetView</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewTarget&lt;ImageView, TranscodeType&gt; <span class=\"title\">into</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ImageView view)</span> </span>&#123;</span><br><span class=\"line\">    Util.assertMainThread();</span><br><span class=\"line\">    ···</span><br><span class=\"line\">    <span class=\"keyword\">return</span> into(</span><br><span class=\"line\">        glideContext.buildImageViewTarget(view, transcodeClass),</span><br><span class=\"line\">        <span class=\"comment\">/*targetListener=*/</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        requestOptions,</span><br><span class=\"line\">        Executors.mainThreadExecutor());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建TargetView</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;X&gt; <span class=\"function\">ViewTarget&lt;ImageView, X&gt; <span class=\"title\">buildImageViewTarget</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@NonNull</span> ImageView imageView, <span class=\"meta\">@NonNull</span> Class&lt;X&gt; transcodeClass)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageViewTargetFactory.buildTarget(imageView, transcodeClass);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 负责为指定的android.view.View子类生成正确类型的Target工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageViewTargetFactory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;Z&gt; <span class=\"function\">ViewTarget&lt;ImageView, Z&gt; <span class=\"title\">buildTarget</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@NonNull</span> ImageView view, <span class=\"meta\">@NonNull</span> Class&lt;Z&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Bitmap.class.equals(clazz)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class=\"keyword\">new</span> BitmapImageViewTarget(view);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Drawable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class=\"keyword\">new</span> DrawableImageViewTarget(view);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">          <span class=\"string\">&quot;Unhandled class: &quot;</span> + clazz + <span class=\"string\">&quot;, try .as*(Class).transcode(ResourceTranscoder)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"into()-1\">into()<a title=\"#into()-1\" href=\"#into()-1\"></a></h4>\n<blockquote>\n<p>核心代码加载代码，看起来简单但实现起来复杂。<br>\n首先看看 buildRequest 如何初始化 request</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class=\"function\">Y <span class=\"title\">into</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Y target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; options, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  Preconditions.checkNotNull(target);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isModelSet) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;You must call #load() before calling #into()&quot;</span>); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 现在的请求</span></span><br><span class=\"line\">  Request request = buildRequest(target, targetListener, options, callbackExecutor);</span><br><span class=\"line\">  <span class=\"comment\">// 之前的请求</span></span><br><span class=\"line\">  Request previous = target.getRequest();</span><br><span class=\"line\">  <span class=\"comment\">// 如果之前的请求完成，重新开始以重新传递结果，触发 RequestListeners 和 Targets。如果请求失败，将重新请求，</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request.isEquivalentTo(previous) &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果之前的请求已经在运行，我们可以让它继续运行而不中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Preconditions.checkNotNull(previous).isRunning()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用先前的请求而不是新的请求来优化，例如跳过设置占位符、跟踪和取消跟踪目标以及获取在单个请求中完成的视图维度</span></span><br><span class=\"line\">      previous.begin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestManager.clear(target);</span><br><span class=\"line\">  target.setRequest(request);</span><br><span class=\"line\">  requestManager.track(target, request);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestbuilder.buildrequest()\">RequestBuilder.buildRequest()<a title=\"#requestbuilder.buildrequest()\" href=\"#requestbuilder.buildrequest()\"></a></h4>\n<blockquote>\n<p>根据存在的场景建立不同Request</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildRequest</span><span class=\"params\">(Target&lt;TranscodeType&gt; target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buildRequestRecursive(<span class=\"comment\">/*requestLock=*/</span> <span class=\"keyword\">new</span> Object(), target, targetListener,<span class=\"comment\">/*parentCoordinator=*/</span> <span class=\"keyword\">null</span>, transitionOptions, requestOptions.getPriority(), requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight(), requestOptions, callbackExecutor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildRequestRecursive</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, <span class=\"meta\">@Nullable</span> RequestCoordinator parentCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如有必要首先构建 ErrorRequestCoordinator，以便我们可以更新 parentCoordinator。</span></span><br><span class=\"line\">  ErrorRequestCoordinator errorRequestCoordinator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorBuilder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    errorRequestCoordinator = <span class=\"keyword\">new</span> ErrorRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    parentCoordinator = errorRequestCoordinator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Request mainRequest = buildThumbnailRequestRecursive(requestLock, target, targetListener, parentCoordinator, transitionOptions, priority, overrideWidth, overrideHeight, requestOptions, callbackExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorRequestCoordinator == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> mainRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> errorOverrideWidth = errorBuilder.getOverrideWidth();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> errorOverrideHeight = errorBuilder.getOverrideHeight();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !errorBuilder.isValidOverride()) &#123;</span><br><span class=\"line\">    errorOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class=\"line\">    errorOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Request errorRequest = errorBuilder.buildRequestRecursive(requestLock, target, targetListener, errorRequestCoordinator, errorBuilder.transitionOptions, errorBuilder.getPriority(), errorOverrideWidth, errorOverrideHeight, errorBuilder, callbackExecutor);</span><br><span class=\"line\">  errorRequestCoordinator.setRequests(mainRequest, errorRequest);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errorRequestCoordinator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestbuilder.buildthumbnailrequestrecursive()\">RequestBuilder.buildThumbnailRequestRecursive()<a title=\"#requestbuilder.buildthumbnailrequestrecursive()\" href=\"#requestbuilder.buildthumbnailrequestrecursive()\"></a></h4>\n<blockquote>\n<p>根据是否需要缩略图,生成各种不同的Request</p>\n</blockquote>\n<p>这里经过一层又一层最终拿到一个<code>SingleRequest</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildThumbnailRequestRecursive</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, RequestListener&lt;TranscodeType&gt; targetListener, <span class=\"meta\">@Nullable</span> RequestCoordinator parentCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (thumbnailBuilder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归案例：包含一个潜在的递归缩略图Request Builder</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThumbnailBuilt) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">          <span class=\"string\">&quot;You cannot use a request as both the main request and a &quot;</span></span><br><span class=\"line\">              + <span class=\"string\">&quot;thumbnail, consider using clone() on the request(s) passed to thumbnail()&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; thumbTransitionOptions = thumbnailBuilder.transitionOptions;</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下我们的将过渡用在缩略图，但避免覆盖可能已明确应用于缩略图请求的自定义选项。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thumbnailBuilder.isDefaultTransitionOptionsSet) thumbTransitionOptions = transitionOptions;</span><br><span class=\"line\">    Priority thumbPriority = thumbnailBuilder.isPrioritySet() ? thumbnailBuilder.getPriority() : getThumbnailPriority(priority);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> thumbOverrideWidth = thumbnailBuilder.getOverrideWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> thumbOverrideHeight = thumbnailBuilder.getOverrideHeight();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !thumbnailBuilder.isValidOverride()) &#123;</span><br><span class=\"line\">      thumbOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class=\"line\">      thumbOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThumbnailRequestCoordinator coordinator = <span class=\"keyword\">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    Request fullRequest = obtainRequest(requestLock, target, targetListener, requestOptions, coordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    isThumbnailBuilt = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 递归生成缩略图请求</span></span><br><span class=\"line\">    Request thumbRequest = thumbnailBuilder.buildRequestRecursive(requestLock, target,targetListener, coordinator, thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight, thumbnailBuilder, callbackExecutor);</span><br><span class=\"line\">    isThumbnailBuilt = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    coordinator.setRequests(fullRequest, thumbRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (thumbSizeMultiplier != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本情况：缩略图Multiplier生成缩略图请求，但不能递归。</span></span><br><span class=\"line\">    ThumbnailRequestCoordinator coordinator = <span class=\"keyword\">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    Request fullRequest = obtainRequest(requestLock, target, targetListener, requestOptions, coordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    BaseRequestOptions&lt;?&gt; thumbnailOptions = requestOptions.clone().sizeMultiplier(thumbSizeMultiplier);</span><br><span class=\"line\">    Request thumbnailRequest = obtainRequest(requestLock, target, targetListener, thumbnailOptions, coordinator, transitionOptions, getThumbnailPriority(priority), overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    coordinator.setRequests(fullRequest, thumbnailRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本情况：没有缩略图</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obtainRequest(requestLock, target, targetListener, requestOptions, parentCoordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">obtainRequest</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; requestOptions, RequestCoordinator requestCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> SingleRequest.obtain(context, glideContext, requestLock, model, transcodeClass, requestOptions, overrideWidth, overrideHeight, priority, target, targetListener, requestListeners, requestCoordinator, glideContext.getEngine(), transitionOptions.getTransitionFactory(), callbackExecutor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestmanager.track()\">RequestManager.track()<a title=\"#requestmanager.track()\" href=\"#requestmanager.track()\"></a></h4>\n<p>这里Glide将判断请求是否需要显示，如果它需要现在显示则开始执行，否则clear( )，并将请求放入队列。这种设计更精巧，省电</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">track</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Target&lt;?&gt; target, <span class=\"meta\">@NonNull</span> Request request)</span> </span>&#123;  </span><br><span class=\"line\">  targetTracker.track(target);  </span><br><span class=\"line\">  requestTracker.runRequest(request);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** 开始跟踪给定的请求 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Request request)</span> </span>&#123;</span><br><span class=\"line\">  requests.add(request);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启动异步加载</span></span><br><span class=\"line\">    request.begin();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 防止从以前的请求加载任何位图，释放此请求持有的任何资源，显示当前占位符（如果提供），并将请求标记为已取消</span></span><br><span class=\"line\">    request.clear();</span><br><span class=\"line\">    pendingRequests.add(request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"singlerequest.begin()\">SingleRequest.begin()<a title=\"#singlerequest.begin()\" href=\"#singlerequest.begin()\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (requestLock) &#123;</span><br><span class=\"line\">    assertNotCallingCallbacks();</span><br><span class=\"line\">    stateVerifier.throwIfRecycled();</span><br><span class=\"line\">    startTime = LogTime.getLogTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (model == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class=\"line\">        width = overrideWidth;</span><br><span class=\"line\">        height = overrideHeight;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果用户设置可回调的Drawables,这里进行日志反馈</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> logLevel = getFallbackDrawable() == <span class=\"keyword\">null</span> ? Log.WARN : Log.DEBUG;</span><br><span class=\"line\">      onLoadFailed(<span class=\"keyword\">new</span> GlideException(<span class=\"string\">&quot;Received null model&quot;</span>), logLevel);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == Status.RUNNING) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot restart a running request&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们在完成后重新启动(通常是通过notifyDataSetChanged之类的方式，向相同的目标或视图启动相同的请求)，我们可以简单地使用上次检索到的资源和大小，而跳过获取一个新的大小，开始一个新的加载等(这意味着希望重新启动加载的用户需要在开始新的加载之前显式地清除view或Target，因为他们觉得视图大小已经改变。)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == Status.COMPLETE) &#123;</span><br><span class=\"line\">      onResourceReady(resource, DataSource.MEMORY_CACHE, <span class=\"comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于既未完成也未运行的请求，重新启动可以被视为新请求，并可以从头开始运行</span></span><br><span class=\"line\">    cookie = GlideTrace.beginSectionAsync(TAG);</span><br><span class=\"line\">    status = Status.WAITING_FOR_SIZE;</span><br><span class=\"line\">    <span class=\"comment\">// 如果宽高已指定,则回调onSizeReady ,否则再获取宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class=\"line\">      onSizeReady(overrideWidth, overrideHeight);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target.getSize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE) &amp;&amp; canNotifyStatusChanged()) &#123;</span><br><span class=\"line\">      target.onLoadStarted(getPlaceholderDrawable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>onLoadFailed : 图片或者资源为空,报错回调</li>\n<li>onResourceReady: 最终通过<code>Engine.release( )</code>,释放资源</li>\n<li>onSizeReady: View大小已明确 , 执行<code>Engine.load()</code>加载资源</li>\n<li>getSize: 获取View大小</li>\n<li>onLoadStarted: 等待或运行中,占位图处理</li>\n</ul>\n<h4 id=\"singlerequest.onsizeready(-)\">SingleRequest.onSizeReady( )<a title=\"#singlerequest.onsizeready(-)\" href=\"#singlerequest.onsizeready(-)\"></a></h4>\n<blockquote>\n<p>启动给定参数进行图片的加载, 必须在主线程上调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeReady</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">  stateVerifier.throwIfRecycled();</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (requestLock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status != Status.WAITING_FOR_SIZE) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    status = Status.RUNNING;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> sizeMultiplier = requestOptions.getSizeMultiplier();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = maybeApplySizeMultiplier(width, sizeMultiplier);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = maybeApplySizeMultiplier(height, sizeMultiplier);</span><br><span class=\"line\">    loadStatus = engine.load(glideContext, model, requestOptions.getSignature(), <span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height, requestOptions.getResourceClass(), transcodeClass, priority, requestOptions.getDiskCacheStrategy(), requestOptions.getTransformations(), requestOptions.isTransformationRequired(), requestOptions.isScaleOnlyOrNoTransform(), requestOptions.getOptions(), requestOptions.isMemoryCacheable(), requestOptions.getUseUnlimitedSourceGeneratorsPool(), requestOptions.getUseAnimationPool(), requestOptions.getOnlyRetrieveFromCache(), <span class=\"keyword\">this</span>, callbackExecutor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"engine.load(-)\">Engine.load( )<a title=\"#engine.load(-)\" href=\"#engine.load(-)\"></a></h4>\n<blockquote>\n<p>到这里想都不用想了,Engine才是真正加载图片的Class,<br>\nEngine负责执行图片加载和管理活动资源和缓存资源。</p>\n</blockquote>\n<p>活动资源是指那些至少提供一个请求但未释放的资源。一旦资源的所有使用者都释放了该资源，该资源就会进入缓存。如果资源从缓存中返回给新的使用者，它将被重新添加到活动资源中。<br>\n如果从缓存中移除资源，它的资源将被回收和重用(如果可能的话)，资源将被丢弃。没有严格要求消费者释放他们的资源，所以活跃的资源被弱持有。</p>\n<p>请求流程:</p>\n<ul>\n<li>检查当前使用的资源集，返回活动资源（如果存在），并将任何新的非活动资源移动到内存缓存中</li>\n<li>检查内存缓存并提供缓存资源（如果存在）</li>\n<li>检查当前的一组正在进行的加载并将 cb 添加到进行中的加载（如果存在）</li>\n<li>开始加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;R&gt; <span class=\"function\">LoadStatus <span class=\"title\">load</span><span class=\"params\">(GlideContext glideContext, Object model, Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Class&lt;?&gt; resourceClass, Class&lt;R&gt; transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations, <span class=\"keyword\">boolean</span> isTransformationRequired, <span class=\"keyword\">boolean</span> isScaleOnlyOrNoTransform, Options options, <span class=\"keyword\">boolean</span> isMemoryCacheable, <span class=\"keyword\">boolean</span> useUnlimitedSourceExecutorPool, <span class=\"keyword\">boolean</span> useAnimationPool, <span class=\"keyword\">boolean</span> onlyRetrieveFromCache, ResourceCallback cb, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class=\"number\">0</span>;</span><br><span class=\"line\">  EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,resourceClass, transcodeClass, options);</span><br><span class=\"line\">  EngineResource&lt;?&gt; memoryResource;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有缓存,有则直接加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memoryResource == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> waitForExistingOrStartNewJob(glideContext, model, signature, width, height, resourceClass, transcodeClass, priority, diskCacheStrategy, transformations, isTransformationRequired, isScaleOnlyOrNoTransform, options, isMemoryCacheable, useUnlimitedSourceExecutorPool, useAnimationPool, onlyRetrieveFromCache, cb, callbackExecutor, key, startTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 避免在保持Engine锁时回调，因为这样做会更容易死锁</span></span><br><span class=\"line\">  cb.onResourceReady(memoryResource, DataSource.MEMORY_CACHE, <span class=\"comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"keyword\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"engine.waitforexistingorstartnewjob(-)\">Engine.waitForExistingOrStartNewJob( )<a title=\"#engine.waitforexistingorstartnewjob(-)\" href=\"#engine.waitforexistingorstartnewjob(-)\"></a></h4>\n<blockquote>\n<p>等待或者执行任务</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;R&gt; <span class=\"function\">LoadStatus <span class=\"title\">waitForExistingOrStartNewJob</span><span class=\"params\">(GlideContext glideContext, Object model, Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Class&lt;?&gt; resourceClass, Class&lt;R&gt; transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations, <span class=\"keyword\">boolean</span> isTransformationRequired, <span class=\"keyword\">boolean</span> isScaleOnlyOrNoTransform, Options options, <span class=\"keyword\">boolean</span> isMemoryCacheable, <span class=\"keyword\">boolean</span> useUnlimitedSourceExecutorPool, <span class=\"keyword\">boolean</span> useAnimationPool, <span class=\"keyword\">boolean</span> onlyRetrieveFromCache, ResourceCallback cb, Executor callbackExecutor, EngineKey key, <span class=\"keyword\">long</span> startTime)</span> </span>&#123;</span><br><span class=\"line\">  EngineJob&lt;?&gt; current = jobs.get(key, onlyRetrieveFromCache);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    current.addCallback(cb, callbackExecutor);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, current);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  EngineJob&lt;R&gt; engineJob = engineJobFactory.build(key, isMemoryCacheable, useUnlimitedSourceExecutorPool, useAnimationPool, onlyRetrieveFromCache);</span><br><span class=\"line\">  DecodeJob&lt;R&gt; decodeJob = decodeJobFactory.build(glideContext, model, key, signature, width, height, resourceClass, transcodeClass, priority, diskCacheStrategy, transformations, isTransformationRequired, isScaleOnlyOrNoTransform, onlyRetrieveFromCache, options, engineJob);</span><br><span class=\"line\">  jobs.put(key, engineJob);</span><br><span class=\"line\">  engineJob.addCallback(cb, callbackExecutor);</span><br><span class=\"line\">  engineJob.start(decodeJob);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (VERBOSE_IS_LOGGABLE)  logWithTimeAndKey(<span class=\"string\">&quot;Started new load&quot;</span>, startTime, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, engineJob);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"decodejob\">DecodeJob<a title=\"#decodejob\" href=\"#decodejob\"></a></h4>\n<blockquote>\n<p>负责从缓存数据或原始源中解码资源并应用转换和转码的类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCancelled) &#123;</span><br><span class=\"line\">      notifyFailed();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runWrapped();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runWrapped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为了判断运行原因,这里做了三个判断</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (runReason) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INITIALIZE:</span><br><span class=\"line\">      <span class=\"comment\">// 获取当前解码数据的阶段</span></span><br><span class=\"line\">      stage = getNextStage(Stage.INITIALIZE);</span><br><span class=\"line\">      <span class=\"comment\">// 获取数据生成器</span></span><br><span class=\"line\">      currentGenerator = getNextGenerator();</span><br><span class=\"line\">      runGenerators();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SWITCH_TO_SOURCE_SERVICE:</span><br><span class=\"line\">      runGenerators();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DECODE_DATA:</span><br><span class=\"line\">      decodeFromRetrievedData();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Unrecognized run reason: &quot;</span> + runReason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"rungenerators(-)\">runGenerators( )<a title=\"#rungenerators(-)\" href=\"#rungenerators(-)\"></a></h5>\n<p>currentGenerator实现DataFetcherGenerator接口，这个接口主要用来生成一系列的modelLoader和model</p>\n<p>目前Glide有三种类生成器</p>\n<ul>\n<li>ResourceCacheGenerator</li>\n<li>DataCacheGenerator</li>\n<li>SourceGenerator</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runGenerators</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  currentThread = Thread.currentThread();</span><br><span class=\"line\">  startFetchTime = LogTime.getLogTime();</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> isStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// startNext -&gt; 尝试单个新的DataFetcher，如果DataFetcher已启动则返回true，否则返回false</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!isCancelled &amp;&amp; currentGenerator != <span class=\"keyword\">null</span> &amp;&amp; !(isStarted = currentGenerator.startNext())) &#123;</span><br><span class=\"line\">    stage = getNextStage(stage);</span><br><span class=\"line\">    currentGenerator = getNextGenerator();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stage == Stage.SOURCE) &#123;</span><br><span class=\"line\">      reschedule();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We&#x27;ve run out of stages and generators, give up.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((stage == Stage.FINISHED || isCancelled) &amp;&amp; !isStarted) &#123;</span><br><span class=\"line\">    notifyFailed();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> DataFetcherGenerator <span class=\"title\">getNextGenerator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (stage) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> RESOURCE_CACHE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResourceCacheGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DATA_CACHE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataCacheGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SOURCE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SourceGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FINISHED:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Unrecognized stage: &quot;</span> + stage);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"sourcegenerator.startnext()\">SourceGenerator.startNext()<a title=\"#sourcegenerator.startnext()\" href=\"#sourcegenerator.startnext()\"></a></h6>\n<p>将首先判断，缓存如果它不是空的，调用 cacheData; 否则，获取 loadData，然后执行 startNextLoad ()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dataToCache != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    Object data = dataToCache;</span><br><span class=\"line\">    dataToCache = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> isDataInCache = cacheData(data);</span><br><span class=\"line\">      <span class=\"comment\">// 如果我们没有将数据写入缓存，cacheData方法将尝试直接解码原始数据，而不是通过磁盘缓存。因为此时cacheData已经调用了我们的回调函数，所以除了返回，没有其他事情可做了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isDataInCache) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果我们能够成功地将数据写入缓存，那么现在需要继续调用下面的sourceCacheGenerator来从缓存加载数据</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// IOException意味着我们无法将数据写入缓存，或者在磁盘缓存写入失败后无法倒带数据。无论哪种情况，我们都可以继续尝试下面的下一个取回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;Failed to properly rewind or write data to cache&quot;</span>, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sourceCacheGenerator != <span class=\"keyword\">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sourceCacheGenerator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadData = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> started = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class=\"line\">    loadData = helper.getLoadData().get(loadDataListIndex++);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadData != <span class=\"keyword\">null</span></span><br><span class=\"line\">        &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</span><br><span class=\"line\">            || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</span><br><span class=\"line\">      started = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      startNextLoad(loadData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> started;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"sourcegenerator.cachedata\">SourceGenerator.cacheData<a title=\"#sourcegenerator.cachedata\" href=\"#sourcegenerator.cachedata\"></a></h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果我们能够缓存数据，应该尝试直接从缓存解码数据，如果我们不能缓存数据，应该尝试从源解码，则返回false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cacheData</span><span class=\"params\">(Object dataToCache)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> isLoadingFromSourceData = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    DataRewinder&lt;Object&gt; rewinder = helper.getRewinder(dataToCache);</span><br><span class=\"line\">    Object data = rewinder.rewindAndGet();</span><br><span class=\"line\">    Encoder&lt;Object&gt; encoder = helper.getSourceEncoder(data);</span><br><span class=\"line\">    DataCacheWriter&lt;Object&gt; writer = <span class=\"keyword\">new</span> DataCacheWriter&lt;&gt;(encoder, data, helper.getOptions());</span><br><span class=\"line\">    DataCacheKey newOriginalKey = <span class=\"keyword\">new</span> DataCacheKey(loadData.sourceKey, helper.getSignature());</span><br><span class=\"line\">    DiskCache diskCache = helper.getDiskCache();</span><br><span class=\"line\">    diskCache.put(newOriginalKey, writer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCache.get(newOriginalKey) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      originalKey = newOriginalKey;</span><br><span class=\"line\">      sourceCacheGenerator = <span class=\"keyword\">new</span> DataCacheGenerator(Collections.singletonList(loadData.sourceKey), helper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 我们能够将数据写入缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      isLoadingFromSourceData = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      cb.onDataFetcherReady(loadData.sourceKey, rewinder.rewindAndGet(), loadData.fetcher, loadData.fetcher.getDataSource(), loadData.sourceKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写入数据到缓存失败的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isLoadingFromSourceData) &#123;</span><br><span class=\"line\">      loadData.fetcher.cleanup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"decodehelper.getsourceencoder()\">DecodeHelper.getSourceEncoder()<a title=\"#decodehelper.getsourceencoder()\" href=\"#decodehelper.getsourceencoder()\"></a></h6>\n<p>DecodeHelper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;X&gt; <span class=\"function\">Encoder&lt;X&gt; <span class=\"title\">getSourceEncoder</span><span class=\"params\">(X data)</span> <span class=\"keyword\">throws</span> Registry.NoSourceEncoderAvailableException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> glideContext.getRegistry().getSourceEncoder(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Registry.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;X&gt; <span class=\"function\">Encoder&lt;X&gt; <span class=\"title\">getSourceEncoder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> X data)</span> <span class=\"keyword\">throws</span> NoSourceEncoderAvailableException </span>&#123;  </span><br><span class=\"line\">  Encoder&lt;X&gt; encoder = encoderRegistry.getEncoder((Class&lt;X&gt;) data.getClass());  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(encoder != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> encoder;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSourceEncoderAvailableException(data.getClass());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"register\">Register<a title=\"#register\" href=\"#register\"></a></h6>\n<blockquote>\n<p>每个数据类型对应一个编码器,Register就是用来记录这些的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry</span><br><span class=\"line\">        .append(ByteBuffer.class, <span class=\"keyword\">new</span> ByteBufferEncoder())</span><br><span class=\"line\">        .append(InputStream.class, <span class=\"keyword\">new</span> StreamEncoder(arrayPool))</span><br><span class=\"line\">        .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class, byteBufferBitmapDecoder)</span><br><span class=\"line\">        .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class, streamBitmapDecoder);</span><br></pre></td></tr></table></figure>\n<h5 id=\"decodefromretrieveddata()\">decodeFromRetrievedData()<a title=\"#decodefromretrieveddata()\" href=\"#decodefromretrieveddata()\"></a></h5>\n<blockquote>\n<p>处理返回的数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oU7rD.png\" alt=\"5oU7rD.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;Data&gt; <span class=\"function\">Resource&lt;R&gt; <span class=\"title\">decodeFromData</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DataFetcher&lt;?&gt; fetcher, Data data, DataSource dataSource)</span> <span class=\"keyword\">throws</span> GlideException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</span><br><span class=\"line\">    Resource&lt;R&gt; result = decodeFromFetcher(data, dataSource);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class=\"line\">      logWithTimeAndKey(<span class=\"string\">&quot;Decoded result &quot;</span> + result, startTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    fetcher.cleanup();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;Data&gt; <span class=\"function\">Resource&lt;R&gt; <span class=\"title\">decodeFromFetcher</span><span class=\"params\">(Data data, DataSource dataSource)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> GlideException </span>&#123;</span><br><span class=\"line\">  LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> runLoadPath(data, dataSource, path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"enginejob\">EngineJob<a title=\"#enginejob\" href=\"#enginejob\"></a></h4>\n<blockquote>\n<p>通过添加和删除加载回调并在加载完成时通知回调来管理加载的类(管理加载过程中的一些回调)</p>\n</blockquote>\n<p>GlideExecutor是一个继承的Executorservice类，它显然是一个线程池。这里通过decodeJob来确定是否从缓存解析，如果是从缓存解析，调用diskCacheExecutor，否则，调用getActiveSourceExecutor</p>\n<ul>\n<li>willDecodeFromCache\n<ul>\n<li>如果此作业将尝试从磁盘缓存解码资源，则返回true</li>\n<li>如果始终从源解码，则返回false</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.decodeJob = decodeJob;</span><br><span class=\"line\">  GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : getActiveSourceExecutor();</span><br><span class=\"line\">  <span class=\"comment\">// 执行decodeJob线程任务</span></span><br><span class=\"line\">  executor.execute(decodeJob);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"课程 - 登陆与授权","link":"2021/10/31/Qqq7oSBqBc2Zgbrx"},"next":{"title":"源码学习 - OkHttp","link":"2021/10/31/4SVquTFcR8Wyv4GV"},"plink":"http://onion66.gitee.io/blog/2021/10/31/15jfHwStpctgCeeA/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}