{"title":"自定义View(7) - layout 布局过程","date":"2021-11-03T22:02:46.000Z","date_formatted":{"ll":"2021年11月3日","L":"2021/11/03","MM-DD":"11-03"},"link":"2021/11/03/ZyOr4iLxJj7nAQxR","comments":true,"tags":["图形绘制"],"categories":["Android"],"updated":"2021-11-03T14:01:26.000Z","content":"<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"viewasds\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"layout-类型\">layout 类型<a title=\"#layout-类型\" href=\"#layout-类型\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IA7tv4.png\" alt=\"IA7tv4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"view-的-layout-过程\">View 的 layout 过程<a title=\"#view-的-layout-过程\" href=\"#view-的-layout-过程\"></a></h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 指定视图及其所有子视图的大小和位置 这是布局机制的第二阶段</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">layout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 判断是否measure,没有的话再measure一遍</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mPrivateFlags3 <span class=\"token operator\">&amp;</span> PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>mOldWidthMeasureSpec<span class=\"token punctuation\">,</span> mOldHeightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mPrivateFlags3 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 当前视图的四个顶点</span>\n    <span class=\"token keyword\">int</span> oldL <span class=\"token operator\">=</span> mLeft<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldT <span class=\"token operator\">=</span> mTop<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldB <span class=\"token operator\">=</span> mBottom<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldR <span class=\"token operator\">=</span> mRight<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断视图大小或者位置是否发生改变</span>\n    <span class=\"token keyword\">boolean</span> changed <span class=\"token operator\">=</span> <span class=\"token function\">isLayoutModeOptical</span><span class=\"token punctuation\">(</span>mParent<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n            <span class=\"token function\">setOpticalFrame</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">setFrame</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发生改变        </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>mPrivateFlags <span class=\"token operator\">&amp;</span> PFLAG_LAYOUT_REQUIRED<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> PFLAG_LAYOUT_REQUIRED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 对于单一View的laytou过程：由于单一View是没有子View的，故onLayout（）是一个空实现->>分析3</span>\n        <span class=\"token comment\">// 对于ViewGroup的laytou过程：由于确定位置与具体布局有关，所以onLayout（）在ViewGroup为1个抽象方法，需重写实现</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAqjZd.png\" alt=\"IAqjZd.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"viewgroup-的-layout-过程\">ViewGroup 的 layout 过程<a title=\"#viewgroup-的-layout-过程\" href=\"#viewgroup-的-layout-过程\"></a></h3>\n<blockquote>\n<p>ViewGroup 的 layout 过程确定位置与具体的布局有关，所以在 ViewGroup 中是一个抽象方法，需要重写实现</p>\n</blockquote>\n<p>复写<code> onLayout()</code>步骤:</p>\n<ol>\n<li>遍历所有子 View</li>\n<li>根据自身需求计算当前子 View 的四个位置值（需自身实现）</li>\n<li>根据上述 4 个位置的计算值，设置子 View 的 4 个顶点：调用子 View 的 layout 方法，即确定了子 View 在父容器里的位置</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ViewGroup的onLayout实现的大致思路</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> changed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 参数说明</span>\n   <span class=\"token comment\">// changed 当前View的大小和位置改变了 </span>\n   <span class=\"token comment\">// left 左部位置  top 顶部位置  right 右部位置  bottom 底部位置</span>\n   <span class=\"token comment\">// 1. 遍历子View：循环所有子View</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token function\">getChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n         <span class=\"token comment\">// 2. 计算当前子View的四个位置值</span>\n         <span class=\"token comment\">// 2.1 位置的计算逻辑需自己实现，也是自定义View的关键</span>\n         <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">// 2.2 对计算后的位置值进行赋值</span>\n         <span class=\"token keyword\">int</span> mLeft  <span class=\"token operator\">=</span> <span class=\"token class-name\">Left</span>\n         <span class=\"token keyword\">int</span> mTop  <span class=\"token operator\">=</span> <span class=\"token class-name\">Top</span>\n         <span class=\"token keyword\">int</span> mRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Right</span>\n         <span class=\"token keyword\">int</span> mBottom <span class=\"token operator\">=</span> <span class=\"token class-name\">Bottom</span>\n \n       <span class=\"token comment\">// 3. 根据上述4个位置的计算值设置子View的4个顶点：调用子view的layout() &amp; 传递计算过的参数</span>\n       <span class=\"token comment\">// 即确定了子View在父容器的位置</span>\n       child<span class=\"token punctuation\">.</span><span class=\"token function\">layout</span><span class=\"token punctuation\">(</span>mLeft<span class=\"token punctuation\">,</span> mTop<span class=\"token punctuation\">,</span> mRight<span class=\"token punctuation\">,</span> mBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 该过程类似于单一View的layout过程中的layout()和onLayout()</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAL1L4.png\" alt=\"IAL1L4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"viewgroup-子类（linearlayout）的-layout-过程分析\">ViewGroup 子类（LinearLayout）的 layout 过程分析<a title=\"#viewgroup-子类（linearlayout）的-layout-过程分析\" href=\"#viewgroup-子类（linearlayout）的-layout-过程分析\"></a></h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> changed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 根据自身方向属性，而选择不同的处理方式</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mOrientation <span class=\"token operator\">==</span> VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">layoutVertical</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">layoutHorizontal</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据 LinearLayout 的方向（vertical、horizontal）进入不同的布局过程，这里我们只选垂直方向的布局过程，即layoutVertical()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">layoutVertical</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 子View的数量</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1. 遍历子View</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            childTop <span class=\"token operator\">+=</span> <span class=\"token function\">measureNullChild</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> GONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 2. 计算子View的测量宽 / 高值</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childWidth <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getMeasuredWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childHeight <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getMeasuredHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// 3. 确定自身子View的位置</span>\n            <span class=\"token comment\">// 即：递归调用子View的setChildFrame()，实际上是调用了子View的layout() ->>分析2</span>\n            <span class=\"token function\">setChildFrame</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> childLeft<span class=\"token punctuation\">,</span> childTop <span class=\"token operator\">+</span> <span class=\"token function\">getLocationOffset</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> childWidth<span class=\"token punctuation\">,</span> childHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// childTop逐渐增大，即后面的子元素会被放置在靠下的位置</span>\n            <span class=\"token comment\">// 这符合垂直方向的LinearLayout的特性</span>\n            childTop <span class=\"token operator\">+=</span> childHeight <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>bottomMargin <span class=\"token operator\">+</span> <span class=\"token function\">getNextLocationOffset</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            i <span class=\"token operator\">+=</span> <span class=\"token function\">getChildrenSkipCount</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChildFrame</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">View</span> child<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// setChildFrame（）仅仅只是调用了子View的layout（）而已</span>\n    child<span class=\"token punctuation\">.</span><span class=\"token function\">layout</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> left <span class=\"token operator\">++</span> width<span class=\"token punctuation\">,</span> top <span class=\"token operator\">+</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在子View的layout（）又通过调用setFrame（）确定View的四个顶点</span>\n    <span class=\"token comment\">// 即确定了子View的位置</span>\n    <span class=\"token comment\">// 如此不断循环确定所有子View的位置，最终确定ViewGroup的位置</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"getmeasurewidth-和-getwidth-区别\">getMeasureWidth 和 getWidth 区别<a title=\"#getmeasurewidth-和-getwidth-区别\" href=\"#getmeasurewidth-和-getwidth-区别\"></a></h3>\n<blockquote>\n<p>某些情况下，View 需要多次 measure 才能确定自己的测量宽高，在前几次的测量过程中，其得出的测量宽高有可能和最终宽高不一致.，但最终来说，测量宽高还是和最终宽高相同。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAjrmF.png\" alt=\"IAjrmF.png\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"自定义View(8) - draw 绘制过程","link":"2021/11/03/p4CRfuQemJ4TOlAs"},"next":{"title":"自定义View(6) - measure 测量过程","link":"2021/11/03/Qj9f1VMJJowv5Lfb"},"plink":"https://onion99.github.io/2021/11/03/ZyOr4iLxJj7nAQxR/","reward":true,"copyright":{"custom":"Copyright:自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0）"}}