{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stay hungry , Stay foolish • All posts by \"android\" category",
    "description": "巴拉巴拉",
    "home_page_url": "https://onion99.github.io",
    "items": [
        {
            "id": "https://onion99.github.io/2021/11/29/9S5c1rplpdSAbIxR/",
            "url": "https://onion99.github.io/2021/11/29/9S5c1rplpdSAbIxR/",
            "title": "源码学习-ViewModel",
            "date_published": "2021-11-29T15:30:53.000Z",
            "content_html": "<p>首先看看 ViewModel 是怎么样实例化</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getFragmentScopeViewModel</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">::</span>fragmentProvider<span class=\"token punctuation\">.</span>isInitialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        fragmentProvider <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> fragmentProvider<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getActivityScopeViewModel</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">::</span>activityProvider<span class=\"token punctuation\">.</span>isInitialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        activityProvider <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token function\">requireActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> activityProvider<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我超，原来是通过一个 ViewModelProvider 去 get 到的，他妈的这是干什么的呢，为什么要通过 ViewModelProvider 获取呢<br>\n<img src=\"http://img.doutula.com/production/uploads/image/2019/06/06/20190606755268_TSvBec.jpg\" alt=\"\"><br>\n我怎么知道，瞧瞧官方正儿八经的回答吧<br>\n <code>ViewModel</code> : 旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存<br>\n <code>ViewModelProvider</code> : ViewModel 的辅助程序类，该类负责为界面准备数据。在配置更改期间会自动保留 ViewModel 对象，以便它们存储的数据立即可供下一个 activity 或 fragment 实例使用</p>\n<span id=\"more\"></span>\n<p>好家伙，原来是这对组合，以生命周期的方式耶，看看有什么不同<br>\n ###Activty 与 ViewModel 的生命周期</p>\n<blockquote>\n<p>牛逼，战斗直至 Finish</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8L0jU.png\" alt=\"I8L0jU.png\"></p>\n<p>官方说：ViewModel 对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的 Lifecycle。ViewModel 将一直留在内存中，直到限定其存在时间范围的 Lifecycle 永久消失：对于 activity，是在 activity 完成时；而对于 fragment，是在 fragment 分离时</p>\n<p>好了，来看看 ViewModelProvider 是怎样实现构造的</p>\n<p>###ViewModelProvider()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ViewModelStoreOwner</span> owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 尼玛的，偷偷调用另一构造函数</span>\n        <span class=\"token comment\">// 1. 创建用来存储 ViewModel 的 ViewModelStore, 2. 创建用于实例化新 ViewModel 的 Factory</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">getViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> owner <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HasDefaultViewModelProviderFactory</span>\n                <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HasDefaultViewModelProviderFactory</span><span class=\"token punctuation\">)</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultViewModelProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token class-name\">NewInstanceFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>####ViewModelStore</p>\n<p>这个是接口何许玩意，原来到后面 Activity,Fragment 等都实现了这个接口，以来获取跟当前生命周期相关的 ViewModelStore, 看到没有，有图有真相<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/I8xIk4.png\" alt=\"I8xIk4.png\"><br>\n 看看 <code>ComponentActivity.getViewModelStore()</code> :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelStore</span> <span class=\"token function\">getViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your activity is not yet attached to the \"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"Application instance. You can't request ViewModel before onCreate call.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 叉，这里照我猜想肯定是实现 ViewModelStore 的单例</span>\n    <span class=\"token function\">ensureViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回与此 Activity 关联的 ViewModelStore</span>\n    <span class=\"token keyword\">return</span> mViewModelStore<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>void ensureViewModelStore() &#123;\n    if (mViewModelStore == null) &#123;\n        // 检索先前由onRetainNonConfigurationInstance()返回的配置变更后的缓存配置\n        NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance();\n        // 如果缓存配置不为空,则取缓存配置的viewModelStore\n        if (nc != null) &#123;\n            mViewModelStore = nc.viewModelStore;\n        &#125;\n        // 否则自己实例一个\n        if (mViewModelStore == null) &#123;\n            mViewModelStore = new ViewModelStore();\n        &#125;\n    &#125;\n&#125;    \n</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">嘿嘿,存储ViewModel的ViewModelStore,牛逼啊,用一个HashMap来缓存看到有木有:\n&#96;&#96;&#96;java\npublic class ViewModelStore &#123;\n    private final HashMap&lt;String, ViewModel&gt; mMap &#x3D; new HashMap&lt;&gt;();\n\n    final void put(String key, ViewModel viewModel) &#123;\n        ViewModel oldViewModel &#x3D; mMap.put(key, viewModel);\n        if (oldViewModel !&#x3D; null) oldViewModel.onCleared();\n    &#125;\n\n    final ViewModel get(String key) &#123;\n        return mMap.get(key);\n    &#125;\n\n    Set&lt;String&gt; keys() &#123;\n        return new HashSet&lt;&gt;(mMap.keySet());\n    &#125;\n\n    public final void clear() &#123;\n        for (ViewModel vm : mMap.values()) &#123;\n            vm.clear();\n        &#125;\n        mMap.clear();\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IG8UgA.png\" alt=\"IG8UgA.png\"></p>\n<p>####ViewModelProviderFactory</p>\n<p>同样的后面 Activity,Fragment 等也实现了 HasDefaultViewModelProviderFactory 接口，实现自己创建 ViewModel 的 ViewModelProviderFactory, 来看图<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGEOT1.png\" alt=\"IGEOT1.png\"><br>\n 再来看看 <code>ComponentActivity.getViewModelStore()</code> :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelProvider<span class=\"token punctuation\">.</span>Factory</span> <span class=\"token function\">getDefaultViewModelProviderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your activity is not yet attached to the \"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"Application instance. You can't request ViewModel before onCreate call.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 妈的，就是这么简单，直接实例化</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDefaultFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mDefaultFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SavedStateViewModelFactory</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">getIntent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">getIntent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getExtras</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> mDefaultFactory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有点东西，这样就实例 <code>SavedStateViewModelFactory</code>  了，看看具体怎么 <code>get()</code>  霍</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 第一步：小 get</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> canonicalName <span class=\"token operator\">=</span> modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 好家伙，看到没有，如果这里判断是局部类或者匿名类，就直接给 crash 了，谷歌就是牛逼</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Local and anonymous classes can not be ViewModels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 嘿，继续 get 下去</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>DEFAULT_KEY <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> canonicalName<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 第二步：大 get</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ViewModel</span> viewModel <span class=\"token operator\">=</span> mViewModelStore<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 首先是判断是否有缓存</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">OnRequeryFactory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnRequeryFactory</span><span class=\"token punctuation\">)</span> mFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onRequery</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> viewModel<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 然后如果为 null, 则通过具体工厂类去实例化 ViewModel</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mFactory <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">KeyedFactory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        viewModel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyedFactory</span><span class=\"token punctuation\">)</span> mFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        viewModel <span class=\"token operator\">=</span> mFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 嘿嘿，放进缓存</span>\n    mViewModelStore<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> viewModel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token comment\">// ViewModel 的实例化</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span> isAndroidViewModel <span class=\"token operator\">=</span> <span class=\"token class-name\">AndroidViewModel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> constructor<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 通过反射，去找到当前 ViewModel 的构造函数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAndroidViewModel <span class=\"token operator\">&amp;&amp;</span> mApplication <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        constructor <span class=\"token operator\">=</span> <span class=\"token function\">findMatchingConstructor</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">,</span> ANDROID_VIEWMODEL_SIGNATURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        constructor <span class=\"token operator\">=</span> <span class=\"token function\">findMatchingConstructor</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">,</span> VIEWMODEL_SIGNATURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructor <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> mFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">SavedStateHandleController</span> controller <span class=\"token operator\">=</span> <span class=\"token class-name\">SavedStateHandleController</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n            mSavedStateRegistry<span class=\"token punctuation\">,</span> mLifecycle<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> mDefaultArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 嘿嘿，调用构造函数，实例化        </span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">T</span> viewmodel<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isAndroidViewModel <span class=\"token operator\">&amp;&amp;</span> mApplication <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            viewmodel <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>mApplication<span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">getHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            viewmodel <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">getHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        viewmodel<span class=\"token punctuation\">.</span><span class=\"token function\">setTagIfAbsent</span><span class=\"token punctuation\">(</span>TAG_SAVED_STATE_HANDLE_CONTROLLER<span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> viewmodel<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to access \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A \"</span> <span class=\"token operator\">+</span> modelClass <span class=\"token operator\">+</span> <span class=\"token string\">\" cannot be instantiated.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An exception happened in constructor of \"</span>\n                <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>###ViewModel 的架构作用</p>\n<p>向官方敬礼，懂不懂这张图的含金量，懂不懂 MMVM<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGd3ff.png\" alt=\"IGd3ff.png\"><br>\n<img src=\"https://z3.ax1x.com/2021/11/08/IGwfKg.png\" alt=\"IGwfKg.png\"></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/29/hu0861X6Ltf32fYt/",
            "url": "https://onion99.github.io/2021/11/29/hu0861X6Ltf32fYt/",
            "title": "源码学习-DataBinding",
            "date_published": "2021-11-29T15:27:07.000Z",
            "content_html": "<h3 id=\"sameple\"><a class=\"markdownIt-Anchor\" href=\"#sameple\">#</a> Sameple</h3>\n<p>首先，我们来看看 DataBinding 使用:</p>\n<ol>\n<li>给 layout 文件套娃:</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FrameLayout</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.viewpager.widget.ViewPager</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/home_pager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>com.flyco.tablayout.SlidingTabLayout</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/home_tab<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FrameLayout</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>在 Fragment 或者 View 中获取 binding 对象</li>\n</ol>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">binding <span class=\"token operator\">=</span> DataBindingUtil<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>inflater<span class=\"token punctuation\">,</span>layoutRes<span class=\"token punctuation\">,</span>container<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>超，就是这么简单，来从 <code>inflate</code>  开始解析</p>\n<span id=\"more\"></span>\n<h3 id=\"databindingutilinflate梳理\"><a class=\"markdownIt-Anchor\" href=\"#databindingutilinflate梳理\">#</a> DataBindingUtil.inflate 梳理</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewDataBinding</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">LayoutInflater</span> inflater<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ViewGroup</span> parent<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">boolean</span> attachToParent<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">DataBindingComponent</span> bindingComponent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 检查康康是不是子 layout 附加到父 layout, 一般是 false, 因为如果为 ture 会导致子 layout 的 layoutparams 失效</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> useChildren <span class=\"token operator\">=</span> parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> attachToParent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 上面一般为 false, 那这里一般也是零蛋啊</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> startChildren <span class=\"token operator\">=</span> useChildren <span class=\"token operator\">?</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">getChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 解析 xml 生成 View, 放空大脑就是这样，深究的话，我只能甩一篇郭神的文章了:https://blog.csdn.net/guolin_blog/article/details/12921889</span>\n    <span class=\"token comment\">// 什么具体 inflate 是怎么样，不听不听王八念经</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutId<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> attachToParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 嘿嘿，这里开始 binding</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useChildren<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">bindToAddedViews</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> startChildren<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataBinderMapper</span> sMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataBinderMapperImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewDataBinding</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> bindingComponent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 不理了，这里就拿到 binding 了，可以直接引用 View 了，停止思考</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> sMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>问题来了，它是怎么取得我要的 DataBinding 对象且又是怎么实现 View 绑定的？</p>\n<ol>\n<li>好，来康康，这个 <code>DataBinderMapperImpl</code> , 这是编译阶段下 kapt 自动生成的:</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>databinding</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 好家伙，这里直接继承 MergedDataBinderMapper </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataBinderMapperImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MergedDataBinderMapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">DataBinderMapperImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 添加 kapt 下生成当前 Module 的 DataBinderMapperImpl</span>\n    <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span></span>DataBinderMapperImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 合并其他 Mapper 的 DataBindingMapper </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergedDataBinderMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mExistingMappers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 添加 Mapper, 如果已经存在则忽略</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBinderMapper</span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span><span class=\"token punctuation\">></span></span> mapperClass <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mExistingMappers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mapperClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mMappers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DataBinderMapper</span><span class=\"token punctuation\">></span></span> dependencies <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">collectDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBinderMapper</span> dependency <span class=\"token operator\">:</span> dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span>dependency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><code>MergedDataBinderMapper.getDataBinder</code> :</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewDataBinding</span> <span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> bindingComponent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 遍历之前添加的 mMappers    </span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBinderMapper</span> mapper <span class=\"token operator\">:</span> mMappers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 好了，这里获取对应的 Mapper 的 DataBinder, 超，想想之前添加了哪个 Mapper</span>\n        <span class=\"token comment\">// 没错，不正好对上 tmd 的上面 1 的 com.xxx.xxx.DataBinderMapperImpl ()</span>\n        <span class=\"token class-name\">ViewDataBinding</span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">loadFeatures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span>bindingComponent<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li>让我们来康康 kapt 生成的 <code>com.xxx.xxx.DataBinderMapperImpl()</code>  到底有什么</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataBinderMapperImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DataBinderMapper</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//layout id 索引</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LAYOUT_FRAGMENTHOME <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SparseIntArray</span> INTERNAL_LAYOUT_ID_LOOKUP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparseIntArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n    INTERNAL_LAYOUT_ID_LOOKUP<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xmiles<span class=\"token punctuation\">.</span>callshow<span class=\"token punctuation\">.</span></span>R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>fragment_home<span class=\"token punctuation\">,</span> LAYOUT_FRAGMENTHOME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewDataBinding</span> <span class=\"token function\">getDataBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> component<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> layoutId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 拿到索引的 id</span>\n    <span class=\"token keyword\">int</span> localizedLayoutId <span class=\"token operator\">=</span> INTERNAL_LAYOUT_ID_LOOKUP<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>layoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>localizedLayoutId <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> tag <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 判断 tag</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view must have a tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 这里如果布局数量超 50, 为避免一个方法体过大，会额外新建另外一个函数去处理，这里为好展示，整个类我就删除了很多其他布局参数</span>\n      <span class=\"token keyword\">int</span> methodIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>localizedLayoutId <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 跟据对应 componet 生成对应的 ViewDetaBinding</span>\n      <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>methodIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">internalGetViewDataBinding0</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> localizedLayoutId<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">internalGetViewDataBinding1</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> localizedLayoutId<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// GetViewDataBinding</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ViewDataBinding</span> <span class=\"token function\">internalGetViewDataBinding0</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataBindingComponent</span> component<span class=\"token punctuation\">,</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> internalId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>internalId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">case</span>  LAYOUT_FRAGMENTHOME<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"layout/fragment_home_0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FragmentHomeBindingImpl</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The tag for fragment_home is invalid. Received: \"</span> <span class=\"token operator\">+</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"refer\"><a class=\"markdownIt-Anchor\" href=\"#refer\">#</a> Refer</h3>\n<p><a href=\"https://www.jianshu.com/p/4be20cc58f17\">Android 架构组件之 DataBinding 源码解析 - 简书 (jianshu.com)</a><br>\n<a href=\"https://www.jianshu.com/p/4e9a1ab05bb5\"> DataBinding 源码分析 - 简书 (jianshu.com)</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/07/qX2v7eB61IheaBrH/",
            "url": "https://onion99.github.io/2021/11/07/qX2v7eB61IheaBrH/",
            "title": "Java并发(4) - CAS",
            "date_published": "2021-11-07T10:59:57.000Z",
            "content_html": "<p>锁机制问题:</p>\n<ul>\n<li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li>\n<li>一个线程持有锁会导致其它所有需要此锁的线程挂起</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险</li>\n</ul>\n<p>volatile 是不错的机制，但是 volatile 不能保证原子性，因此对于同步最终还是要回到锁机制上来。独占锁是一种悲观锁，synchronized 就是一种独占锁，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。而另一个更加有效的锁就是乐观锁</p>\n<blockquote>\n<p>乐观锁即总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"原子操作\"><a class=\"markdownIt-Anchor\" href=\"#原子操作\">#</a> 原子操作</h3>\n<blockquote>\n<p>所谓 “原子” 操作，是指一组不可分割的操作：操作者对目标对象进行操作时，要么完成所有操作后其他操作者才能操作；要么这个操作者不能进行任何操作</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/04/Ie5YA1.png\" alt=\"Ie5YA1.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class TestAtomic &#123;\n    public static void main(String[] args) throws Exception &#123;\n        &#x2F;&#x2F; 实例化了一个AtomicInteger类的对象atomic并定义初始值为1\n        AtomicInteger atomic &#x3D; new AtomicInteger(1);\n        &#x2F;&#x2F; 进行atomic的原子化操作：增加1并且获取这个增加后的新值\n        atomic.incrementAndGet();\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"cas-原理\"><a class=\"markdownIt-Anchor\" href=\"#cas-原理\">#</a> CAS 原理</h3>\n<blockquote>\n<p>CAS 的思想很简单，三个参数：当前内存值 V、旧的预期值 A、即将更新的值 B，当且仅当预期值 A 和内存值 V 相同时，将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。我们拿 AtomicInteger 类来分析，先来看看 AtomicInteger 静态代码块片段</p>\n</blockquote>\n<h3 id=\"cas缺点\"><a class=\"markdownIt-Anchor\" href=\"#cas缺点\">#</a> CAS 缺点</h3>\n<ul>\n<li>循环时间长开销很大</li>\n<li>只能保证一个共享变量的原子操作</li>\n<li>ABA 问题</li>\n</ul>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/cNDSpE5p4avS2tOi/",
            "url": "https://onion99.github.io/2021/11/03/cNDSpE5p4avS2tOi/",
            "title": "自定义View(11) - 滚动速度和滚动计算",
            "date_published": "2021-11-03T14:09:36.000Z",
            "content_html": "<h3 id=\"velocitytracker\"><a class=\"markdownIt-Anchor\" href=\"#velocitytracker\">#</a> VelocityTracker</h3>\n<blockquote>\n<p>跟踪手指在滑动过程中的速度，包括水平和竖直方向的速度</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTrackerTestView</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> <span class=\"token class-name\">Context</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> attrs<span class=\"token operator\">:</span> <span class=\"token class-name\">AttributeSet</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//1、创建实例</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mVelocityTracker <span class=\"token operator\">=</span> <span class=\"token class-name\">VelocityTracker</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@SuppressLint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ClickableViewAccessibility\"</span><span class=\"token punctuation\">)</span>\n    override fun <span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Boolean</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//2、重置</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//3、开始追踪</span>\n        mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">addMovement</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n \n        when <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>actionMasked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_MOVE <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//o...</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_UP <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 速度 = （ 终点位置 (px) - 起点位置 (px) ）/ 时间段 (ms)</span>\n                <span class=\"token comment\">//4、设置时间段</span>\n                mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">computeCurrentVelocity</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//5、获取 x 方向、y 方向的速度</span>\n                <span class=\"token comment\">// 其中 getXVelocity、getYVelocity 方法的参数是 pointerId，用于多指触控。不考虑多指时，可以不用传参数</span>\n                <span class=\"token keyword\">var</span> xVelocity <span class=\"token operator\">=</span> mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">getXVelocity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">var</span> yVelocity <span class=\"token operator\">=</span> mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">getYVelocity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    override fun <span class=\"token function\">onDetachedFromWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//6、当不需要使用时，重置并回收内存</span>\n        mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        mVelocityTracker<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDetachedFromWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>VelocityTracker 一般用来判断当前是否达到一定的滑动速度来触发 Fling 的效果，这个滑动速度我们可以自己设置，也可以通过系统提供的来获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mViewConfiguration <span class=\"token operator\">:</span> <span class=\"token class-name\">ViewConfiguration</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">ViewConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mMaxFlingVelocity <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// 触发 fling 的速度</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> mMinFlingVelocity <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\ninit <span class=\"token punctuation\">&#123;</span>\n    mMaxFlingVelocity <span class=\"token operator\">=</span> mViewConfiguration<span class=\"token punctuation\">.</span>scaledMaximumFlingVelocity\n    mMinFlingVelocity <span class=\"token operator\">=</span> mViewConfiguration<span class=\"token punctuation\">.</span>scaledMinimumFlingVelocity\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"scroller\"><a class=\"markdownIt-Anchor\" href=\"#scroller\">#</a> Scroller</h3>\n<p>在 View 类里面，有两个和滚动相关的类 scrollTo () 和 scrollBy。这两个方法可以实现 View 内容的移动，比如说一个 TextView，如果使用 scrollTo ()，那么移动的是里面的文字而不是位置，scrollBy () 也是一样的。那么为什么是移动，不是滚动呢？这是因为这两个方法都是瞬间完成，而不是带有滚动过程的滚动，所以说如果要实现效果比较好的滚动还是需要 Scroller</p>\n<p>常用 API:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">computeScrollOffset()</td>\n<td style=\"text-align:center\">判断当前的滑动动作是否完成的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getCurrX()、getCurrY()</td>\n<td style=\"text-align:center\">获取当前滑动的坐标值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getFinalX()、getFinalY()</td>\n<td style=\"text-align:center\">获取最终滑动停止时的坐标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isFinished()</td>\n<td style=\"text-align:center\">用来判断当前滚动是否结束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">startScroll(int startX, int startY, int dx, int dy)</td>\n<td style=\"text-align:center\">用来开始滚动，这个是很重要的一个触发 computeScroll () 的方法，调用这个方法之后，我们就可以在 computeScroll 里面获取滚动的信息，然后完成我们的需要。这个还有一个带有滚动持续时间的重载函数，可以根据需求自由使用。特别要注意这四个参数，startX 和 startY 是开始的坐标位置，正数左上，负数右下，dx、dy 同理，当在 computeScroll () 获取 getCurrX () 的时候，变化范围就与这里地设置有关。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"overscroller\"><a class=\"markdownIt-Anchor\" href=\"#overscroller\">#</a> OverScroller</h3>\n<blockquote>\n<p>对超出滑动边界的情况的处理</p>\n</blockquote>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/dY7a31QepeVitGkX/",
            "url": "https://onion99.github.io/2021/11/03/dY7a31QepeVitGkX/",
            "title": "自定义View(10) - GestureDetector",
            "date_published": "2021-11-03T14:08:39.000Z",
            "content_html": "<h3 id=\"gesturedetector\"><a class=\"markdownIt-Anchor\" href=\"#gesturedetector\">#</a> GestureDetector</h3>\n<table>\n<thead>\n<tr>\n<th>监听器</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OnContextClickListener</td>\n<td>这个很容易让人联想到 ContextMenu，然而它和 ContextMenu 并没有什么关系，它是在 Android6.0 (API 23) 才添加的一个选项，是用于检测外部设备上的按钮是否按下的，例如蓝牙触控笔上的按钮，一般情况下，忽略即可。</td>\n</tr>\n<tr>\n<td>OnDoubleTapListener</td>\n<td>双击事件，有三个回调类型：双击 (DoubleTap)、单击确认 (SingleTapConfirmed) 和 双击事件回调 (DoubleTapEvent)</td>\n</tr>\n<tr>\n<td>OnGestureListener</td>\n<td>手势检测，主要有以下类型事件：按下 (Down)、 一扔 (Fling)、长按 (LongPress)、滚动 (Scroll)、触摸反馈 (ShowPress) 和 单击抬起 (SingleTapUp)</td>\n</tr>\n<tr>\n<td>SimpleOnGestureListener</td>\n<td>这个是上述三个接口的空实现，一般情况下使用这个比较多，也比较方便</td>\n</tr>\n</tbody>\n</table>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 1. 创建一个监听回调</span>\n<span class=\"token class-name\">SimpleOnGestureListener</span> listener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleOnGestureListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onDoubleTap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"双击666\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDoubleTap</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 2. 创建一个检测器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">GestureDetector</span> detector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GestureDetector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 3. 给监听器设置数据源</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setOnTouchListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnTouchListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onTouch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> detector<span class=\"token punctuation\">.</span><span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"scalegesturedetector\"><a class=\"markdownIt-Anchor\" href=\"#scalegesturedetector\">#</a> ScaleGestureDetector</h3>\n<blockquote>\n<p>Android 缩放手势检测 ScaleGestureDetector，在大多数的情况下缩放手势都不是单独存在的，需要配合其它的手势来使用</p>\n</blockquote>\n<h4 id=\"sample\"><a class=\"markdownIt-Anchor\" href=\"#sample\">#</a> sample</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScaleGestureDemoView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"ScaleGestureDemoView\"</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ScaleGestureDetector</span> mScaleGestureDetector<span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScaleGestureDemoView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScaleGestureDemoView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">AttributeSet</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">initScaleGestureDetector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initScaleGestureDetector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mScaleGestureDetector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScaleGestureDetector</span><span class=\"token punctuation\">(</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScaleGestureDetector<span class=\"token punctuation\">.</span>SimpleOnScaleGestureListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onScaleBegin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScaleGestureDetector</span> detector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n \n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onScale</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScaleGestureDetector</span> detector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"focusX = \"</span> <span class=\"token operator\">+</span> detector<span class=\"token punctuation\">.</span><span class=\"token function\">getFocusX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 缩放中心，x 坐标</span>\n                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"focusY = \"</span> <span class=\"token operator\">+</span> detector<span class=\"token punctuation\">.</span><span class=\"token function\">getFocusY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 缩放中心 y 坐标</span>\n                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"scale = \"</span> <span class=\"token operator\">+</span> detector<span class=\"token punctuation\">.</span><span class=\"token function\">getScaleFactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 缩放因子</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n \n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onScaleEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ScaleGestureDetector</span> detector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mScaleGestureDetector<span class=\"token punctuation\">.</span><span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/z3aQsRLVolBbFVsl/",
            "url": "https://onion99.github.io/2021/11/03/z3aQsRLVolBbFVsl/",
            "title": "自定义View(9) - 事件分发",
            "date_published": "2021-11-03T14:07:31.000Z",
            "content_html": "<blockquote>\n<p>事件分发的过程其实也就是事件传递过程。事件传递的顺序由 Acticity 传递到根 View，这个根 View 通常是一个 ViewGroup (ViewGroup 本身也是 View 的子类)，然后再传递给 ViewGroup 下的子 View, 若事件在自上而下的传递过程中一直没有被消费，则事件会反向向上传递，此时父 ViewGroup 可以对事件进行消费，若仍然没有被消费的话，最后会回到 Activity 的 onTouchEvent</p>\n</blockquote>\n<p>所以很多时候如果有冲突的话，最先消费的是最底部的子 View<br>\n<img src=\"https://z3.ax1x.com/2021/11/03/IE3gqf.png\" alt=\"IE3gqf.png\"></p>\n<span id=\"more\"></span>\n<h3 id=\"事件分发method\"><a class=\"markdownIt-Anchor\" href=\"#事件分发method\">#</a> 事件分发 Method</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">调用时刻</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">dispatchTouchEvent()</td>\n<td style=\"text-align:center\">用来进行事件传递</td>\n<td style=\"text-align:center\">如果事件能够传递给当前 View，那么此方法一定会被调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onInterceptTouchEvent()</td>\n<td style=\"text-align:center\">用来是否拦截事件</td>\n<td style=\"text-align:center\">如果当前 View 拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onTouchEvent()</td>\n<td style=\"text-align:center\">处理事件</td>\n<td style=\"text-align:center\">在 dispatchTouchEvent () 方法中调用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"事件分发顺序\"><a class=\"markdownIt-Anchor\" href=\"#事件分发顺序\">#</a> 事件分发顺序</h3>\n<p>Activity&amp;Window</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dispatchTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> ev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span><span class=\"token function\">getAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">onUserInteraction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 当事件没有被任何子 View 消费时，即这里为 false 时，最终执行自己的 nTouchEvent</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">superDispatchTouchEvent</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>DecorView (FrameLayout 的子类)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PhoneWindow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Window</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MenuBuilder<span class=\"token punctuation\">.</span>Callback</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">superDispatchTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token keyword\">return</span> mDecor<span class=\"token punctuation\">.</span><span class=\"token function\">superDispatchTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecorView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FrameLayout</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RootViewSurfaceTaker</span><span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token comment\">//FrameLayout 并没有重写 dispatchTouchEvent 方法，所以事件开始交由 ViewGroup 的 dispatchTouchEvent 开始分发了</span>\n\t    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">superDispatchTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatchTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ViewGroup</p>\n<ul>\n<li>判断事件是够需要被 ViewGroup 拦截</li>\n<li>遍历所有子 View，逐个分发事件</li>\n<li>将事件交给 ViewGroup 自己或者目标子 View 处理</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dispatchTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> ev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \n    <span class=\"token keyword\">boolean</span> handled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">onFilterTouchEventForSecurity</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> action <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span><span class=\"token function\">getAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n        <span class=\"token comment\">// 先检验事件是否需要被 ViewGroup 拦截</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> intercepted<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN <span class=\"token operator\">||</span> mFirstTouchTarget <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 校验是否给 mGroupFlags 设置了 FLAG_DISALLOW_INTERCEPT 标志位</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> disallowIntercept <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mGroupFlags <span class=\"token operator\">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>disallowIntercept<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 走 onInterceptTouchEvent 判断是否拦截事件</span>\n                intercepted <span class=\"token operator\">=</span> <span class=\"token function\">onInterceptTouchEvent</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                intercepted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            intercepted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> split <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mGroupFlags <span class=\"token operator\">&amp;</span> FLAG_SPLIT_MOTION_EVENTS<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>canceled <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>intercepted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 注意 ACTION_DOWN 等事件才会走遍历所有子 View 的流程</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN\n                    <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>split <span class=\"token operator\">&amp;&amp;</span> actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_POINTER_DOWN<span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">||</span> actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_HOVER_MOVE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            \n                <span class=\"token comment\">// 开始遍历所有子 View 开始逐个分发事件</span>\n                <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childrenCount <span class=\"token operator\">=</span> mChildrenCount<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childrenCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> childrenCount <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// 判断触摸点是否在这个 View 的内部</span>\n                        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canViewReceivePointerEvents</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n                                <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isTransformedTouchPointInView</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    \n                        <span class=\"token comment\">// 事件被子 View 消费，退出循环，不再继续分发给其他子 View</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dispatchTransformedTouchEvent</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> idBitsToAssign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        \n                            <span class=\"token comment\">//addTouchTarget 内部将 mFirstTouchTarget 设置为 child，即不为 null</span>\n                            newTouchTarget <span class=\"token operator\">=</span> <span class=\"token function\">addTouchTarget</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> idBitsToAssign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            alreadyDispatchedToNewTouchTarget <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 事件未被任何子 View 消费，自己处理</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mFirstTouchTarget <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// No touch targets so treat this as an ordinary view.</span>\n            handled <span class=\"token operator\">=</span> <span class=\"token function\">dispatchTransformedTouchEvent</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">,</span> canceled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">TouchTarget</span><span class=\"token punctuation\">.</span>ALL_POINTER_IDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 将 MotionEvent.ACTION_DOWN 后续事件分发给 mFirstTouchTarget 指向的 View</span>\n            <span class=\"token class-name\">TouchTarget</span> predecessor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TouchTarget</span> target <span class=\"token operator\">=</span> mFirstTouchTarget<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">final</span> <span class=\"token class-name\">TouchTarget</span> next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 如果已经在上面的遍历过程中传递过事件，跳过本次传递</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alreadyDispatchedToNewTouchTarget <span class=\"token operator\">&amp;&amp;</span> target <span class=\"token operator\">==</span> newTouchTarget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    handled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> cancelChild <span class=\"token operator\">=</span> <span class=\"token function\">resetCancelNextUpFlag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">||</span> intercepted<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dispatchTransformedTouchEvent</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">,</span> cancelChild<span class=\"token punctuation\">,</span>\n                            target<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>pointerIdBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        handled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                \n                <span class=\"token punctuation\">&#125;</span>\n                predecessor <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n                target <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Update list of touch targets for pointer up or cancel, if needed.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canceled\n                <span class=\"token operator\">||</span> actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_UP\n                <span class=\"token operator\">||</span> actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_HOVER_MOVE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">resetTouchState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>split <span class=\"token operator\">&amp;&amp;</span> actionMasked <span class=\"token operator\">==</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_POINTER_UP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> actionIndex <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span><span class=\"token function\">getActionIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> idBitsToRemove <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> ev<span class=\"token punctuation\">.</span><span class=\"token function\">getPointerId</span><span class=\"token punctuation\">(</span>actionIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">removePointersFromTouchTargets</span><span class=\"token punctuation\">(</span>idBitsToRemove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> handled<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resetTouchState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">clearTouchTargets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resetCancelNextUpFlag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mGroupFlags <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>FLAG_DISALLOW_INTERCEPT<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearTouchTargets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TouchTarget</span> target <span class=\"token operator\">=</span> mFirstTouchTarget<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TouchTarget</span> next <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            target<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            target <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mFirstTouchTarget <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">TouchTarget</span> <span class=\"token function\">addTouchTarget</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> child<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pointerIdBits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TouchTarget</span> target <span class=\"token operator\">=</span> <span class=\"token class-name\">TouchTarget</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtain</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> pointerIdBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> mFirstTouchTarget<span class=\"token punctuation\">;</span>\n    mFirstTouchTarget <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dispatchTransformedTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> cancel<span class=\"token punctuation\">,</span>\n                                              <span class=\"token class-name\">View</span> child<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> desiredPointerIdBits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> handled<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 注意传参 child 为 null 时，调用的是自己的 dispatchTouchEvent</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        handled <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatchTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        handled <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchTouchEvent</span><span class=\"token punctuation\">(</span>transformedEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> handled<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onInterceptTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> ev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 默认不拦截事件</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>View:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dispatchTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">onFilterTouchEventForSecurity</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token comment\">// 判断事件是否先交给 ouTouch 方法处理</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mOnTouchListener <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>mViewFlags <span class=\"token operator\">&amp;</span> ENABLED_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ENABLED <span class=\"token operator\">&amp;&amp;</span>\n                    mOnTouchListener<span class=\"token punctuation\">.</span><span class=\"token function\">onTouch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//onTouch 未消费事件，传给 onTouchEvent</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"综上\"><a class=\"markdownIt-Anchor\" href=\"#综上\">#</a> 综上</h3>\n<ul>\n<li>View 事件分发的本质是递归。</li>\n<li>递归的本质是，任务的下发和结果的上报。</li>\n<li>View 事件分发设计成递归，是为了配合 View 的排版规则，形成符合用户直觉的触控体验。</li>\n<li>View 事件分发的对象是一个 MotionEvent。</li>\n<li>一次用户触控操作包含多个 MotionEvent（例如从 ACTION_DOWN 到 ACTION_UP ），也即会走多次事件分发流程。</li>\n<li>一次 View 事件分发流程包含 “递” 流程和 “归” 流程，“递” 流程可以因 ViewGroup 的拦截而提前步入 “归” 流程。</li>\n<li>child 可以通过 getParent.requestDisallowInterceptTouchEvent 阻止父容器的拦截。因而需要差异化地配置阈值，来确保 child 执行 getParent.requestDisallowInterceptTouchEvent 优先于父容器 onInterceptTouchEvent 返回 true（不然都先被拦截了，child 哪有机会阻止？）</li>\n<li>在 “归” 流程中，唯有当前层级的 super.dispatchTouchEvent 返回了 true，才认定被消费，被消费前，下级都有干活，只是结果不 OK。被消费后，上级都不需要干活，直接向上传达消费者的功。</li>\n</ul>\n<h3 id=\"事件冲突解决\"><a class=\"markdownIt-Anchor\" href=\"#事件冲突解决\">#</a> 事件冲突解决</h3>\n<ul>\n<li>从父 View 着手，重写 onInterceptTouchEvent 方法，在父 View 需要拦截的时候拦截，不要的时候返回 false</li>\n<li>从子 View 着手，重写子 View 的 dispatchTouchEvent 方法，在 Action_down 动作中通过方法 requestDisallowInterceptTouchEvent（true） 先请求 父 View 不要拦截事件，这样保证子 View 能够接受到 Action_move 事件，再在 Action_move 动作中根据自己的逻辑是否要拦截事件，不需要拦截事件的话再交给 父 View 处理</li>\n</ul>\n<h3 id=\"refer\"><a class=\"markdownIt-Anchor\" href=\"#refer\">#</a> Refer</h3>\n<p><a href=\"https://juejin.cn/post/6844903894103883789\">学习 View 事件分发，就像外地人上了黑车！ - 掘金 (juejin.cn)</a><br>\n<a href=\"https://juejin.cn/post/6965649194744807461\"> View 事件分发机制，看这一篇就够了 - 掘金 (juejin.cn)</a><br>\n<a href=\"https://blog.csdn.net/u010289802/article/details/86169939\"> Android 手把手进阶自定义 View（十）- 事件分发机制解析_lerendan 的博客 - CSDN 博客</a></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/p4CRfuQemJ4TOlAs/",
            "url": "https://onion99.github.io/2021/11/03/p4CRfuQemJ4TOlAs/",
            "title": "自定义View(8) - draw 绘制过程",
            "date_published": "2021-11-03T14:03:38.000Z",
            "content_html": "<blockquote>\n<p>Android 里面的绘制都是按顺序的，先绘制的内容会被后绘制的盖住</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IES7KP.png\" alt=\"IES7KP.png\"></p>\n<span id=\"more\"></span>\n<h3 id=\"draw-过程解析\"><a class=\"markdownIt-Anchor\" href=\"#draw-过程解析\">#</a> draw 过程解析</h3>\n<p>一个完整的绘制过程会依次绘制以下几个内容：<br>\n<img src=\"https://z3.ax1x.com/2021/11/03/IEp3Ie.png\" alt=\"IEp3Ie.png\"></p>\n<ul>\n<li><code>drawBackground()</code>  绘制背景\n<ul>\n<li>这个方法是 private 的，不能重写，你如果要设置背景，只能用自带的 API 去设置</li>\n</ul>\n</li>\n<li><code>onDraw()</code>  绘制主体\n<ul>\n<li>这个方法在 View 和 ViewGroup 里都是空实现，因此自定义时需要复写</li>\n</ul>\n</li>\n<li><code>dispatchDraw()</code>  绘制子 View\n<ul>\n<li>在于单一 View 中无子 View，故在 View 中此方法默认为空实</li>\n<li>在 ViewGroup 中系统已经复写好此方法对其子视图进行绘制因此我们不需要复写</li>\n</ul>\n</li>\n<li><code>onDrawForeground()</code>  滑动边缘渐变和滑动条以及前景</li>\n</ul>\n<p>ViewGroup 中的 <code>dispatchDraw()</code> :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchDraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Canvas</span> canvas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span> usingRenderNodeProperties <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">isRecordingFor</span><span class=\"token punctuation\">(</span>mRenderNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childrenCount <span class=\"token operator\">=</span> mChildrenCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children <span class=\"token operator\">=</span> mChildren<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> flags <span class=\"token operator\">=</span> mGroupFlags<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 动画处理</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> FLAG_RUN_ANIMATION<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canAnimate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> buildCache <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">isHardwareAccelerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>mViewFlags <span class=\"token operator\">&amp;</span> VISIBILITY_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> VISIBLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">final</span> <span class=\"token class-name\">LayoutParams</span> params <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">attachLayoutAnimationParameters</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> childrenCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">bindLayoutAnimation</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 间距处理</span>\n    <span class=\"token keyword\">int</span> clipSaveCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> clipToPadding <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>flags <span class=\"token operator\">&amp;</span> CLIP_TO_PADDING_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> CLIP_TO_PADDING_MASK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clipToPadding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        clipSaveCount <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">.</span>CLIP_SAVE_FLAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        canvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipRect</span><span class=\"token punctuation\">(</span>mScrollX <span class=\"token operator\">+</span> mPaddingLeft<span class=\"token punctuation\">,</span> mScrollY <span class=\"token operator\">+</span> mPaddingTop<span class=\"token punctuation\">,</span>\n                mScrollX <span class=\"token operator\">+</span> mRight <span class=\"token operator\">-</span> mLeft <span class=\"token operator\">-</span> mPaddingRight<span class=\"token punctuation\">,</span>\n                mScrollY <span class=\"token operator\">+</span> mBottom <span class=\"token operator\">-</span> mTop <span class=\"token operator\">-</span> mPaddingBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 遍历子 View</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childrenCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code>            if ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||transientChild.getAnimation() != null) &#123;\n                // // 2. 绘制子View视图    \n                more |= drawChild(canvas, transientChild, drawingTime);\n            &#125;\n        ...\n    &#125;\n&#125;\n</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n### draw顺序\n\n####  onDraw() \n\n&gt; 自定义绘制最基本的形态：继承 View 类，在 onDraw() 中完全自定义它的绘制\n\n定义 View 时，绘制代码写在 super.onDraw() 的上面还是下面都无所谓,但基于已有控件的自定义绘制，就不能不考虑 &#96;super.onDraw()&#96; 了，你需要根据自己的需求，判断出你绘制的内容需要盖住控件原有的内容还是需要被控件原有的内容盖住，从而确定你的绘制代码是应该写在 super.onDraw() 的上面还是下面。\n\n|上面| 下面 |\n|:--:|:--:|\n| ![IEFrgH.png](https:&#x2F;&#x2F;z3.ax1x.com&#x2F;2021&#x2F;11&#x2F;03&#x2F;IEFrgH.png)  | ![IEFHrn.png](https:&#x2F;&#x2F;z3.ax1x.com&#x2F;2021&#x2F;11&#x2F;03&#x2F;IEFHrn.png) |\n\n#### dispatchDraw()\n\n&gt;  如果想在一个ViewGroup中按上面的做法在下面添加绘制内容则是不行的,因为在绘制过程中每一个 ViewGroup 会先调用自己的 onDraw() 来绘制完自己的主体之后再去绘制它的子 View,会覆盖其主体\n\n\n![IEEpH1.png](https:&#x2F;&#x2F;z3.ax1x.com&#x2F;2021&#x2F;11&#x2F;03&#x2F;IEEpH1.png)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>public class SpottedLinearLayout extends LinearLayout {<br>\n…<br>\n// 把 onDraw () 换成了 dispatchDraw ()<br>\nprotected void dispatchDraw(Canvas canvas) {<br>\nsuper.dispatchDraw(canvas);<br>\n… // 绘制斑点<br>\n}<br>\n}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n虽然 View 和 ViewGroup 都有 dispatchDraw() 方法，不过由于 View 是没有子 View 的，所以一般来说 dispatchDraw() 这个方法只对 ViewGroup（以及它的子类）有意义。\n\n#### onDrawForeground()\n\n&gt; 前景前后处理\n\n在 super.onDrawForeground() 的上面\n&#96;&#96;&#96;java\npublic class AppImageView extends ImageView &#123;\n    ...\n    public void onDrawForeground(Canvas canvas) &#123;\n       ... &#x2F;&#x2F; 绘制「New」标签\n       super.onDrawForeground(canvas);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEVgSS.png\" alt=\"IEVgSS.png\"></p>\n<p>在 super.onDrawForeground () 的下面:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppImageView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ImageView</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDrawForeground</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Canvas</span> canvas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDrawForeground</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 绘制「New」标签</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEZV0A.png\" alt=\"IEZV0A.png\"></p>\n<h4 id=\"draw\"><a class=\"markdownIt-Anchor\" href=\"#draw\">#</a> draw()</h4>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEZ1XQ.png\" alt=\"IEZ1XQ.png\"></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/ZyOr4iLxJj7nAQxR/",
            "url": "https://onion99.github.io/2021/11/03/ZyOr4iLxJj7nAQxR/",
            "title": "自定义View(7) - layout 布局过程",
            "date_published": "2021-11-03T14:02:46.000Z",
            "content_html": "<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"viewasds\"></p>\n<span id=\"more\"></span>\n<h3 id=\"layout-类型\"><a class=\"markdownIt-Anchor\" href=\"#layout-类型\">#</a> layout 类型</h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IA7tv4.png\" alt=\"IA7tv4.png\"></p>\n<h3 id=\"view-的-layout-过程\"><a class=\"markdownIt-Anchor\" href=\"#view-的-layout-过程\">#</a> View 的 layout 过程</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 指定视图及其所有子视图的大小和位置 这是布局机制的第二阶段</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">layout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 判断是否 measure, 没有的话再 measure 一遍</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mPrivateFlags3 <span class=\"token operator\">&amp;</span> PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>mOldWidthMeasureSpec<span class=\"token punctuation\">,</span> mOldHeightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mPrivateFlags3 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 当前视图的四个顶点</span>\n    <span class=\"token keyword\">int</span> oldL <span class=\"token operator\">=</span> mLeft<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldT <span class=\"token operator\">=</span> mTop<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldB <span class=\"token operator\">=</span> mBottom<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> oldR <span class=\"token operator\">=</span> mRight<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断视图大小或者位置是否发生改变</span>\n    <span class=\"token keyword\">boolean</span> changed <span class=\"token operator\">=</span> <span class=\"token function\">isLayoutModeOptical</span><span class=\"token punctuation\">(</span>mParent<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n            <span class=\"token function\">setOpticalFrame</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">setFrame</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 发生改变        </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>mPrivateFlags <span class=\"token operator\">&amp;</span> PFLAG_LAYOUT_REQUIRED<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> PFLAG_LAYOUT_REQUIRED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 对于单一 View 的 laytou 过程：由于单一 View 是没有子 View 的，故 onLayout（）是一个空实现 ->> 分析 3</span>\n        <span class=\"token comment\">// 对于 ViewGroup 的 laytou 过程：由于确定位置与具体布局有关，所以 onLayout（）在 ViewGroup 为 1 个抽象方法，需重写实现</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAqjZd.png\" alt=\"IAqjZd.png\"></p>\n<h3 id=\"viewgroup-的-layout-过程\"><a class=\"markdownIt-Anchor\" href=\"#viewgroup-的-layout-过程\">#</a> ViewGroup 的 layout 过程</h3>\n<blockquote>\n<p>ViewGroup 的 layout 过程确定位置与具体的布局有关，所以在 ViewGroup 中是一个抽象方法，需要重写实现</p>\n</blockquote>\n<p>复写 <code> onLayout()</code>  步骤:</p>\n<ol>\n<li>遍历所有子 View</li>\n<li>根据自身需求计算当前子 View 的四个位置值（需自身实现）</li>\n<li>根据上述 4 个位置的计算值，设置子 View 的 4 个顶点：调用子 View 的 layout 方法，即确定了子 View 在父容器里的位置</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ViewGroup 的 onLayout 实现的大致思路</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> changed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 参数说明</span>\n   <span class=\"token comment\">//changed 当前 View 的大小和位置改变了 </span>\n   <span class=\"token comment\">//left 左部位置  top 顶部位置  right 右部位置  bottom 底部位置</span>\n   <span class=\"token comment\">// 1. 遍历子 View：循环所有子 View</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token function\">getChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n         <span class=\"token comment\">// 2. 计算当前子 View 的四个位置值</span>\n         <span class=\"token comment\">// 2.1 位置的计算逻辑需自己实现，也是自定义 View 的关键</span>\n         <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\">// 2.2 对计算后的位置值进行赋值</span>\n         <span class=\"token keyword\">int</span> mLeft  <span class=\"token operator\">=</span> <span class=\"token class-name\">Left</span>\n         <span class=\"token keyword\">int</span> mTop  <span class=\"token operator\">=</span> <span class=\"token class-name\">Top</span>\n         <span class=\"token keyword\">int</span> mRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Right</span>\n         <span class=\"token keyword\">int</span> mBottom <span class=\"token operator\">=</span> <span class=\"token class-name\">Bottom</span>\n \n       <span class=\"token comment\">// 3. 根据上述 4 个位置的计算值设置子 View 的 4 个顶点：调用子 view 的 layout () &amp; 传递计算过的参数</span>\n       <span class=\"token comment\">// 即确定了子 View 在父容器的位置</span>\n       child<span class=\"token punctuation\">.</span><span class=\"token function\">layout</span><span class=\"token punctuation\">(</span>mLeft<span class=\"token punctuation\">,</span> mTop<span class=\"token punctuation\">,</span> mRight<span class=\"token punctuation\">,</span> mBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 该过程类似于单一 View 的 layout 过程中的 layout () 和 onLayout ()</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAL1L4.png\" alt=\"IAL1L4.png\"></p>\n<h4 id=\"viewgroup-子类linearlayout的-layout-过程分析\"><a class=\"markdownIt-Anchor\" href=\"#viewgroup-子类linearlayout的-layout-过程分析\">#</a> ViewGroup 子类（LinearLayout）的 layout 过程分析</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> changed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 根据自身方向属性，而选择不同的处理方式</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mOrientation <span class=\"token operator\">==</span> VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">layoutVertical</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">layoutHorizontal</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据 LinearLayout 的方向（vertical、horizontal）进入不同的布局过程，这里我们只选垂直方向的布局过程，即 layoutVertical ()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">layoutVertical</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 子 View 的数量</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 1. 遍历子 View</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            childTop <span class=\"token operator\">+=</span> <span class=\"token function\">measureNullChild</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> GONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 2. 计算子 View 的测量宽 / 高值</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childWidth <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getMeasuredWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childHeight <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getMeasuredHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// 3. 确定自身子 View 的位置</span>\n            <span class=\"token comment\">// 即：递归调用子 View 的 setChildFrame ()，实际上是调用了子 View 的 layout () ->> 分析 2</span>\n            <span class=\"token function\">setChildFrame</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> childLeft<span class=\"token punctuation\">,</span> childTop <span class=\"token operator\">+</span> <span class=\"token function\">getLocationOffset</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> childWidth<span class=\"token punctuation\">,</span> childHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">//childTop 逐渐增大，即后面的子元素会被放置在靠下的位置</span>\n            <span class=\"token comment\">// 这符合垂直方向的 LinearLayout 的特性</span>\n            childTop <span class=\"token operator\">+=</span> childHeight <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>bottomMargin <span class=\"token operator\">+</span> <span class=\"token function\">getNextLocationOffset</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            i <span class=\"token operator\">+=</span> <span class=\"token function\">getChildrenSkipCount</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChildFrame</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">View</span> child<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//setChildFrame（）仅仅只是调用了子 View 的 layout（）而已</span>\n    child<span class=\"token punctuation\">.</span><span class=\"token function\">layout</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> left <span class=\"token operator\">++</span> width<span class=\"token punctuation\">,</span> top <span class=\"token operator\">+</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 在子 View 的 layout（）又通过调用 setFrame（）确定 View 的四个顶点</span>\n    <span class=\"token comment\">// 即确定了子 View 的位置</span>\n    <span class=\"token comment\">// 如此不断循环确定所有子 View 的位置，最终确定 ViewGroup 的位置</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"getmeasurewidth-和-getwidth-区别\"><a class=\"markdownIt-Anchor\" href=\"#getmeasurewidth-和-getwidth-区别\">#</a> getMeasureWidth 和 getWidth 区别</h3>\n<blockquote>\n<p>某些情况下，View 需要多次 measure 才能确定自己的测量宽高，在前几次的测量过程中，其得出的测量宽高有可能和最终宽高不一致.，但最终来说，测量宽高还是和最终宽高相同。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAjrmF.png\" alt=\"IAjrmF.png\"></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/Qj9f1VMJJowv5Lfb/",
            "url": "https://onion99.github.io/2021/11/03/Qj9f1VMJJowv5Lfb/",
            "title": "自定义View(6) - measure 测量过程",
            "date_published": "2021-11-03T14:00:58.000Z",
            "content_html": "<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"QJQEcR.jpg\"></p>\n<span id=\"more\"></span>\n<h3 id=\"measurespec\"><a class=\"markdownIt-Anchor\" href=\"#measurespec\">#</a> MeasureSpec</h3>\n<blockquote>\n<p>MeasureSpec 代表测量规格，是一个 32 位的 int 值，高 2 位代表 SpecMode（测量模式），低 30 位代表 SpecSize（测量大小）</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IF7OM9.png\" alt=\"IF7OM9.png\"></p>\n<p>MeasureSpec 通过将 SpecMode 和 SpecSize 打包成一个 int 值来避免过多的内存分配，并提供了打包和解包的方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> widthMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> widthSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"specmode\"><a class=\"markdownIt-Anchor\" href=\"#specmode\">#</a> SpecMode</h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFbTc4.png\" alt=\"IFbTc4.png\"></p>\n<h3 id=\"measurespec值计算\"><a class=\"markdownIt-Anchor\" href=\"#measurespec值计算\">#</a> MeasureSpec 值计算</h3>\n<blockquote>\n<p>View 的 MeasureSpec 值是由 View 的布局参数和父容器 的 MeasureSpec 值计算</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAVp1e.png\" alt=\"IAVp1e.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 源码分析：getChildMeasureSpec（）\n * 作用：根据父视图的 MeasureSpec &amp; 布局参数 LayoutParams，计算单个子 View 的 MeasureSpec\n * 注：子 view 的大小由父 view 的 MeasureSpec 值 和 子 view 的 LayoutParams 属性 共同决定\n * 参数说明\n * @param spec           父 view 的详细测量值 (MeasureSpec)\n * @param padding        view 当前尺寸的的内边距和外边距 (padding, margin)\n * @param childDimension 子视图的布局参数（宽 / 高）\n **/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getChildMeasureSpec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> spec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> padding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> childDimension<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 父 view 的测量模式</span>\n    <span class=\"token keyword\">int</span> specMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 父 view 的大小</span>\n    <span class=\"token keyword\">int</span> specSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 通过父 view 计算出的子 view 大小 = 父大小 - 边距（父要求的大小，但子 view 不一定用这个值）   </span>\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> specSize <span class=\"token operator\">-</span> padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 子 view 想要的实际大小和模式（需要计算）  </span>\n    <span class=\"token keyword\">int</span> resultSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> resultMode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 通过父 view 的 MeasureSpec 和子 view 的 LayoutParams 确定子 view 的大小  </span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>specMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当父 view 的模式为 EXACITY 时，父 view 强加给子 view 确切的值</span>\n        <span class=\"token comment\">// 一般是父 view 设置为 match_parent 或者固定值的 ViewGroup </span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 当子 view 的 LayoutParams>0，即有确切的值  </span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 子 view 大小为子自身所赋的值，模式大小为 EXACTLY  </span>\n                resultSize <span class=\"token operator\">=</span> childDimension<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n                \n                <span class=\"token comment\">// 当子 view 的 LayoutParams 为 MATCH_PARENT 时 (-1)  </span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>MATCH_PARENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 子 view 大小为父 view 大小，模式为 EXACTLY  </span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 当子 view 的 LayoutParams 为 WRAP_CONTENT 时 (-2)      </span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 子 view 决定自己的大小，但最大不能超过父 view，模式为 AT_MOST  </span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 当父 view 的模式为 AT_MOST 时，父 view 强加给子 view 一个最大的值。（一般是父 view 设置为 wrap_content）  </span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token operator\">:</span>\n            <span class=\"token comment\">// 道理同上  </span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultSize <span class=\"token operator\">=</span> childDimension<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>MATCH_PARENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                resultSize <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 当父 view 的模式为 UNSPECIFIED 时，父容器不对 view 有任何限制，要多大给多大</span>\n        <span class=\"token comment\">// 多见于 ListView、GridView  </span>\n        <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 子 view 大小为子自身所赋的值  </span>\n                resultSize <span class=\"token operator\">=</span> childDimension<span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>MATCH_PARENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 因为父 view 为 UNSPECIFIED，所以 MATCH_PARENT 的话子类大小为 0  </span>\n                resultSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childDimension <span class=\"token operator\">==</span> <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 因为父 view 为 UNSPECIFIED，所以 WRAP_CONTENT 的话子类大小为 0  </span>\n                resultSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                resultMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeMeasureSpec</span><span class=\"token punctuation\">(</span>resultSize<span class=\"token punctuation\">,</span> resultMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAemLj.png\" alt=\"IAemLj.png\"></p>\n<h3 id=\"measure-过程\"><a class=\"markdownIt-Anchor\" href=\"#measure-过程\">#</a> Measure 过程</h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAuMTA.png\" alt=\"IAuMTA.png\"></p>\n<p>布局过程自定义的方式</p>\n<ol>\n<li>重写   <code>onMeasure()</code>   来修改已有的   <code>View</code>   的尺寸；</li>\n<li>重写   <code>onMeasure()</code>   来全新定制自定义   <code>View</code>   的尺寸；</li>\n<li>重写   <code>onMeasure()</code>   和   <code>onLayout()</code>   来全新定制自定义   <code>ViewGroup</code>   的内部布局。</li>\n</ol>\n<h4 id=\"view的measure\"><a class=\"markdownIt-Anchor\" href=\"#view的measure\">#</a> View 的 measure</h4>\n<p>View 的 measure 过程由其 <code>measure()</code>  方法完成：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n* 源码分析：measure（）\n* 定义：Measure 过程的入口；属于 View.java 类 &amp; final 类型，即子类不能重写此方法\n* 作用：基本测量逻辑的判断\n**/</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">measure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 判断是否需要重新测量           </span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forceLayout <span class=\"token operator\">||</span> needsLayout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">// 判断是否有缓存</span>\n        <span class=\"token keyword\">int</span> cacheIndex <span class=\"token operator\">=</span> forceLayout <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> mMeasureCache<span class=\"token punctuation\">.</span><span class=\"token function\">indexOfKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cacheIndex <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> sIgnoreMeasureCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 开始测量</span>\n            <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mPrivateFlags3 <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">long</span> value <span class=\"token operator\">=</span> mMeasureCache<span class=\"token punctuation\">.</span><span class=\"token function\">valueAt</span><span class=\"token punctuation\">(</span>cacheIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Casting a long to int drops the high 32 bits, no mask needed</span>\n            <span class=\"token function\">setMeasuredDimensionRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>></span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mPrivateFlags3 <span class=\"token operator\">|=</span> PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>setMeasuredDimension()</code>  方法会设置 View 的宽 / 高的测量值，因此我们只需要看 <code>getDefaultSize()</code>  方法即可</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAGYZT.png\" alt=\"IAGYZT.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * onMeasure（）要的做是事情\n * 1. 根据 View 宽 / 高的测量规格计算 View 的宽 / 高值：getDefaultSize ()\n * 2. 存储测量后的 View 宽 / 高：setMeasuredDimension ()\n **/</span>\n <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSuggestedMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSuggestedMinimumHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n \n <span class=\"token comment\">/**\n  * @param size        提供的默认大小\n  * @param measureSpec 宽 / 高的测量规格\n  */</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> measureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">// 设置默认大小</span>\n     <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 获取宽 / 高测量规格的模式 &amp; 测量大小</span>\n     <span class=\"token keyword\">int</span> specMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>measureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">int</span> specSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>measureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>specMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">// 模式为 UNSPECIFIED 时，使用提供的默认大小 = 参数 Size</span>\n       <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>UNSPECIFIED<span class=\"token operator\">:</span>\n         result <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// 模式为 AT_MOST,EXACTLY 时，使用 View 测量后的宽 / 高值 = measureSpec 中的 Size  </span>\n       <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>AT_MOST<span class=\"token operator\">:</span>\n       <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY<span class=\"token operator\">:</span>\n         result <span class=\"token operator\">=</span> specSize<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">// 返回 View 的宽 / 高值</span>\n     <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当模式是 UNSPECIFIED 时，使用的是提供的默认大小:</p>\n<ul>\n<li>若 View 无设置背景，那么 View 的宽度 = mMinWidth。mMinWidth 为 android:minWidth 属性所指定的值，默认为 0</li>\n<li>若 View 设置了背景，View 的宽度为 mMinWidth 和 mBackground.getMinimumWidth () 中的最大值。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSuggestedMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mBackground <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mMinWidth <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mMinWidth<span class=\"token punctuation\">,</span> mBackground<span class=\"token punctuation\">.</span><span class=\"token function\">getMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ9mV.png\" alt=\"IAJ9mV.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ1te.png\" alt=\"IAJ1te.png\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"viewgroup的measure\"><a class=\"markdownIt-Anchor\" href=\"#viewgroup的measure\">#</a> ViewGroup 的 measure</h4>\n<blockquote>\n<p>ViewGroup 是个抽象类，不同 ViewGroup 的 onMeasure 的实现都个不相同，除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素再递归去执行这个过程</p>\n</blockquote>\n<ol>\n<li>遍历所有子 View &amp; 测量：measureChildren ()</li>\n<li>合并所有子 View 的尺寸大小，最终得到 ViewGroup 的测量值（需自身实现）</li>\n<li>存储测量后 View 宽 / 高的值：调用 setMeasuredDimension ()</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 定义存放测量后的 View 宽 / 高的变量</span>\n      <span class=\"token keyword\">int</span> widthMeasure <span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> heightMeasure <span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 1. 遍历所有子 View &amp; 测量 (measureChildren ())</span>\n      <span class=\"token function\">measureChildren</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span>；\n      <span class=\"token comment\">// 2. 合并所有子 View 的尺寸大小，最终得到 ViewGroup 父视图的测量值</span>\n      <span class=\"token comment\">// 需自身实现</span>\n      <span class=\"token function\">measureMerge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 3. 存储测量后 View 宽 / 高的值：调用 setMeasuredDimension ()</span>\n      <span class=\"token comment\">// 类似单一 View 的过程，此处不作过多描述</span>\n      <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span>widthMeasure<span class=\"token punctuation\">,</span>  heightMeasure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>measureChildren()</code>  遍历子 View 并且调用 measureChild () 进行下一步测量</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">measureChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 要求该视图的所有子视图度量自己，同时考虑该视图的 MeasureSpec 要求及其填充。我们跳过了处于 GONE 状态的子节点</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> mChildrenCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> children <span class=\"token operator\">=</span> mChildren<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>mViewFlags <span class=\"token operator\">&amp;</span> VISIBILITY_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> GONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">measureChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAokqI.png\" alt=\"IAokqI.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAo1Ln.png\" alt=\"IAo1Ln.png\"></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"linearlayout-measure分析\"><a class=\"markdownIt-Anchor\" href=\"#linearlayout-measure分析\">#</a> LinearLayout measure 分析</h5>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 根据不同的布局属性进行不同的计算</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mOrientation <span class=\"token operator\">==</span> VERTICAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">measureVertical</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">measureHorizontal</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">measureVertical</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取垂直方向上的子 View 个数</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 遍历子 View 获取其高度，并记录下子 View 中最高的高度数值</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> child <span class=\"token operator\">=</span> <span class=\"token function\">getVirtualChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// 子 View 不可见，直接跳过该 View 的 measure 过程，getChildrenSkipCount () 返回值恒为 0</span>\n        <span class=\"token comment\">// 注：若 view 的可见属性设置为 VIEW.INVISIBLE，还是会计算该 view 大小</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>GONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           i <span class=\"token operator\">+=</span> <span class=\"token function\">getChildrenSkipCount</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n \n        <span class=\"token comment\">// 记录子 View 是否有 weight 属性设置，用于后面判断是否需要二次 measure</span>\n        totalWeight <span class=\"token operator\">+=</span> lp<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heightMode <span class=\"token operator\">==</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span>EXACTLY <span class=\"token operator\">&amp;&amp;</span> lp<span class=\"token punctuation\">.</span>height <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> lp<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果 LinearLayout 的 specMode 为 EXACTLY 且子 View 设置了 weight 属性，在这里会跳过子 View 的 measure 过程</span>\n            <span class=\"token comment\">// 同时标记 skippedMeasure 属性为 true，后面会根据该属性决定是否进行第二次 measure</span>\n            <span class=\"token comment\">// 若 LinearLayout 的子 View 设置了 weight，会进行两次 measure 计算，比较耗时</span>\n            <span class=\"token comment\">// 这就是为什么 LinearLayout 的子 View 需要使用 weight 属性时候，最好替换成 RelativeLayout 布局</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> totalLength <span class=\"token operator\">=</span> mTotalLength<span class=\"token punctuation\">;</span>\n            mTotalLength <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">,</span> totalLength <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>topMargin <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>bottomMargin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            skippedMeasure <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> oldHeight <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 步骤 1：遍历所有子 View &amp; 测量：measureChildren（）</span>\n            <span class=\"token comment\">// 注：该方法内部，最终会调用 measureChildren（），从而 遍历所有子 View &amp; 测量</span>\n            <span class=\"token function\">measureChildBeforeLayout</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">,</span> totalWeight <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> mTotalLength <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token comment\">// 步骤 2：合并所有子 View 的尺寸大小，最终得到 ViewGroup 父视图的测量值（自身实现）</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> childHeight <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">getMeasuredHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// 1. mTotalLength 用于存储 LinearLayout 在竖直方向的高度</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> totalLength <span class=\"token operator\">=</span> mTotalLength<span class=\"token punctuation\">;</span>\n \n            <span class=\"token comment\">// 2. 每测量一个子 View 的高度， mTotalLength 就会增加</span>\n            mTotalLength <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">,</span> totalLength <span class=\"token operator\">+</span> childHeight <span class=\"token operator\">+</span> lp<span class=\"token punctuation\">.</span>topMargin <span class=\"token operator\">+</span>\n                           lp<span class=\"token punctuation\">.</span>bottomMargin <span class=\"token operator\">+</span> <span class=\"token function\">getNextLocationOffset</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token comment\">// 3. 记录 LinearLayout 占用的总高度</span>\n    <span class=\"token comment\">// 即除了子 View 的高度，还有本身的 padding 属性值</span>\n    mTotalLength <span class=\"token operator\">+=</span> mPaddingTop <span class=\"token operator\">+</span> mPaddingBottom<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightSize <span class=\"token operator\">=</span> mTotalLength<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> heightSizeAndState <span class=\"token operator\">=</span> <span class=\"token function\">resolveSizeAndState</span><span class=\"token punctuation\">(</span>heightSize<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 步骤 3：存储测量后 View 宽 / 高的值：调用 setMeasuredDimension ()</span>\n    <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolveSizeAndState</span><span class=\"token punctuation\">(</span>maxWidth<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> childState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> heightSizeAndState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"获取view的宽高\"><a class=\"markdownIt-Anchor\" href=\"#获取view的宽高\">#</a> 获取 View 的宽高</h3>\n<blockquote>\n<p>Activity 启动时，在 onCreate ()、onStart ()、onResume () 中均无法正确的得到某个 View 的宽高信息，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的</p>\n</blockquote>\n<ul>\n<li>onWindowFocusChanged()\n<ul>\n<li>需要注意的是，onWindowFocusChanged () 会被调用多次，当 Activity 的窗口得到焦点和失去焦点时均会被调用一次。</li>\n</ul>\n</li>\n<li>View.post(runnable)</li>\n<li>ViewTreeObserver</li>\n<li>手动调用 View 的 measure 方法</li>\n</ul>\n<h3 id=\"refer\"><a class=\"markdownIt-Anchor\" href=\"#refer\">#</a> Refer</h3>\n<p><a href=\"https://blog.csdn.net/u010289802/article/details/80183142\">Android 知识体系学习目录_lerendan 的博客 - CSDN 博客</a></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/SA664RldODNgeCrz/",
            "url": "https://onion99.github.io/2021/11/03/SA664RldODNgeCrz/",
            "title": "自定义View(5) - 动画",
            "date_published": "2021-11-03T13:59:44.000Z",
            "content_html": "<blockquote>\n<p>三者性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，差别只是使用的便捷性以及功能的灵活性。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFf4h9.gif\" alt=\"IFf4h9.gif\"></p>\n<span id=\"more\"></span>\n<h3 id=\"viewpropertyanimator\"><a class=\"markdownIt-Anchor\" href=\"#viewpropertyanimator\">#</a> ViewPropertyAnimator</h3>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">view<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">scaleX</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">scaleY</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">alpha</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"objectanimator\"><a class=\"markdownIt-Anchor\" href=\"#objectanimator\">#</a> ObjectAnimator</h3>\n<blockquote>\n<p>多个动画配合执行</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">PropertyValuesHolder</span> holder1 <span class=\"token operator\">=</span> <span class=\"token class-name\">PropertyValuesHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scaleX\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PropertyValuesHolder</span> holder2 <span class=\"token operator\">=</span> <span class=\"token class-name\">PropertyValuesHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scaleY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PropertyValuesHolder</span> holder3 <span class=\"token operator\">=</span> <span class=\"token class-name\">PropertyValuesHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ObjectAnimator</span> animator <span class=\"token operator\">=</span> <span class=\"token class-name\">ObjectAnimator</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPropertyValuesHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> holder1<span class=\"token punctuation\">,</span> holder2<span class=\"token punctuation\">,</span> holder3<span class=\"token punctuation\">)</span>\nanimator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"valueanimator\"><a class=\"markdownIt-Anchor\" href=\"#valueanimator\">#</a> ValueAnimator</h3>\n<blockquote>\n<p>ValueAnimator 本身不作用于任何一个属性，也不提供任何一种动画。它就是一个数值发生器，可以产生想要的各种数值</p>\n</blockquote>\n<p>ValueAnimator 并不常用，因为它的功能太基础了。ValueAnimator 是 ObjectAnimator 的父类，实际上，ValueAnimator 就是一个不能指定目标对象版本的 ObjectAnimato</p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/ZOnr24kULe7cQgsc/",
            "url": "https://onion99.github.io/2021/11/03/ZOnr24kULe7cQgsc/",
            "title": "自定义View(4) - Canvas相关",
            "date_published": "2021-11-03T13:58:53.000Z",
            "content_html": "<h3 id=\"范围裁切\"><a class=\"markdownIt-Anchor\" href=\"#范围裁切\">#</a> 范围裁切</h3>\n<h4 id=\"cliprect\"><a class=\"markdownIt-Anchor\" href=\"#cliprect\">#</a> clipRect</h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFKTER.png\" alt=\"IFKTER.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipRect</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 加上 Canvas.save () 和 Canvas.restore () 来及时恢复绘制范围</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipRect</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<span id=\"more\"></span>\n<h4 id=\"clippath\"><a class=\"markdownIt-Anchor\" href=\"#clippath\">#</a> clipPath</h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFM9UI.md.png\" alt=\"IFM9UI.md.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipPath</span><span class=\"token punctuation\">(</span>path1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> point1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">clipPath</span><span class=\"token punctuation\">(</span>path2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> point2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"几何变换\"><a class=\"markdownIt-Anchor\" href=\"#几何变换\">#</a> 几何变换</h3>\n<h4 id=\"二维变换\"><a class=\"markdownIt-Anchor\" href=\"#二维变换\">#</a> 二维变换</h4>\n<blockquote>\n<p>处理常见的二维变换</p>\n</blockquote>\n<ul>\n<li><code>Canvas.translate()</code>  平移</li>\n<li><code>Canvas.rotate()</code>  旋转</li>\n<li><code>Canvas.scale()</code>  缩放</li>\n<li><code>Canvas.skew()</code>  错切</li>\n</ul>\n<h4 id=\"matrix变换\"><a class=\"markdownIt-Anchor\" href=\"#matrix变换\">#</a> Matrix 变换</h4>\n<blockquote>\n<p>用来处理不常见的二维变换</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFn6qs.png\" alt=\"IFn6qs.png\"></p>\n<ul>\n<li><code>Canvas.setMatrix(matrix)</code>\n<ul>\n<li>用  <code>Matrix</code>  直接替换  <code>Canvas</code>  当前的变换矩阵，即抛弃  <code>Canvas</code>  当前的变换</li>\n</ul>\n</li>\n<li><code>Canvas.concat(matrix)</code>\n<ul>\n<li>用  <code>Canvas</code>  当前的变换矩阵和  <code>Matrix</code>  相乘，即基于  <code>Canvas</code>  当前的变换，叠加上  <code>Matrix</code>  中的变换</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Matrix</span> matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Matrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> pointsSrc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> pointsDst <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>left <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> top <span class=\"token operator\">+</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">+</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> top <span class=\"token operator\">-</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> left <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> bottom <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> bottom <span class=\"token operator\">+</span> <span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nmatrix<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span><span class=\"token function\">setPolyToPoly</span><span class=\"token punctuation\">(</span>pointsSrc<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pointsDst<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"camera\"><a class=\"markdownIt-Anchor\" href=\"#camera\">#</a> Camera</h4>\n<blockquote>\n<p>处理三维旋转</p>\n</blockquote>\n<h5 id=\"camerarotate\"><a class=\"markdownIt-Anchor\" href=\"#camerarotate\">#</a> Camera.rotate*</h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFZoMd.md.png\" alt=\"IFZoMd.md.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Camera</span> camera <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span>  <span class=\"token class-name\">Camera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point</span> point1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point</span> point2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Canvas</span> canvas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   canvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   camera<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存 Camera 的状态</span>\n   camera<span class=\"token punctuation\">.</span><span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 旋转 Camera 的三维空间</span>\n   camera<span class=\"token punctuation\">.</span><span class=\"token function\">applyToCanvas</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把旋转投影到 Canvas</span>\n   camera<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 恢复 Camera 的状态</span>\n   canvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> point1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   canvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>居中处理:<br>\n<img src=\"https://z3.ax1x.com/2021/11/02/IFesfS.png\" alt=\"IFesfS.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> bitmapWidth <span class=\"token operator\">=</span> bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bitmapHeight <span class=\"token operator\">=</span> bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> center1X <span class=\"token operator\">=</span> point1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> bitmapWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> center1Y <span class=\"token operator\">=</span> point1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> bitmapHeight <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> center2X <span class=\"token operator\">=</span> point2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> bitmapWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> center2Y <span class=\"token operator\">=</span> point2<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> bitmapHeight <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\ncamera<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncamera<span class=\"token punctuation\">.</span><span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncamera<span class=\"token punctuation\">.</span><span class=\"token function\">getMatrix</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncamera<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span><span class=\"token function\">preTranslate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>center1X<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>center1Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix<span class=\"token punctuation\">.</span><span class=\"token function\">postTranslate</span><span class=\"token punctuation\">(</span>center1X<span class=\"token punctuation\">,</span> center1Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> point1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"cameratranslate\"><a class=\"markdownIt-Anchor\" href=\"#cameratranslate\">#</a> Camera.translate</h5>\n<h5 id=\"camerasetlocation\"><a class=\"markdownIt-Anchor\" href=\"#camerasetlocation\">#</a> Camera.setLocation</h5>\n<blockquote>\n<p>设置虚拟相机的位置</p>\n</blockquote>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/03/VjI1fQxy8MSFqUqm/",
            "url": "https://onion99.github.io/2021/11/03/VjI1fQxy8MSFqUqm/",
            "title": "自定义View(3) - Text相关",
            "date_published": "2021-11-03T13:57:48.000Z",
            "content_html": "<h3 id=\"文字绘制canvas\"><a class=\"markdownIt-Anchor\" href=\"#文字绘制canvas\">#</a> 文字绘制 (Canvas)</h3>\n<h4 id=\"绘制方式\"><a class=\"markdownIt-Anchor\" href=\"#绘制方式\">#</a> 绘制方式</h4>\n<h5 id=\"drawtext\"><a class=\"markdownIt-Anchor\" href=\"#drawtext\">#</a> drawText</h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IiheJA.png\" alt=\"IiheJA.png\"></p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello HenCoder\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"drawtextrun\"><a class=\"markdownIt-Anchor\" href=\"#drawtextrun\">#</a> drawTextRun</h5>\n<h5 id=\"drawtextonpath\"><a class=\"markdownIt-Anchor\" href=\"#drawtextonpath\">#</a> drawTextOnPath</h5>\n<blockquote>\n<p>沿着一条 Path 来绘制文字</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IihNzq.png\" alt=\"IihNzq.png\"><br>\n <code>drawTextOnPath()</code>  使用的  <code>Path</code>  ，拐弯处全用圆角，别用尖角</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">canvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 Path 也绘制出来，理解起来更方便</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawTextOnPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello HeCoder\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"staticlayout\"><a class=\"markdownIt-Anchor\" href=\"#staticlayout\">#</a> StaticLayout</h5>\n<blockquote>\n<p>进行多行文字的绘制</p>\n</blockquote>\n<ul>\n<li>View 的边缘自动折行</li>\n<li>在换行符  <code>\\n</code>  处换行</li>\n</ul>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/Iih7Yd.md.png\" alt=\"Iih7Yd.md.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> text1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StaticLayout</span> staticLayout1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticLayout</span><span class=\"token punctuation\">(</span>text1<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Layout<span class=\"token punctuation\">.</span>Alignment</span><span class=\"token punctuation\">.</span>ALIGN_NORMAL<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> text2 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\\nbc\\ndefghi\\njklm\\nnopqrst\\nuvwx\\nyz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">StaticLayout</span> staticLayout2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticLayout</span><span class=\"token punctuation\">(</span>text2<span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Layout<span class=\"token punctuation\">.</span>Alignment</span><span class=\"token punctuation\">.</span>ALIGN_NORMAL<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstaticLayout1<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstaticLayout2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文字绘制辅助paint\"><a class=\"markdownIt-Anchor\" href=\"#文字绘制辅助paint\">#</a> 文字绘制辅助 (Paint)</h3>\n<h4 id=\"样式设置\"><a class=\"markdownIt-Anchor\" href=\"#样式设置\">#</a> 样式设置</h4>\n<ul>\n<li><code>setTextSize(float textSize)</code></li>\n<li><code>setTypeface(Typeface typeface)</code></li>\n<li><code>setFakeBoldText(boolean fakeBoldText)</code>  是否使用伪粗体</li>\n<li><code>setStrikeThruText(boolean strikeThruText)</code>  是否加删除线</li>\n<li><code>setUnderlineText(boolean underlineText)</code></li>\n<li><code>setTextSkewX(float skewX)</code>  文字横切角度</li>\n<li><code>setTextScaleX(float scaleX)</code></li>\n<li><code>setLetterSpacing(float letterSpacing)</code>  字符间距</li>\n<li><code>setFontFeatureSettings(String settings)</code></li>\n<li><code>setTextAlign(Paint.Align align)</code></li>\n<li><code>setTextLocale(Locale locale)</code>  语言区域</li>\n<li><code>setHinting(int mode)</code>  字体微调</li>\n<li><code>setSubpixelText(boolean subpixelText)</code>  是否开启像素级的抗锯齿</li>\n</ul>\n<h4 id=\"测量\"><a class=\"markdownIt-Anchor\" href=\"#测量\">#</a> 测量</h4>\n<ul>\n<li><code>getFontSpacing()</code>  获取推荐的行距\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IiboRg.png\" alt=\"IiboRg.png\"></li>\n</ul>\n</li>\n<li><code>getFontMetrics()</code>\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IibtM9.png\" alt=\"IibtM9.png\"></li>\n</ul>\n</li>\n<li><code>getTextBounds()</code>  获取文字范围</li>\n<li><code>measureText()</code>  测量文字的宽度并返回</li>\n<li><code>getTextWidths()</code>  获取字符串中每个字符的宽度</li>\n<li><code>breakText()</code>  和  <code>measureText()</code>  的区别是， breakText () 是在给出宽度上限的前提下测量文字的宽度。如果文字的宽度超出了上限，那么在临近超限的位置截断文字</li>\n<li>光标相关\n<ul>\n<li><code>getRunAdvance()</code>  计算出某个字符处光标的  <code>x</code>  坐标\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/Iibnrn.png\" alt=\"Iibnrn.png\"></li>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IibMV0.md.png\" alt=\"IibMV0.md.png\"></li>\n</ul>\n</li>\n<li><code>getOffsetForAdvance</code>  计算第几个字符最接近这个坐标</li>\n</ul>\n</li>\n<li><code>hasGlyph()</code>  检查指定的字符串中是否是一个单独的字形\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IiH9tU.png\" alt=\"IiH9tU.png\"></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/weRgrdLnBqIUWkcH/",
            "url": "https://onion99.github.io/2021/11/01/weRgrdLnBqIUWkcH/",
            "title": "自定义View(2) - Paint相关",
            "date_published": "2021-11-01T14:19:10.000Z",
            "content_html": "<h3 id=\"color\"><a class=\"markdownIt-Anchor\" href=\"#color\">#</a> Color</h3>\n<h4 id=\"基本颜色\"><a class=\"markdownIt-Anchor\" href=\"#基本颜色\">#</a> 基本颜色</h4>\n<p>setColor(int color):</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#009688\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<span id=\"more\"></span>\n<p>setARGB(int a, int r, int g, int b)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setARGB</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"shader\"><a class=\"markdownIt-Anchor\" href=\"#shader\">#</a> Shader</h4>\n<h5 id=\"lineargradient线性渐变\"><a class=\"markdownIt-Anchor\" href=\"#lineargradient线性渐变\">#</a> LinearGradient (线性渐变)</h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICK7e1.png\" alt=\"ICK7e1.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Shader</span> shader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#E91E63\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#2196F3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CLAMP</th>\n<th style=\"text-align:center\">MIRROR</th>\n<th style=\"text-align:center\">REPEAT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICuIVP.png\" alt=\"ICuIVP.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICKWJU.png\" alt=\"ICKWJU.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICK5QJ.png\" alt=\"ICK5QJ.png\"></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"radialgradient辐射渐变\"><a class=\"markdownIt-Anchor\" href=\"#radialgradient辐射渐变\">#</a> RadialGradient (辐射渐变)</h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IClQRU.png\" alt=\"IClQRU.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Shader</span> shader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RadialGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#E91E63\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#2196F3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CLAMP</th>\n<th style=\"text-align:center\">MIRROR</th>\n<th style=\"text-align:center\">REPEAT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IClfW8.png\" alt=\"IClfW8.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IC1SOJ.png\" alt=\"IC1SOJ.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IC1SOJ.png\" alt=\"IC1SOJ.png\"></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"sweepgradient扫描渐变\"><a class=\"markdownIt-Anchor\" href=\"#sweepgradient扫描渐变\">#</a> SweepGradient (扫描渐变)</h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC3N8K.png\" alt=\"IC3N8K.png\">]</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Shader</span> shader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SweepGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#E91E63\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#2196F3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"bitmapshader\"><a class=\"markdownIt-Anchor\" href=\"#bitmapshader\">#</a> BitmapShader</h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC8dJ0.png\" alt=\"IC8dJ0.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Bitmap</span> bitmap <span class=\"token operator\">=</span> <span class=\"token class-name\">BitmapFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeResource</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>batman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Shader</span> shader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BitmapShader</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CLAMP</th>\n<th style=\"text-align:center\">MIRROR</th>\n<th style=\"text-align:center\">REPEAT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICGhAs.png\" alt=\"ICGhAs.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICG7cT.png\" alt=\"ICG7cT.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICGLB4.png\" alt=\"ICGLB4.png\"></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"composeshader-混合着色器\"><a class=\"markdownIt-Anchor\" href=\"#composeshader-混合着色器\">#</a> ComposeShader 混合着色器</h5>\n<blockquote>\n<p>所谓混合，就是把两个 Shader 一起使用。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICUmdg.png\" alt=\"ICUmdg.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 第一个 Shader：头像的 Bitmap</span>\n<span class=\"token class-name\">Bitmap</span> bitmap1 <span class=\"token operator\">=</span> <span class=\"token class-name\">BitmapFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeResource</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>batman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Shader</span> shader1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BitmapShader</span><span class=\"token punctuation\">(</span>bitmap1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第二个 Shader：从上到下的线性渐变（由透明到黑色）</span>\n<span class=\"token class-name\">Bitmap</span> bitmap2 <span class=\"token operator\">=</span> <span class=\"token class-name\">BitmapFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeResource</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>batman_logo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Shader</span> shader2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BitmapShader</span><span class=\"token punctuation\">(</span>bitmap2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Shader<span class=\"token punctuation\">.</span>TileMode</span><span class=\"token punctuation\">.</span>CLAMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ComposeShader：结合两个 Shader</span>\n<span class=\"token class-name\">Shader</span> shader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComposeShader</span><span class=\"token punctuation\">(</span>shader1<span class=\"token punctuation\">,</span> shader2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PorterDuff<span class=\"token punctuation\">.</span>Mode</span><span class=\"token punctuation\">.</span>SRC_OVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"porterduff\"><a class=\"markdownIt-Anchor\" href=\"#porterduff\">#</a> PorterDuff</h4>\n<h3 id=\"patheffect\"><a class=\"markdownIt-Anchor\" href=\"#patheffect\">#</a> PathEffect</h3>\n<h4 id=\"style\"><a class=\"markdownIt-Anchor\" href=\"#style\">#</a> Style</h4>\n<p><code>Paint.setStrokeWidth</code> : 线条宽度<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICvqQe.png\" alt=\"ICvqQe.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Paint<span class=\"token punctuation\">.</span>Style</span><span class=\"token punctuation\">.</span>STROKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">650</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Paint.setStrokeCap</code> : 线条形状</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICxkLj.png\" alt=\"ICxkLj.png\"></p>\n<p><code>Paint.setStrokeJoin</code> : 拐角形状</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICxQlF.png\" alt=\"ICxQlF.png\"></p>\n<p><code>Paint.setStrokeMiter</code> : 拐角边缘</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICzenH.png\" alt=\"image\"></p>\n<h4 id=\"filter\"><a class=\"markdownIt-Anchor\" href=\"#filter\">#</a> Filter</h4>\n<p><code>PathEffect.setDither()</code> : 图像抖动<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICL31H.png\" alt=\"ICL31H.png\"></p>\n<p><code>PathEffect.setFilterBitmap()</code> : 双线性过滤<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICvZ8O.png\" alt=\"ICvZ8O.png\"></p>\n<h4 id=\"effect\"><a class=\"markdownIt-Anchor\" href=\"#effect\">#</a> Effect</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CornerPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICgRkq.png\" alt=\"ICgRkq.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DiscretePathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICgGOH.png\" alt=\"ICgGOH.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DashPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICcXQg.png\" alt=\"ICcXQg.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PathDashPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IC6T8U.png\" alt=\"IC6T8U.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SumPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICyBpF.png\" alt=\"ICyBpF.png\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ComposePathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICy8yj.png\" alt=\"ICy8yj.png\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"shadowlayer\"><a class=\"markdownIt-Anchor\" href=\"#shadowlayer\">#</a> ShadowLayer</h4>\n<blockquote>\n<p>绘制层下方的阴影效果</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICstPO.png\" alt=\"ICstPO.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setShadowLayer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"maskfilter\"><a class=\"markdownIt-Anchor\" href=\"#maskfilter\">#</a> MaskFilter</h4>\n<blockquote>\n<p>绘制层上方的附加效果</p>\n</blockquote>\n<p>BlurMaskFilter (模糊效果):</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICrhE6.md.png\" alt=\"ICrhE6.md.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setMaskFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BlurMaskFilter</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlurMaskFilter<span class=\"token punctuation\">.</span>Blur</span><span class=\"token punctuation\">.</span>NORMAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>EmbossMaskFilter (浮雕效果):<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICr0EV.png\" alt=\"ICr0EV.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 数组：光源方向，光强度，炫光系数，应用光线范围 </span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setMaskFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EmbossMaskFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"getpath\"><a class=\"markdownIt-Anchor\" href=\"#getpath\">#</a> getPath</h4>\n<p><code>PathEffect.getFillPath()</code>  获取图形 Path</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICDOtU.md.png\" alt=\"ICDOtU.md.png\"></p>\n<p><code>PathEffect.getTextPath()</code>  获取图形 Path</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICDAQs.png\" alt=\"ICDAQs.png\"></p>\n<h3 id=\"refer\"><a class=\"markdownIt-Anchor\" href=\"#refer\">#</a> Refer</h3>\n<p><a href=\"https://rengwuxian.com/ui-1-2/\">HenCoder Android 开发进阶：自定义 View 1-2 Paint 详解 (rengwuxian.com)</a></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/K0uh0dFU4QBtZ8Wm/",
            "url": "https://onion99.github.io/2021/11/01/K0uh0dFU4QBtZ8Wm/",
            "title": "自定义View(1) - 基本绘制",
            "date_published": "2021-11-01T14:17:37.000Z",
            "content_html": "<blockquote>\n<p>简单的绘制基本由 <code>Canvas.drawxxx()</code>  和 Paint 的配置组成</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC9uZj.png\" alt=\"IC9uZj.png\"></p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> PaintView <span class=\"token annotation builtin\">@JvmOverloads</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> attrs<span class=\"token operator\">:</span> AttributeSet<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> defStyleAttr<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> defStyleAttr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> mPaint <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">Paint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDraw</span><span class=\"token punctuation\">(</span>canvas<span class=\"token operator\">:</span> Canvas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDraw</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span>\n    paint<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token comment\">// 设置为红色</span>\n    canvas<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> paint<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<span id=\"more\"></span>\n<h3 id=\"canvas\"><a class=\"markdownIt-Anchor\" href=\"#canvas\">#</a> Canvas</h3>\n<ul>\n<li><code>Canvas.drawArc()</code>  绘制弧形或扇形<br>\n +  <code>left</code> ,  <code>top</code> ,  <code>right</code> ,  <code>bottom</code>  描述的是这个弧形所在的椭圆<br>\n +  <code>startAngle</code>  是弧形的起始角度<br>\n +  <code>sweepAngle</code>  是弧形划过的角度<br>\n +  <code>useCenter</code>  表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形</li>\n<li><code>Canvas.drawPath()</code>  组合图形</li>\n</ul>\n<h3 id=\"paint\"><a class=\"markdownIt-Anchor\" href=\"#paint\">#</a> Paint</h3>\n<ul>\n<li><code>Paint.setStyle(Style style)</code>   设置绘制模式</li>\n<li><code>Paint.setColor(int color)</code>   设置颜色</li>\n<li><code>Paint.setStrokeWidth(float width)</code>   设置线条宽度</li>\n<li><code>Paint.setTextSize(float textSize)</code>   设置文字大小</li>\n<li><code>Paint.setAntiAlias(boolean aa)</code>   设置抗锯齿开关</li>\n</ul>\n<h3 id=\"path\"><a class=\"markdownIt-Anchor\" href=\"#path\">#</a> Path</h3>\n<blockquote>\n<p>如果只画一个圆，没必要用 Path，直接用 drawCircle () 就行了。drawPath () 一般是在绘制组合图形时才会用到的</p>\n</blockquote>\n<h4 id=\"pathaddxxx\"><a class=\"markdownIt-Anchor\" href=\"#pathaddxxx\">#</a> Path.addXxx</h4>\n<blockquote>\n<p>添加子图形</p>\n</blockquote>\n<p><code>path.addCircle(300, 300, 200, Path.Direction.CW)</code></p>\n<h4 id=\"pathxxxto\"><a class=\"markdownIt-Anchor\" href=\"#pathxxxto\">#</a> Path.xxxTo</h4>\n<blockquote>\n<p>用于画线（直线或曲线）</p>\n</blockquote>\n<p><code>lineTo(float x, float y) / rLineTo(float x, float y) </code> 画直线:<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICkWGR.png\" alt=\"ICkWGR.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>STROKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 由当前位置 (0, 0) 向 (100, 100) 画一条直线</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">rLineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 由当前位置 (100, 100) 向正右方 100 像素的位置画一条直线</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICASL8.png\" alt=\"ICASL8.png\">]</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>STROKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 画斜线</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 我移～～</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 画竖线</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>arcTo()</code>  和  <code>addArc()</code>  画弧线:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">false</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICEuct.png\" alt=\"ICEuct.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICEinK.png\" alt=\"ICEinK.png\"></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>STROKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//true 直接连线连到弧形起点（有痕迹）</span>\n<span class=\"token comment\">//false 强制移动到弧形起点（无痕迹）</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">arcTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token operator\">/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 等同上面</span>\npaint<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>STROKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">addArc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//addArc () 只是一个直接使用了 forceMoveTo = true 的简化版 arcTo ()</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>close() </code> 封闭当前子图形:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">no close</th>\n<th style=\"text-align:center\">close</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICVaPH.png\" alt=\"ICVaPH.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICVgIg.png\" alt=\"ICVgIg.png\"></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">paint<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>STROKE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"pathsetfilltype\"><a class=\"markdownIt-Anchor\" href=\"#pathsetfilltype\">#</a> Path.setFillType</h4>\n<blockquote>\n<p>设置填充方式</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICFucV.png\" alt=\"ICFucV.png\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">EVEN_ODD:even-odd rule （奇偶原则）</th>\n<th style=\"text-align:center\">WINDING: non-zero winding rule （非零环绕数原则）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICFKXT.png\" alt=\"ICFKXT.png\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICFJhR.png\" alt=\"ICFJhR.png\"></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/MgnT9VQ3PhWZOJAq/",
            "url": "https://onion99.github.io/2021/10/31/MgnT9VQ3PhWZOJAq/",
            "title": "课程-编码与加密",
            "date_published": "2021-10-31T13:32:00.000Z",
            "content_html": "<h2 id=\"加密\"><a class=\"markdownIt-Anchor\" href=\"#加密\">#</a> 加密</h2>\n<blockquote>\n<p>加密 (整容) 是通过 Intranet、Extranet 和 Internet 进行安全的信息交换的基础</p>\n</blockquote>\n<p>常用加密</p>\n<ul>\n<li>对称加密算法</li>\n<li>非对称加密算法</li>\n<li>哈希算法</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"对称加密\"><a class=\"markdownIt-Anchor\" href=\"#对称加密\">#</a> 对称加密</h3>\n<blockquote>\n<p>使⽤用密钥和加密算法对数据进行转换，得到的无意义数据即为密⽂；使用密钥和解密算法对密⽂进行逆向转换，得到原数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5bxS8f.png\" alt=\"5bxS8f.png\"></p>\n<p>算法：DES、AES</p>\n<h3 id=\"非对称加密\"><a class=\"markdownIt-Anchor\" href=\"#非对称加密\">#</a> 非对称加密</h3>\n<blockquote>\n<p>使⽤公钥对数据进行加密得到密文；使⽤用私钥对数据进⾏解密得到原数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5bxDZd.png\" alt=\"5bxDZd.png\"></p>\n<p>算法：RSA、DSA</p>\n<p>完整的非对称加密过程:<br>\n<img src=\"https://z3.ax1x.com/2021/10/28/5qdbl9.png\" alt=\"5qdbl9.png\"><br>\n 对数据进行签名时，实际上，是对数据的 hash 值（摘要）进行签名（加密），解密时，是对原数据进行 hash，得到摘要，再将加密过的摘要进行解密，将得到的两者对比，如果一致就验证通过</p>\n<h4 id=\"公钥与私钥\"><a class=\"markdownIt-Anchor\" href=\"#公钥与私钥\">#</a> 公钥与私钥</h4>\n<blockquote>\n<p>加密密钥就是公钥，解密密钥就是私钥</p>\n</blockquote>\n<p>将原数据通过我的私钥，也就是签名，进行加密，得到签名数据，别人拿我的公钥对我的签名数据进行解密（也就是验证的过程），得到的就是我要发送的原数据。签名数据只有我能造出来，因为只有我拥有我的私钥，这就证明了这个数据是我写出来的。也就是所谓的签名的作用。</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5bzD6U.png\" alt=\"5bzD6U.png\"></p>\n<h4 id=\"签名和验证\"><a class=\"markdownIt-Anchor\" href=\"#签名和验证\">#</a> 签名和验证</h4>\n<blockquote>\n<p>签名和验证是拿私钥加密（签名），公钥解密（验证）</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qSkhq.png\" alt=\"5qSkhq.png\"></p>\n<h2 id=\"编码\"><a class=\"markdownIt-Anchor\" href=\"#编码\">#</a> 编码</h2>\n<blockquote>\n<p>编码 (化妆) 是信息从一种形式或格式转换为另一种形式的过程。解码，是编码的逆过程</p>\n</blockquote>\n<h3 id=\"常用编码\"><a class=\"markdownIt-Anchor\" href=\"#常用编码\">#</a> 常用编码</h3>\n<ul>\n<li>Base64， 16 进制，Base32\n<ul>\n<li>将原来的信息用另外一种编码机制替换</li>\n</ul>\n</li>\n<li>多语种的编码 UTF-8, UTF-16,UTF-32, Unicode, ISO8859-1, GBK, GB2312\n<ul>\n<li>主要是对各种语言的编码</li>\n</ul>\n</li>\n<li>BER/DER 编码</li>\n<li>HTML 编码，JS 编码，URL 编码\n<ul>\n<li>针对脚本语言或者标签语言中的字符串中的特殊字符进行处理</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"base64\"><a class=\"markdownIt-Anchor\" href=\"#base64\">#</a> Base64</h4>\n<blockquote>\n<p>将二进制数据转换成由 64 个字符组成的字符串的编码算法</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qt0Cd.png\" alt=\"5qt0Cd.png\"></p>\n<p>编码示例:<br>\n<img src=\"https://z3.ax1x.com/2021/10/28/5qNYzn.png\" alt=\"5qNYzn.png\"></p>\n<p>作用：让原数据具有字符串所具有的特性，可以放在 URL 中传输，可以保存到文本文件，可以通过普通的聊天软件进行文本传输</p>\n<p>Base64 加密图片会更加安全和高效吗？<br>\n不会，Base64 是公开的算法，加密和解密都是公开的，任何人都可以解密，因此并不会更安全。通过 Base64 加密的文件或数据，都会增大约 1/3，降低网络性能，增大用户流量，因此也不存在更高效的问题</p>\n<h3 id=\"应用领域\"><a class=\"markdownIt-Anchor\" href=\"#应用领域\">#</a> 应用领域</h3>\n<h4 id=\"压缩与解压缩\"><a class=\"markdownIt-Anchor\" href=\"#压缩与解压缩\">#</a> 压缩与解压缩</h4>\n<blockquote>\n<p>压缩属于编码过程，解压缩属于解码过程</p>\n</blockquote>\n<p>压缩：把数据换一种方式来存储，以减少存储空间。<br>\n解压缩：把压缩后的数据还原成原先的形式，以便使用。<br>\n常⻅见压缩算法：DEFLATE（zip）、JPEG、MP3</p>\n<h4 id=\"媒体数据的编解码\"><a class=\"markdownIt-Anchor\" href=\"#媒体数据的编解码\">#</a> 媒体数据的编解码</h4>\n<p>图片的编码：把图像数据写成 JPG、PNG 等⽂件的编码格式。<br>\n图⽚的解码：把 JPG、PNG 等⽂文件中的数据解析成标准的图像数据。</p>\n<h4 id=\"序列化与反序列化\"><a class=\"markdownIt-Anchor\" href=\"#序列化与反序列化\">#</a> 序列化与反序列化</h4>\n<p>序列化：把数据对象，一般是内存中的，如 JVM 中的对象，转换成字节序列的过程。<br>\n反序列化：把字节序列重新转换成内存中的对象</p>\n<h4 id=\"hash\"><a class=\"markdownIt-Anchor\" href=\"#hash\">#</a> Hash</h4>\n<blockquote>\n<p>把任意数据转换成指定大小范围（通常很小）的数据</p>\n</blockquote>\n<p>经典算法：MD5、SHA1、SHA256 等</p>\n<p>实际用途:</p>\n<ul>\n<li>数据完整性验证\n<ul>\n<li>从⽹络上下载文件后，通过比对文件的 Hash 值 (例如 MD5、SHA1)，可以确认下载的文件是否有损坏。如果下载的文件 Hash 值和文件提供方给出的 Hash 值一致，则证明下载的文件是完好无损的</li>\n</ul>\n</li>\n<li>唯一性验证\n<ul>\n<li>HashCode 是一个数据的指纹信息，也就是从这个数据身上采取了足够多的特征来证明 “你是你”</li>\n</ul>\n</li>\n<li>快速查找: HashCode 和 HashMap\n<ul>\n<li>HashCode 是数据的内存地址</li>\n<li>HashMap：Key 的 HashCode 是 Value 的地址，通过 Key 的 HashCode 可以找到 Value</li>\n<li>在重写 equals () 时，也必须重写 hashCode (), 因为如果不重写 hashCode ()，当使用 equals () 比较时，hashCode () 是 Object 中的 hashCode ()，很可能出现用 equals () 判断相等而用 hashCode () 判断不相等的情况，甚至也有可能是相反的</li>\n</ul>\n</li>\n<li>隐私保护</li>\n</ul>\n<p>Hash 是编码吗？<br>\n 不是。 Hash 是单向过程，往往是不可逆的，无法进行逆向恢复操作，因此 Hash 不属于编码。</p>\n<p>Hash 是加密吗？<br>\n 不是。Hash 是单向过程，无法进行逆向回复操作，因此 Hash 不属于加密。(记住 MD5 不是加密！MD5 不可逆)</p>\n",
            "tags": [
                "课程学习"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/Qqq7oSBqBc2Zgbrx/",
            "url": "https://onion99.github.io/2021/10/31/Qqq7oSBqBc2Zgbrx/",
            "title": "课程-登陆与授权",
            "date_published": "2021-10-31T13:31:00.000Z",
            "content_html": "<h2 id=\"登录授权-tcpip-https和代理\"><a class=\"markdownIt-Anchor\" href=\"#登录授权-tcpip-https和代理\">#</a> 登录授权、TCP/IP、HTTPS 和代理</h2>\n<p>登录：身份认证，确认你是你的过程。<br>\n授权：由身份或持有的令牌确认享有某些权限（例如获取用户信息）。登录过程实质上的目的也是为了确认权限</p>\n<span id=\"more\"></span>\n<h3 id=\"http中授权方式\"><a class=\"markdownIt-Anchor\" href=\"#http中授权方式\">#</a> HTTP 中授权方式</h3>\n<h4 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> Cookie</h4>\n<blockquote>\n<p>使用 Cookie 管理登录状态</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qrP4f.png\" alt=\"5qrP4f.png\"></p>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qrmbn.png\" alt=\"5qrmbn.png\"></p>\n<h5 id=\"cookie工作机制\"><a class=\"markdownIt-Anchor\" href=\"#cookie工作机制\">#</a> Cookie 工作机制</h5>\n<ol>\n<li>服务器需要客户端保存的内容，放在 Set-Cookie 的 headers 里返回，客户端会自动保存。</li>\n<li>客户端保存的 Cookies，会在之后的所有请求里都携带进 Cookie header 里发回给服务器。</li>\n<li>客户端保存 Cookie 是按照服务器域名来分类的，例如 shop.com 发回的 Cookie 保存下来以后，在之后向 games.com 的请求中并不会被携带。</li>\n<li>. 客户端保存的 Cookie 在超时后会被删除，没有设置超时时间的 Cookie（称作 Session Cookie）在浏览器关闭后就会自动删除，另外，服务器也可以主动删除还未过期的客户端 Cookies</li>\n<li>Cookie 是由服务端管理的，客户端只是被动接受。</li>\n</ol>\n<h4 id=\"authorization-header\"><a class=\"markdownIt-Anchor\" href=\"#authorization-header\">#</a> Authorization Header</h4>\n<blockquote>\n<p>两种主流方式 Basic 和 Beare</p>\n</blockquote>\n<h5 id=\"basic\"><a class=\"markdownIt-Anchor\" href=\"#basic\">#</a> Basic</h5>\n<pre class=\"line-numbers language-dart\" data-language=\"dart\"><code class=\"language-dart\"><span class=\"token number\">1.</span>格式：<span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Basic</span><span class=\"token operator\">&lt;</span>username<span class=\"token punctuation\">:</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token number\">2.</span>Basic认证过程\n<span class=\"token number\">1.</span>浏览器发送请求到服务器\n                GET <span class=\"token operator\">/</span> HTTP <span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\n                <span class=\"token class-name\">Host</span><span class=\"token punctuation\">:</span>xxx<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span>com\n<span class=\"token number\">2.</span>服务端发送验证请求<span class=\"token number\">401</span>\n                HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span> <span class=\"token number\">401</span> <span class=\"token class-name\">Unauthorised</span>\n                <span class=\"token class-name\">Server</span><span class=\"token punctuation\">:</span> bfe<span class=\"token operator\">/</span><span class=\"token number\">1.0</span><span class=\"token number\">.8</span><span class=\"token number\">.18</span>\n                WWW<span class=\"token operator\">-</span><span class=\"token class-name\">Authenticate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Basic</span> realm<span class=\"token operator\">=</span><span class=\"token string\">\"XXXXX.com\"</span>\n                <span class=\"token class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">:</span> text<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span> charset<span class=\"token operator\">=</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span>\n<span class=\"token number\">3.</span>客户端收到<span class=\"token number\">401</span>返回值后，将自动弹出登录窗口，等待用户输入用户名，密码\n<span class=\"token number\">4.</span>将用户名密码进行<span class=\"token class-name\">Base64</span>编码后发送给服务端进行验证\n                GET <span class=\"token operator\">/</span> HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\n                <span class=\"token class-name\">Host</span><span class=\"token punctuation\">:</span> xxx<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span>com\n                <span class=\"token class-name\">Authorization</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Basic</span> xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n<span class=\"token number\">5.</span>服务端取出<span class=\"token class-name\">Authorization</span>中头信息，并与数据库进行比对，如果合法则返回<span class=\"token number\">200</span>，不合法，则返回<span class=\"token number\">401</span>。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"bearer\"><a class=\"markdownIt-Anchor\" href=\"#bearer\">#</a> Bearer</h5>\n<pre class=\"line-numbers language-objectivec\" data-language=\"objectivec\"><code class=\"language-objectivec\"><span class=\"token number\">1.</span>格式：Authorization<span class=\"token punctuation\">:</span> Bearer <span class=\"token operator\">&lt;</span>bearer token<span class=\"token operator\">></span>\n<span class=\"token number\">2.</span>bearer token 的获取方式：通过OAuth2的授权流程\n<span class=\"token number\">3.</span>OAuth2的流程\n            <span class=\"token number\">1.</span>第三方网站向授权网站申请授权合作，拿到client id和client secret\n            <span class=\"token number\">2.</span>用户在使用第三方网站的时候，点击通过授权，第三方网站将跳转授权网站，并将clientid传递给授权网站。\n            <span class=\"token number\">4.</span>授权方网站根据clientid，将第三方网站的信息和第三方网站需要的用户权限展示给用户，询问用户是否同意授权。\n            <span class=\"token number\">5.</span>当用户点击同意授权，授权方网站返回第三方网站，并传入Authorization code作为用户认可的凭证。\n            <span class=\"token number\">6.</span>第三方网站将Authorization code上送给自己的服务器，服务器将Authorization code跟自己服务器端存储的client secret发送给授权方服务器，授权方服务器通过验证后，返回给access token，整个OAuth2流程结束。\n            <span class=\"token number\">7.</span>在整个OAuth流程结束后，第三方网站服务器可以试用access token 作用用户授权的token，用此来向授权方网站请求获取用户信息等操作。\n        \n<span class=\"token number\">4.</span>问题：\n            为什么OAuth认证要引入Authorization code，并且需要申请授权的第三方将Authorization code传给第三方服务器，并且通过第三方服务器将Authorization code传递给授权方服务器。然后再获取授权方服务器的access token。这样做的目的是为了通信安全，因为OAuth不强制使用HTTPS，因此需要保证通信路径中存在窃听者的时候，还能保证足够的安全。\n            \n<span class=\"token number\">5.</span>第三方APP通过微信登录的流程：\n            这是一个标准的OAuth2的流程。\n            <span class=\"token number\">1.</span>第三方APP向腾讯方申请合作，拿到client id 和client secret\n            <span class=\"token number\">2.</span>当用户在第三方APP上需要微信登录的时候，第三方APP将使用微信SDK打开微信授权页面，并且传入client id作为自己授权id。\n            <span class=\"token number\">3.</span>微信拿到第三方app的client id后，提交微信后台，验证成功，则返回给第三方app Authorization code。\n            <span class=\"token number\">4.</span>第三方app拿到Authorization code后，将Authorization code传递给自己的服务器，第三方app的服务端将Authorization code 与 client secret 传递给微信后台，微信后台验证后返回access token。\n            <span class=\"token number\">5.</span>第三方app后台通过access token 想微信后台请求获取用户信息，微信验证通过后，则返回用户信息。\n            <span class=\"token number\">6.</span>服务器接受到用户信息后，在自己的数据库中建立一个账户，并将从微信获取的用户信息填入数据库中。并创建用户id，并将此id与微信id做好关联。\n            <span class=\"token number\">7.</span>当第三方app后台创建好用户后，想客户端的请求发出响应，并回传会刚刚创建的用户信息。\n            <span class=\"token number\">8.</span>客户端响应，获取用户信息，登录成功。\n            \n<span class=\"token number\">6.</span>在自家APP中使用Bearer token\n            部分app会在api设计中，将登录和授权设计出类似于OAuth2的过程，他会简化掉Authorization code的概念。既直接在接口请求成功后，返回access token，然后再之后的客户端的请求中，使用这个access token 作为Bearer token进行用户操作。\n            \n<span class=\"token number\">7.</span>Refresh token\n            Access token 都会有失效时间，当他失效后，第三方app的服务端会通过refresh token 接口传入refresh token 来获取新的access token。这样的的原因是安全，因为refresh token是放置在服务端的，即使access token被窃取，他也是有失效时间的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"tcpip\"><a class=\"markdownIt-Anchor\" href=\"#tcpip\">#</a> TCP/IP</h3>\n<blockquote>\n<p>两台计算机之间的通讯是通过 TCP/IP 协议在因特网上进行的</p>\n</blockquote>\n<p>TCP：Transmission Control Protocol 传输控制协议，用于应用程序之间的通信<br>\n IP：Internet Protocol 网际协议，用于计算机之间的通信</p>\n<h4 id=\"分层\"><a class=\"markdownIt-Anchor\" href=\"#分层\">#</a> 分层</h4>\n<blockquote>\n<p>因为网络具有不稳定性，要保证通信正常</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5qccSf.png\" alt=\"5qccSf.png\"></p>\n<h4 id=\"tcp连接\"><a class=\"markdownIt-Anchor\" href=\"#tcp连接\">#</a> TCP 连接</h4>\n<blockquote>\n<p>通信双方建立确认「可以通信」，不会将对方的消息丢弃，即为「建立连接」</p>\n</blockquote>\n<h5 id=\"连接建立\"><a class=\"markdownIt-Anchor\" href=\"#连接建立\">#</a> 连接建立</h5>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5LRCDS.png\" alt=\"5LRCDS.png\"></p>\n<h5 id=\"连接关闭\"><a class=\"markdownIt-Anchor\" href=\"#连接关闭\">#</a> 连接关闭</h5>\n<p><img src=\"https://z3.ax1x.com/2021/10/28/5LRGCR.png\" alt=\"5LRGCR.png\"></p>\n<h5 id=\"长连接\"><a class=\"markdownIt-Anchor\" href=\"#长连接\">#</a> 长连接</h5>\n<blockquote>\n<p>强制不让连接的通道关闭</p>\n</blockquote>\n<ul>\n<li>TCP 短连接\n<ul>\n<li>client 向 server 发起连接请求，server 接到请求，然后双方建立连接。client 向 server 发送消息，server 回应 client，然后一次读写就完成了</li>\n<li>一般的 server 不会回复完 client 后立即关闭连接的，所以一般是 client 先发起 close 操作</li>\n</ul>\n</li>\n<li>TCP 长连接\n<ul>\n<li>client 向 server 发起连接，server 接受 client 连接，双方建立连接。Client 与 server 完成一次读写之后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接</li>\n</ul>\n</li>\n</ul>\n<p>怎样实现长连接？<br>\n⼼跳。即在一定间隔时间内，使⽤ TCP 连接发送超短无意义消息来让网关不能将⾃己定义为「空闲连接」，从而防止网关将⾃己的连接关闭</p>\n<h3 id=\"https\"><a class=\"markdownIt-Anchor\" href=\"#https\">#</a> HTTPS</h3>\n<blockquote>\n<p>HTTP over SSL 的简称，即工作在 SSL (或 TLS) 上的 HTTP。是加密通信的 HTTP</p>\n</blockquote>\n<h4 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h4>\n<blockquote>\n<p>在客户端和服务器之间协商出一套对称密钥，每次发送消息之前将内容加密，收到之后解密，达到内容的加密传输</p>\n</blockquote>\n<p>为什么不直接用非对称加密？<br>\n 非对称加密由于使用了复杂的数学原理，因此计算相当复杂，如果完全使用非对称加密来加密通信内容，会严重影响网络通信的性能</p>\n<h4 id=\"https流程\"><a class=\"markdownIt-Anchor\" href=\"#https流程\">#</a> HTTPS 流程</h4>\n<ol>\n<li>客户端请求建立 TLS 连接</li>\n<li>服务器发回证书</li>\n<li>客户端验证服务器证书</li>\n<li>客户端信任服务器后，和服务器协商对称密钥</li>\n<li>使用对称密钥开始通信</li>\n</ol>\n<h2 id=\"about\"><a class=\"markdownIt-Anchor\" href=\"#about\">#</a> About</h2>\n<p><a href=\"https://www.jianshu.com/p/2a890d952461\">登录授权、TCP/IP、HTTPS 和代理</a><br>\n<a href=\"https://blog.csdn.net/kimlllll/article/details/103041225\">编码、加密、Hash、TCP/IP、HTTPS</a><br>\n<a href=\"https://github.com/hsicen/HencoderPlus/blob/master/note/04-TCPIP%E5%92%8CHTTPS.md\">HencoderPlus/04-TCPIP 和 HTTPS</a></p>\n",
            "tags": [
                "课程学习"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/15jfHwStpctgCeeA/",
            "url": "https://onion99.github.io/2021/10/31/15jfHwStpctgCeeA/",
            "title": "源码学习-Glide",
            "date_published": "2021-10-31T13:29:17.000Z",
            "content_html": "<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Glide</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>myUrl<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span>imageView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\"></p>\n<h3 id=\"with\"><a class=\"markdownIt-Anchor\" href=\"#with\">#</a> with()</h3>\n<blockquote>\n<p>用 Method 初始化 glide 的一些必需的环境，然后调用 Requestmanagerretriver 的 <code>get()</code>  获取 requestManager。如果传入的对象是全局 Context，你就不需要处理生命周期；如果输入是具有生命周期的 View (包含 Frg 或 Act) 则将添加一个隐藏的 Fragment 来感知生命周期</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token function\">getRetriever</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"getretriever\"><a class=\"markdownIt-Anchor\" href=\"#getretriever\">#</a> getRetriever()</h4>\n<blockquote>\n<p>RequestManagerRetriever, 用于创建新的 RequestManager 或从 Activity 和 Fragment 中检索现有的</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NonNull</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">RequestManagerRetriever</span> <span class=\"token function\">getRetriever</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 由于其他原因，上下文可能为空（即用户传入空值），但实际上它只会由于 Fragment 生命周期的错误而发生。</span>\n  <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>\n      context<span class=\"token punctuation\">,</span><span class=\"token string\">\"You cannot start a load on a not yet attached View or a Fragment where getActivity() \"</span>\n          <span class=\"token operator\">+</span> <span class=\"token string\">\"returns null (which usually occurs when getActivity() is called before the Fragment \"</span>\n          <span class=\"token operator\">+</span> <span class=\"token string\">\"is attached or after the Fragment is destroyed).\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取 RequestManagerRetriever</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Glide</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestManagerRetriever</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"get\"><a class=\"markdownIt-Anchor\" href=\"#get\">#</a> get()</h4>\n<blockquote>\n<p>单例实现 Glide 的初始化</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 双重检查锁定在这里是安全的</span>\n<span class=\"token keyword\">public</span> static Glide <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NonNull</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glide <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 通过反射 GeneratedAppGlideModuleImpl 实例化 Glide</span>\n    GeneratedAppGlideModule annotationGeneratedModule <span class=\"token operator\">=</span>\n        <span class=\"token function\">getAnnotationGeneratedGlideModules</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">synchronized</span> <span class=\"token punctuation\">(</span>Glide<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>glide <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkAndInitializeGlide</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> annotationGeneratedModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> glide<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestmanagerretrieverget\"><a class=\"markdownIt-Anchor\" href=\"#requestmanagerretrieverget\">#</a> RequestManagerRetriever.get()</h4>\n<blockquote>\n<p>创建对应生命周期的 RequestManager</p>\n</blockquote>\n<ul>\n<li>首先判断是在子线程，则拿一个全 Context 然后在工厂模式创建下 RequestManager, 所以推荐不要在子线程执行此操作</li>\n<li>如为 FragmentActivity, 则通过 FragmentManager, 创建一个空 Fragment 放进当前 <code>Fragment</code>  或者 <code>Activity</code> , 这样就可以感知宿主的生命周期，然后在工厂模式创建下 RequestManager</li>\n<li>如为 Activity…</li>\n<li>如为 ContextWrapper…</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOnBackgroundThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">assertNotDestroyed</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    frameWaiter<span class=\"token punctuation\">.</span><span class=\"token function\">registerSelf</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span>FragmentManager</span> fm <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fragmentGet</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> fm<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*parentHint=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isActivityVisible</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// FragmentActivity Simple </span>\n<span class=\"token annotation punctuation\">@NonNull</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">FragmentActivity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOnBackgroundThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">assertNotDestroyed</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    frameWaiter<span class=\"token punctuation\">.</span><span class=\"token function\">registerSelf</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">FragmentManager</span> fm <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">supportFragmentGet</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> fm<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*parentHint=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">isActivityVisible</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 通过 supportFragment 感知创建</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">RequestManager</span> <span class=\"token function\">supportFragmentGet</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">FragmentManager</span> fm<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Fragment</span> parentHint<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">boolean</span> isParentVisible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">SupportRequestManagerFragment</span> current <span class=\"token operator\">=</span> <span class=\"token function\">getSupportRequestManagerFragment</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">,</span> parentHint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">RequestManager</span> requestManager <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestManager <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 工厂模式创建</span>\n    <span class=\"token class-name\">Glide</span> glide <span class=\"token operator\">=</span> <span class=\"token class-name\">Glide</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    requestManager <span class=\"token operator\">=</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>\n            glide<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">getGlideLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestManagerTreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 这是一个小技巧，我们将启动 RequestManager，而不是相应的 Lifecycle。启动 RequestManager 是安全的，但启动 Lifecycle 可能会引发内存泄漏</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isParentVisible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      requestManager<span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    current<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestManager</span><span class=\"token punctuation\">(</span>requestManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> requestManager<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"load\"><a class=\"markdownIt-Anchor\" href=\"#load\">#</a> load()</h3>\n<blockquote>\n<p>对全局变量赋值，构建 ReqeustBuilder</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Drawable Simple</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestBuilder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Drawable</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Drawable</span> drawable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">asDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>drawable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"into\"><a class=\"markdownIt-Anchor\" href=\"#into\">#</a> into()</h3>\n<p>设置资源到加载的 ImageView 中 ，取消任何现有的加载，并释放 Glide 之前可能加载到 ImageView 的任何资源，以便它们可以被重用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 设置资源配置到 TargetView</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ImageView</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertMainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ···\n    <span class=\"token keyword\">return</span> <span class=\"token function\">into</span><span class=\"token punctuation\">(</span>\n        glideContext<span class=\"token punctuation\">.</span><span class=\"token function\">buildImageViewTarget</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/*targetListener=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        requestOptions<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">mainThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 创建 TargetView</span>\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildImageViewTarget</span><span class=\"token punctuation\">(</span>\n      <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ImageView</span> imageView<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> transcodeClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> imageViewTargetFactory<span class=\"token punctuation\">.</span><span class=\"token function\">buildTarget</span><span class=\"token punctuation\">(</span>imageView<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 负责为指定的 android.view.View 子类生成正确类型的 Target 工厂</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageViewTargetFactory</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token annotation punctuation\">@NonNull</span>\n  <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildTarget</span><span class=\"token punctuation\">(</span>\n      <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ImageView</span> view<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BitmapImageViewTarget</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Drawable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewTarget</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DrawableImageViewTarget</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"Unhandled class: \"</span> <span class=\"token operator\">+</span> clazz <span class=\"token operator\">+</span> <span class=\"token string\">\", try .as*(Class).transcode(ResourceTranscoder)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"into-2\"><a class=\"markdownIt-Anchor\" href=\"#into-2\">#</a> into()</h4>\n<blockquote>\n<p>核心代码加载代码，看起来简单但实现起来复杂。<br>\n首先看看 buildRequest 如何初始化 request</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Y</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Y</span> <span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Y</span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> options<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isModelSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You must call #load() before calling #into()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 现在的请求</span>\n  <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token function\">buildRequest</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 之前的请求</span>\n  <span class=\"token class-name\">Request</span> previous <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 如果之前的请求完成，重新开始以重新传递结果，触发 RequestListeners 和 Targets。如果请求失败，将重新请求，</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">isEquivalentTo</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isSkipMemoryCacheWithCompletePreviousRequest</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果之前的请求已经在运行，我们可以让它继续运行而不中断</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Preconditions</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 使用先前的请求而不是新的请求来优化，例如跳过设置占位符、跟踪和取消跟踪目标以及获取在单个请求中完成的视图维度</span>\n      previous<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  requestManager<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  target<span class=\"token punctuation\">.</span><span class=\"token function\">setRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  requestManager<span class=\"token punctuation\">.</span><span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestbuilderbuildrequest\"><a class=\"markdownIt-Anchor\" href=\"#requestbuilderbuildrequest\">#</a> RequestBuilder.buildRequest()</h4>\n<blockquote>\n<p>根据存在的场景建立不同 Request</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*requestLock=*/</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span><span class=\"token comment\">/*parentCoordinator=*/</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestCoordinator</span> parentCoordinator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 如有必要首先构建 ErrorRequestCoordinator，以便我们可以更新 parentCoordinator。</span>\n  <span class=\"token class-name\">ErrorRequestCoordinator</span> errorRequestCoordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorBuilder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    errorRequestCoordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorRequestCoordinator</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    parentCoordinator <span class=\"token operator\">=</span> errorRequestCoordinator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">Request</span> mainRequest <span class=\"token operator\">=</span> <span class=\"token function\">buildThumbnailRequestRecursive</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorRequestCoordinator <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> mainRequest<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> errorOverrideWidth <span class=\"token operator\">=</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> errorOverrideHeight <span class=\"token operator\">=</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">isValidOverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    errorOverrideWidth <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    errorOverrideHeight <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">Request</span> errorRequest <span class=\"token operator\">=</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> errorRequestCoordinator<span class=\"token punctuation\">,</span> errorBuilder<span class=\"token punctuation\">.</span>transitionOptions<span class=\"token punctuation\">,</span> errorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> errorOverrideWidth<span class=\"token punctuation\">,</span> errorOverrideHeight<span class=\"token punctuation\">,</span> errorBuilder<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  errorRequestCoordinator<span class=\"token punctuation\">.</span><span class=\"token function\">setRequests</span><span class=\"token punctuation\">(</span>mainRequest<span class=\"token punctuation\">,</span> errorRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> errorRequestCoordinator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestbuilderbuildthumbnailrequestrecursive\"><a class=\"markdownIt-Anchor\" href=\"#requestbuilderbuildthumbnailrequestrecursive\">#</a> RequestBuilder.buildThumbnailRequestRecursive()</h4>\n<blockquote>\n<p>根据是否需要缩略图，生成各种不同的 Request</p>\n</blockquote>\n<p>这里经过一层又一层最终拿到一个 <code>SingleRequest</code> 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">buildThumbnailRequestRecursive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">RequestCoordinator</span> parentCoordinator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thumbnailBuilder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 递归案例：包含一个潜在的递归缩略图 Request Builder</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isThumbnailBuilt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"You cannot use a request as both the main request and a \"</span>\n              <span class=\"token operator\">+</span> <span class=\"token string\">\"thumbnail, consider using clone() on the request(s) passed to thumbnail()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> thumbTransitionOptions <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span>transitionOptions<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 默认情况下我们的将过渡用在缩略图，但避免覆盖可能已明确应用于缩略图请求的自定义选项。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thumbnailBuilder<span class=\"token punctuation\">.</span>isDefaultTransitionOptionsSet<span class=\"token punctuation\">)</span> thumbTransitionOptions <span class=\"token operator\">=</span> transitionOptions<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Priority</span> thumbPriority <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">isPrioritySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">getThumbnailPriority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> thumbOverrideWidth <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> thumbOverrideHeight <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">isValidOverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      thumbOverrideWidth <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      thumbOverrideHeight <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOverrideHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token class-name\">ThumbnailRequestCoordinator</span> coordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThumbnailRequestCoordinator</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> fullRequest <span class=\"token operator\">=</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    isThumbnailBuilt <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 递归生成缩略图请求</span>\n    <span class=\"token class-name\">Request</span> thumbRequest <span class=\"token operator\">=</span> thumbnailBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">buildRequestRecursive</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span>targetListener<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> thumbTransitionOptions<span class=\"token punctuation\">,</span> thumbPriority<span class=\"token punctuation\">,</span> thumbOverrideWidth<span class=\"token punctuation\">,</span> thumbOverrideHeight<span class=\"token punctuation\">,</span> thumbnailBuilder<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    isThumbnailBuilt <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">setRequests</span><span class=\"token punctuation\">(</span>fullRequest<span class=\"token punctuation\">,</span> thumbRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> coordinator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thumbSizeMultiplier <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 基本情况：缩略图 Multiplier 生成缩略图请求，但不能递归。</span>\n    <span class=\"token class-name\">ThumbnailRequestCoordinator</span> coordinator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThumbnailRequestCoordinator</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> fullRequest <span class=\"token operator\">=</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> thumbnailOptions <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sizeMultiplier</span><span class=\"token punctuation\">(</span>thumbSizeMultiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Request</span> thumbnailRequest <span class=\"token operator\">=</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> thumbnailOptions<span class=\"token punctuation\">,</span> coordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token function\">getThumbnailPriority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    coordinator<span class=\"token punctuation\">.</span><span class=\"token function\">setRequests</span><span class=\"token punctuation\">(</span>fullRequest<span class=\"token punctuation\">,</span> thumbnailRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> coordinator<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 基本情况：没有缩略图</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> parentCoordinator<span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Request</span> <span class=\"token function\">obtainRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestLock<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> targetListener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseRequestOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> requestOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestCoordinator</span> requestCoordinator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TransitionOptions</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">TranscodeType</span><span class=\"token punctuation\">></span></span> transitionOptions<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overrideHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingleRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtain</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> glideContext<span class=\"token punctuation\">,</span> requestLock<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">,</span> overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> targetListener<span class=\"token punctuation\">,</span> requestListeners<span class=\"token punctuation\">,</span> requestCoordinator<span class=\"token punctuation\">,</span> glideContext<span class=\"token punctuation\">.</span><span class=\"token function\">getEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transitionOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getTransitionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"requestmanagertrack\"><a class=\"markdownIt-Anchor\" href=\"#requestmanagertrack\">#</a> RequestManager.track()</h4>\n<p>这里 Glide 将判断请求是否需要显示，如果它需要现在显示则开始执行，否则 clear ( )，并将请求放入队列。这种设计更精巧，省电</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Target</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  targetTracker<span class=\"token punctuation\">.</span><span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  requestTracker<span class=\"token punctuation\">.</span><span class=\"token function\">runRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/** 开始跟踪给定的请求 */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runRequest</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  requests<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isPaused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 启动异步加载</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 防止从以前的请求加载任何位图，释放此请求持有的任何资源，显示当前占位符（如果提供），并将请求标记为已取消</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pendingRequests<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"singlerequestbegin\"><a class=\"markdownIt-Anchor\" href=\"#singlerequestbegin\">#</a> SingleRequest.begin()</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">assertNotCallingCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stateVerifier<span class=\"token punctuation\">.</span><span class=\"token function\">throwIfRecycled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>model <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        width <span class=\"token operator\">=</span> overrideWidth<span class=\"token punctuation\">;</span>\n        height <span class=\"token operator\">=</span> overrideHeight<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果用户设置可回调的 Drawables, 这里进行日志反馈</span>\n      <span class=\"token keyword\">int</span> logLevel <span class=\"token operator\">=</span> <span class=\"token function\">getFallbackDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>WARN <span class=\"token operator\">:</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">onLoadFailed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GlideException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received null model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> logLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot restart a running request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果我们在完成后重新启动 (通常是通过 notifyDataSetChanged 之类的方式，向相同的目标或视图启动相同的请求)，我们可以简单地使用上次检索到的资源和大小，而跳过获取一个新的大小，开始一个新的加载等 (这意味着希望重新启动加载的用户需要在开始新的加载之前显式地清除 view 或 Target，因为他们觉得视图大小已经改变。)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">onResourceReady</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span>MEMORY_CACHE<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 对于既未完成也未运行的请求，重新启动可以被视为新请求，并可以从头开始运行</span>\n    cookie <span class=\"token operator\">=</span> <span class=\"token class-name\">GlideTrace</span><span class=\"token punctuation\">.</span><span class=\"token function\">beginSectionAsync</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>WAITING_FOR_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果宽高已指定，则回调 onSizeReady , 否则再获取宽高</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">isValidDimensions</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">onSizeReady</span><span class=\"token punctuation\">(</span>overrideWidth<span class=\"token punctuation\">,</span> overrideHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      target<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>RUNNING <span class=\"token operator\">||</span> status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>WAITING_FOR_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">canNotifyStatusChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      target<span class=\"token punctuation\">.</span><span class=\"token function\">onLoadStarted</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPlaceholderDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>onLoadFailed : 图片或者资源为空，报错回调</li>\n<li>onResourceReady: 最终通过 <code>Engine.release( )</code> , 释放资源</li>\n<li>onSizeReady: View 大小已明确，执行 <code>Engine.load()</code>  加载资源</li>\n<li>getSize: 获取 View 大小</li>\n<li>onLoadStarted: 等待或运行中，占位图处理</li>\n</ul>\n<h4 id=\"singlerequestonsizeready\"><a class=\"markdownIt-Anchor\" href=\"#singlerequestonsizeready\">#</a> SingleRequest.onSizeReady( )</h4>\n<blockquote>\n<p>启动给定参数进行图片的加载，必须在主线程上调用</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSizeReady</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  stateVerifier<span class=\"token punctuation\">.</span><span class=\"token function\">throwIfRecycled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>requestLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>WAITING_FOR_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> sizeMultiplier <span class=\"token operator\">=</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getSizeMultiplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token function\">maybeApplySizeMultiplier</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> sizeMultiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">maybeApplySizeMultiplier</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">,</span> sizeMultiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    loadStatus <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>glideContext<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getDiskCacheStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getTransformations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">isTransformationRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">isScaleOnlyOrNoTransform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">isMemoryCacheable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getUseUnlimitedSourceGeneratorsPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getUseAnimationPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestOptions<span class=\"token punctuation\">.</span><span class=\"token function\">getOnlyRetrieveFromCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"engineload\"><a class=\"markdownIt-Anchor\" href=\"#engineload\">#</a> Engine.load( )</h4>\n<blockquote>\n<p>到这里想都不用想了，Engine 才是真正加载图片的 Class,<br>\nEngine 负责执行图片加载和管理活动资源和缓存资源。</p>\n</blockquote>\n<p>活动资源是指那些至少提供一个请求但未释放的资源。一旦资源的所有使用者都释放了该资源，该资源就会进入缓存。如果资源从缓存中返回给新的使用者，它将被重新添加到活动资源中。<br>\n如果从缓存中移除资源，它的资源将被回收和重用 (如果可能的话)，资源将被丢弃。没有严格要求消费者释放他们的资源，所以活跃的资源被弱持有。</p>\n<p>请求流程:</p>\n<ul>\n<li>检查当前使用的资源集，返回活动资源（如果存在），并将任何新的非活动资源移动到内存缓存中</li>\n<li>检查内存缓存并提供缓存资源（如果存在）</li>\n<li>检查当前的一组正在进行的加载并将 cb 添加到进行中的加载（如果存在）</li>\n<li>开始加载</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">LoadStatus</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlideContext</span> glideContext<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Key</span> signature<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> resourceClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> transcodeClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DiskCacheStrategy</span> diskCacheStrategy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformation</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transformations<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isTransformationRequired<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isMemoryCacheable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useAnimationPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceCallback</span> cb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> VERBOSE_IS_LOGGABLE <span class=\"token operator\">?</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">EngineKey</span> key <span class=\"token operator\">=</span> keyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">buildKey</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> transformations<span class=\"token punctuation\">,</span>resourceClass<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">EngineResource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> memoryResource<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    memoryResource <span class=\"token operator\">=</span> <span class=\"token function\">loadFromMemory</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> isMemoryCacheable<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 判断是否有缓存，有则直接加载</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memoryResource <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">waitForExistingOrStartNewJob</span><span class=\"token punctuation\">(</span>glideContext<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> resourceClass<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> diskCacheStrategy<span class=\"token punctuation\">,</span> transformations<span class=\"token punctuation\">,</span> isTransformationRequired<span class=\"token punctuation\">,</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> isMemoryCacheable<span class=\"token punctuation\">,</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> useAnimationPool<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 避免在保持 Engine 锁时回调，因为这样做会更容易死锁</span>\n  cb<span class=\"token punctuation\">.</span><span class=\"token function\">onResourceReady</span><span class=\"token punctuation\">(</span>memoryResource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span>MEMORY_CACHE<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"enginewaitforexistingorstartnewjob\"><a class=\"markdownIt-Anchor\" href=\"#enginewaitforexistingorstartnewjob\">#</a> Engine.waitForExistingOrStartNewJob( )</h4>\n<blockquote>\n<p>等待或者执行任务</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">LoadStatus</span> <span class=\"token function\">waitForExistingOrStartNewJob</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GlideContext</span> glideContext<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Key</span> signature<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> resourceClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> transcodeClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Priority</span> priority<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DiskCacheStrategy</span> diskCacheStrategy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transformation</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transformations<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isTransformationRequired<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Options</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isMemoryCacheable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> useAnimationPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceCallback</span> cb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Executor</span> callbackExecutor<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EngineKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">EngineJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> current <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    current<span class=\"token punctuation\">.</span><span class=\"token function\">addCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadStatus</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">EngineJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> engineJob <span class=\"token operator\">=</span> engineJobFactory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> isMemoryCacheable<span class=\"token punctuation\">,</span> useUnlimitedSourceExecutorPool<span class=\"token punctuation\">,</span> useAnimationPool<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">DecodeJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> decodeJob <span class=\"token operator\">=</span> decodeJobFactory<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>glideContext<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> resourceClass<span class=\"token punctuation\">,</span> transcodeClass<span class=\"token punctuation\">,</span> priority<span class=\"token punctuation\">,</span> diskCacheStrategy<span class=\"token punctuation\">,</span> transformations<span class=\"token punctuation\">,</span> isTransformationRequired<span class=\"token punctuation\">,</span> isScaleOnlyOrNoTransform<span class=\"token punctuation\">,</span> onlyRetrieveFromCache<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> engineJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  jobs<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> engineJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  engineJob<span class=\"token punctuation\">.</span><span class=\"token function\">addCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> callbackExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  engineJob<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>decodeJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>VERBOSE_IS_LOGGABLE<span class=\"token punctuation\">)</span>  <span class=\"token function\">logWithTimeAndKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Started new load\"</span><span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoadStatus</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> engineJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"decodejob\"><a class=\"markdownIt-Anchor\" href=\"#decodejob\">#</a> DecodeJob</h4>\n<blockquote>\n<p>负责从缓存数据或原始源中解码资源并应用转换和转码的类</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCancelled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">notifyFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">runWrapped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runWrapped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 为了判断运行原因，这里做了三个判断</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>runReason<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> INITIALIZE<span class=\"token operator\">:</span>\n      <span class=\"token comment\">// 获取当前解码数据的阶段</span>\n      stage <span class=\"token operator\">=</span> <span class=\"token function\">getNextStage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">.</span>INITIALIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 获取数据生成器</span>\n      currentGenerator <span class=\"token operator\">=</span> <span class=\"token function\">getNextGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runGenerators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SWITCH_TO_SOURCE_SERVICE<span class=\"token operator\">:</span>\n      <span class=\"token function\">runGenerators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> DECODE_DATA<span class=\"token operator\">:</span>\n      <span class=\"token function\">decodeFromRetrievedData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unrecognized run reason: \"</span> <span class=\"token operator\">+</span> runReason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"rungenerators\"><a class=\"markdownIt-Anchor\" href=\"#rungenerators\">#</a> runGenerators( )</h5>\n<p>currentGenerator 实现 DataFetcherGenerator 接口，这个接口主要用来生成一系列的 modelLoader 和 model</p>\n<p>目前 Glide 有三种类生成器</p>\n<ul>\n<li>ResourceCacheGenerator</li>\n<li>DataCacheGenerator</li>\n<li>SourceGenerator</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runGenerators</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  currentThread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  startFetchTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> isStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//startNext -> 尝试单个新的 DataFetcher，如果 DataFetcher 已启动则返回 true，否则返回 false</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isCancelled <span class=\"token operator\">&amp;&amp;</span> currentGenerator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>isStarted <span class=\"token operator\">=</span> currentGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">startNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stage <span class=\"token operator\">=</span> <span class=\"token function\">getNextStage</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentGenerator <span class=\"token operator\">=</span> <span class=\"token function\">getNextGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stage <span class=\"token operator\">==</span> <span class=\"token class-name\">Stage</span><span class=\"token punctuation\">.</span>SOURCE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">reschedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// We've run out of stages and generators, give up.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stage <span class=\"token operator\">==</span> <span class=\"token class-name\">Stage</span><span class=\"token punctuation\">.</span>FINISHED <span class=\"token operator\">||</span> isCancelled<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isStarted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">notifyFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">DataFetcherGenerator</span> <span class=\"token function\">getNextGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> RESOURCE_CACHE<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceCacheGenerator</span><span class=\"token punctuation\">(</span>decodeHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> DATA_CACHE<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheGenerator</span><span class=\"token punctuation\">(</span>decodeHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SOURCE<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceGenerator</span><span class=\"token punctuation\">(</span>decodeHelper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> FINISHED<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unrecognized stage: \"</span> <span class=\"token operator\">+</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"sourcegeneratorstartnext\"><a class=\"markdownIt-Anchor\" href=\"#sourcegeneratorstartnext\">#</a> SourceGenerator.startNext()</h6>\n<p>将首先判断，缓存如果它不是空的，调用 cacheData; 否则，获取 loadData，然后执行 startNextLoad ()</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataToCache <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Object</span> data <span class=\"token operator\">=</span> dataToCache<span class=\"token punctuation\">;</span>\n    dataToCache <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">boolean</span> isDataInCache <span class=\"token operator\">=</span> <span class=\"token function\">cacheData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 如果我们没有将数据写入缓存，cacheData 方法将尝试直接解码原始数据，而不是通过磁盘缓存。因为此时 cacheData 已经调用了我们的回调函数，所以除了返回，没有其他事情可做了</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDataInCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// 如果我们能够成功地将数据写入缓存，那么现在需要继续调用下面的 sourceCacheGenerator 来从缓存加载数据</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// IOException 意味着我们无法将数据写入缓存，或者在磁盘缓存写入失败后无法倒带数据。无论哪种情况，我们都可以继续尝试下面的下一个取回</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoggable</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to properly rewind or write data to cache\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sourceCacheGenerator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> sourceCacheGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">startNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  sourceCacheGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  loadData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span> started <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>started <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasNextModelLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    loadData <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>loadDataListIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadData <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">.</span><span class=\"token function\">getDiskCacheStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDataCacheable</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">||</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">hasLoadPath</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">getDataClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">startNextLoad</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> started<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"sourcegeneratorcachedata\"><a class=\"markdownIt-Anchor\" href=\"#sourcegeneratorcachedata\">#</a> SourceGenerator.cacheData</h6>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 如果我们能够缓存数据，应该尝试直接从缓存解码数据，如果我们不能缓存数据，应该尝试从源解码，则返回 false\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">cacheData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> dataToCache<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">boolean</span> isLoadingFromSourceData <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">DataRewinder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> rewinder <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getRewinder</span><span class=\"token punctuation\">(</span>dataToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> data <span class=\"token operator\">=</span> rewinder<span class=\"token punctuation\">.</span><span class=\"token function\">rewindAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> encoder <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DataCacheWriter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheWriter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DataCacheKey</span> newOriginalKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheKey</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">,</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DiskCache</span> diskCache <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">.</span><span class=\"token function\">getDiskCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    diskCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>newOriginalKey<span class=\"token punctuation\">,</span> writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diskCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>newOriginalKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      originalKey <span class=\"token operator\">=</span> newOriginalKey<span class=\"token punctuation\">;</span>\n      sourceCacheGenerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataCacheGenerator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> helper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 我们能够将数据写入缓存</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      isLoadingFromSourceData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      cb<span class=\"token punctuation\">.</span><span class=\"token function\">onDataFetcherReady</span><span class=\"token punctuation\">(</span>loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">,</span> rewinder<span class=\"token punctuation\">.</span><span class=\"token function\">rewindAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">,</span> loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loadData<span class=\"token punctuation\">.</span>sourceKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 写入数据到缓存失败的处理</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLoadingFromSourceData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      loadData<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"decodehelpergetsourceencoder\"><a class=\"markdownIt-Anchor\" href=\"#decodehelpergetsourceencoder\">#</a> DecodeHelper.getSourceEncoder()</h6>\n<p>DecodeHelper.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Registry<span class=\"token punctuation\">.</span>NoSourceEncoderAvailableException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> glideContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>Registry.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSourceEncoder</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">X</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSourceEncoderAvailableException</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token class-name\">Encoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> encoder <span class=\"token operator\">=</span> encoderRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">getEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>encoder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token keyword\">return</span> encoder<span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">&#125;</span>  \n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSourceEncoderAvailableException</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"register\"><a class=\"markdownIt-Anchor\" href=\"#register\">#</a> Register</h6>\n<blockquote>\n<p>每个数据类型对应一个编码器，Register 就是用来记录这些的</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">registry\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteBufferEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamEncoder</span><span class=\"token punctuation\">(</span>arrayPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Registry</span><span class=\"token punctuation\">.</span>BUCKET_BITMAP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> byteBufferBitmapDecoder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Registry</span><span class=\"token punctuation\">.</span>BUCKET_BITMAP<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> streamBitmapDecoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"decodefromretrieveddata\"><a class=\"markdownIt-Anchor\" href=\"#decodefromretrieveddata\">#</a> decodeFromRetrievedData()</h5>\n<blockquote>\n<p>处理返回的数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oU7rD.png\" alt=\"5oU7rD.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">decodeFromData</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">DataFetcher</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> fetcher<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Data</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">GlideException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LogTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">decodeFromFetcher</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLoggable</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span>VERBOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">logWithTimeAndKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoded result \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    fetcher<span class=\"token punctuation\">.</span><span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">decodeFromFetcher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Data</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">GlideException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">LoadPath</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> path <span class=\"token operator\">=</span> decodeHelper<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">runLoadPath</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"enginejob\"><a class=\"markdownIt-Anchor\" href=\"#enginejob\">#</a> EngineJob</h4>\n<blockquote>\n<p>通过添加和删除加载回调并在加载完成时通知回调来管理加载的类 (管理加载过程中的一些回调)</p>\n</blockquote>\n<p>GlideExecutor 是一个继承的 Executorservice 类，它显然是一个线程池。这里通过 decodeJob 来确定是否从缓存解析，如果是从缓存解析，调用 diskCacheExecutor，否则，调用 getActiveSourceExecutor</p>\n<ul>\n<li>willDecodeFromCache\n<ul>\n<li>如果此作业将尝试从磁盘缓存解码资源，则返回 true</li>\n<li>如果始终从源解码，则返回 false</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DecodeJob</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> decodeJob<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decodeJob <span class=\"token operator\">=</span> decodeJob<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">GlideExecutor</span> executor <span class=\"token operator\">=</span> decodeJob<span class=\"token punctuation\">.</span><span class=\"token function\">willDecodeFromCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> diskCacheExecutor <span class=\"token operator\">:</span> <span class=\"token function\">getActiveSourceExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 执行 decodeJob 线程任务</span>\n  executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>decodeJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/4SVquTFcR8Wyv4GV/",
            "url": "https://onion99.github.io/2021/10/31/4SVquTFcR8Wyv4GV/",
            "title": "源码学习-OkHttp",
            "date_published": "2021-10-31T13:28:18.000Z",
            "content_html": "<blockquote>\n<p>http 的连接本质上是个 socket，根据 http 协议，通过 socket 包装发送请求并获得返回结果</p>\n</blockquote>\n<p>网路连接库一开始的样子如下代码所示，其实只要符合 Http 协议的请求，就可以和网络进行交互，类似于 OkHttp 的网络请求库，帮助开发者方便和屏蔽了 Http 协议中类似于请求头，重连、合并、代理、返回结果解析等等 Http 协议细节的应用层实现。</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">val path <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.baidu.com/\"</span>\n        val host <span class=\"token operator\">=</span> <span class=\"token string\">\"www.baidu.com\"</span>\n        <span class=\"token keyword\">var</span> socket<span class=\"token operator\">:</span> <span class=\"token class-name\">Socket</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">var</span> streamWriter<span class=\"token operator\">:</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">var</span> bufferedWriter<span class=\"token operator\">:</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            socket <span class=\"token operator\">=</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n            streamWriter <span class=\"token operator\">=</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            bufferedWriter <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span>streamWriter<span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET $path HTTP/1.1\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host: www.baidu.com\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            bufferedWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            val myRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> d <span class=\"token operator\">=</span> it <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">toChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"整体流程\"><a class=\"markdownIt-Anchor\" href=\"#整体流程\">#</a> 整体流程</h2>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetExample</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 核网络管理者 - 核心类</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">OkHttpClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 请求搭建</span>\n    <span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n      阻塞式 execute -> 立即调用请求，并阻塞，直到响应可以处理或出现错误\n      为了避免资源泄漏，调用者应该关闭 Response，而 Response 又会关闭底层的 ResponseBody。 // 确保响应 (和底层响应体) 是关闭的\n      注意，传输层的成功 (接收 HTTP 响应代码、报头和正文) 不一定表示应用层的成功：响应可能仍然表示不满意的 HTTP 响应代码，如 404 或 500。\n     */</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Response</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">GetExample</span> example <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span> example<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://raw.github.com/square/okhttp/master/README.md\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hiy4O.png\" alt=\"5hiy4O.png\"></p>\n<h3 id=\"连接建立\"><a class=\"markdownIt-Anchor\" href=\"#连接建立\">#</a> 连接建立</h3>\n<p>Volley 等很多网络请求框架很多底层都是通过 HTTPURLConnection 来与服务端建立连接的，而 OkHttp 就比较优秀了。因为 HTTP 协议是建立在 TCP/IP 协议基础之上的，底层还是走的 Socket，所以 OkHttp 直接使用 Socket 来完成 HTTP 请求。</p>\n<h3 id=\"okhttpclient\"><a class=\"markdownIt-Anchor\" href=\"#okhttpclient\">#</a> OkHttpClient</h3>\n<p>官方推荐我们使用单例去创建 OkHttpClient，重用所有 HTTP 调用的时候，性能是最佳的， 这是因为每个客户端都拥有自己的连接池和线程池。 重用连接和线程可减少延迟并节省内存。 相反，为每个请求创建一个客户端会浪费空闲池上的资源</p>\n<h3 id=\"request\"><a class=\"markdownIt-Anchor\" href=\"#request\">#</a> Request</h3>\n<p>采用 Builder 的方式进行设计，主要包含了 url、method、headers、body 和 CacheControl 组成的各种配置项</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Dispatcher</span> dispatcher<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 分发器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Proxy</span> proxy<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 代理</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Protocol</span><span class=\"token punctuation\">></span></span> protocols<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 协议</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConnectionSpec</span><span class=\"token punctuation\">></span></span> connectionSpecs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传输层版本和连接协议</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">></span></span> interceptors<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拦截器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Interceptor</span><span class=\"token punctuation\">></span></span> networkInterceptors<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 网络拦截器</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ProxySelector</span> proxySelector<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代理选择</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CookieJar</span> cookieJar<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cookie</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Cache</span> cache<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">InternalCache</span> internalCache<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 内部缓存</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">SocketFactory</span> socketFactory<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//socket 工厂</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">SSLSocketFactory</span> sslSocketFactory<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 安全套接层 socket 工厂，用于 HTTPS</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CertificateChainCleaner</span> certificateChainCleaner<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 验证确认响应证书 适用 HTTPS 请求连接的主机名。</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">HostnameVerifier</span> hostnameVerifier<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//  主机名字确认</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">CertificatePinner</span> certificatePinner<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  证书链</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Authenticator</span> proxyAuthenticator<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 代理身份验证</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Authenticator</span> authenticator<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 本地身份验证</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ConnectionPool</span> connectionPool<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 连接池，复用连接</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">Dns</span> dns<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 域名</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> followSslRedirects<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 安全套接层重定向</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> followRedirects<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 本地重定向</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> retryOnConnectionFailure<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重试连接失败</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> connectTimeout<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 连接超时</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> readTimeout<span class=\"token punctuation\">;</span> <span class=\"token comment\">//read 超时</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> writeTimeout<span class=\"token punctuation\">;</span> <span class=\"token comment\">//write 超时 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"call\"><a class=\"markdownIt-Anchor\" href=\"#call\">#</a> Call</h3>\n<blockquote>\n<p>一个提供 HTTP 请求执行相关接口的接口类，具体的实现类是 RealCall</p>\n</blockquote>\n<ul>\n<li>可以取消</li>\n<li>此对象表示单个请求 / 响应对 (流), 因此不能执行两次</li>\n</ul>\n<h4 id=\"realcall\"><a class=\"markdownIt-Anchor\" href=\"#realcall\">#</a> RealCall</h4>\n<blockquote>\n<p>OkHttp 的应用层和网络层之间的桥梁，包含了网络的连接、请求、响应和流处理整个流程，也是 OkHttp 中最关键核心的类</p>\n</blockquote>\n<h5 id=\"asynctimeout\"><a class=\"markdownIt-Anchor\" href=\"#asynctimeout\">#</a> AsyncTimeout</h5>\n<p>此超时用在在后台线程执行超时时执行操作。 使用它来实现本地不支持的超时，例如写入时被阻止的套接字，子类应该覆盖 timedOut 以在发生超时时采取行动。 此方法将由共享看门狗线程调用，因此不应执行任何长时间运行的操作。 否则，我们可能会面临触发其他超时的风险。<br>\n使用 sink 和 source 将此超时应用于流。 返回的值将超时应用于包装流上的每个操作。<br>\n调用者应该在执行可能超时的工作之前调用 enter ，然后退出。 exit 的返回值表示是否触发了超时。 请注意，对 timedOut 的调用是异步的，可以在 exit 之后调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> val timeout <span class=\"token operator\">=</span> object <span class=\"token operator\">:</span> <span class=\"token class-name\">AsyncTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  override fun <span class=\"token function\">timedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token comment\">// 取消请求  </span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>apply <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>callTimeoutMillis<span class=\"token punctuation\">.</span><span class=\"token function\">toLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MILLISECONDS<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"execute\"><a class=\"markdownIt-Anchor\" href=\"#execute\">#</a> execute</h5>\n<blockquote>\n<p>同步请求，马上执行并阻塞直到可以处理响应或出现错误</p>\n</blockquote>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * Atomic 就是原子性的意思，源码里用了 Volatile 属性，即能够保证在高并发的情况下只有一个线程能够访问这个属性值\n   * executed 是一个原子变量，一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求，用 compareAndSet (false, true)\n   * 判断多线程状态下，请求是否重新执行：如果值为 false，则抛出一个 IllegalStateException，并返回调用 lazyMessage 的结果。\n   */</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Already Executed\"</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 超时计数开始</span>\n  timeout<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 执行请求前处理 -> 栈跟踪，事件回调等等</span>\n  <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调度器开始执行</span>\n    client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">executed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 返回拦截器处理下的响应</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 调度器返回完成信号</span>\n    client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"enqueue\"><a class=\"markdownIt-Anchor\" href=\"#enqueue\">#</a> enqueue</h5>\n<blockquote>\n<p>异步调度，将请求放到队列中等到执行</p>\n</blockquote>\n<p>RealCall.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>responseCallback<span class=\"token operator\">:</span> Callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  <span class=\"token comment\">// 首先判断当前请求是否已执行，如果已经执行则打印日志，并抛出 IllegalStateException 异常</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>executed<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Already Executed\"</span> <span class=\"token punctuation\">&#125;</span>  \n  <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token comment\">// 创建一个 AsyncCall 对象，放进分发器队列中</span>\n  client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token function\">AsyncCall</span><span class=\"token punctuation\">(</span>responseCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 返回一个对象，该对象包含在执行此方法时创建的堆栈跟踪</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callStackTrace <span class=\"token operator\">=</span> Platform<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStackTraceForCloseable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response.body().close()\"</span><span class=\"token punctuation\">)</span>\n    eventListener<span class=\"token punctuation\">.</span><span class=\"token function\">callStart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Dispatcher.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">///////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token comment\">// https://zhuanlan.zhihu.com/p/261397170</span>\n<span class=\"token comment\">// ArrayDeque -  Java 集合中双端队列的数组实现</span>\n<span class=\"token comment\">// ArrayDeque 几乎没有容量限制，设计为线程不安全的，禁止 null 元素</span>\n<span class=\"token comment\">// ArrayDeque 是 Deque 的实现类，可以作为栈来使用，效率高于 Stack；也可以作为队列来使用，效率高于 LinkedList。</span>\n<span class=\"token comment\">// ArrayDeque 大多数的额操作都在固定时间内运行，例外情况包括 remove，removeFirstOccurrence，removeLastOccurrence，contains，iterator.remove ()，和批量操作，这些将以线性时间运行</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> runningSyncCalls <span class=\"token operator\">=</span> ArrayDeque<span class=\"token operator\">&lt;</span>RealCall<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> AsyncCall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 将请求 AsyncCall 添加到待执行队列</span>\n    readyAsyncCalls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 判断当前请求是否已存在可复用的 hos</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>call<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span>forWebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">val</span> existingCall <span class=\"token operator\">=</span> <span class=\"token function\">findExistingCallWithHost</span><span class=\"token punctuation\">(</span>call<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingCall <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">reuseCallsPerHostFrom</span><span class=\"token punctuation\">(</span>existingCall<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 将符合条件的 Call 从 readyAsyncCalls 提升到 runningAsyncCalls 并在执行它们</span>\n  <span class=\"token function\">promoteAndExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RealCall.AsyncCall</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">  <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 给当前 AsyncCall 异步线程设置名称</span>\n    <span class=\"token function\">threadName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OkHttp <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span><span class=\"token function\">redactedUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> signalledCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      timeout<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取请求结果</span>\n        <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        signalledCallback <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token comment\">// 触发相应回调</span>\n        responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signalledCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// Do not signal the callback twice!</span>\n          Platform<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callback failure for <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span><span class=\"token function\">toLoggableString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">,</span> Platform<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>signalledCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">val</span> canceledException <span class=\"token operator\">=</span> <span class=\"token function\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canceled due to <span class=\"token interpolation variable\">$t</span>\"</span><span class=\"token punctuation\">)</span>\n          canceledException<span class=\"token punctuation\">.</span><span class=\"token function\">addSuppressed</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n          responseCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@RealCall</span><span class=\"token punctuation\">,</span> canceledException<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">throw</span> t\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 关闭请求</span>\n        client<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"dispatcher分发器\"><a class=\"markdownIt-Anchor\" href=\"#dispatcher分发器\">#</a> Dispatcher (分发器)</h3>\n<blockquote>\n<p>用于管理其对应 OkHttpClient 的所有请求，对 Call 进行统一的控制，例如结束所有请求、获取线程池等等</p>\n</blockquote>\n<ul>\n<li>readyAsyncCalls：一个新的异步请求首先会被加入该队列中</li>\n<li>runningAsyncCalls：当前正在运行中的异步请求</li>\n<li>runningSyncCalls：当前正在运行的同步请求</li>\n</ul>\n<p>异步请求跟同步请求一样，最终都会调用到 <code>getResponseWithInterceptorChain()</code></p>\n<h3 id=\"interceptor拦截器\"><a class=\"markdownIt-Anchor\" href=\"#interceptor拦截器\">#</a> Interceptor (拦截器)</h3>\n<blockquote>\n<p>Interceptor 接口作为一个拦截器的抽象概念，被设计为责任链上的单位节点，用于观察、拦截、处理请求等，例如添加 Header、重定向、数据处理等等。<br>\nInterceptor 之间互相独立，每个 Interceptor 只负责自己关注的任务，不与其他 Interceptor 接触。</p>\n</blockquote>\n<p>RealCall.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Throws</span><span class=\"token punctuation\">(</span>IOException<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getResponseWithInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// TODO: 2021/8/13 okhttp 的核心是拦截器，而拦截器所采用的设计模式是责任链设计，即每个拦截器只处理与自己相关的业务逻辑 https://zhuanlan.zhihu.com/p/340090732</span>\n  <span class=\"token comment\">// 构建整个网络请求拦截</span>\n  <span class=\"token keyword\">val</span> interceptors <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Interceptor<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加 Client 的拦截器</span>\n  interceptors <span class=\"token operator\">+=</span> client<span class=\"token punctuation\">.</span>interceptors\n  <span class=\"token comment\">// 添加失败重连的拦截器</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">RetryAndFollowUpInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加请求桥梁拦截器 - 在对用户的请求头部加了一些信息，然后在获取到的响应中也做了一些处理。而这些处理对用户是透明的，减少了客户请求的工作</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">BridgeInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>cookieJar<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加缓存拦截器 - 理来自缓存的请求并将响应写入缓存。</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">CacheInterceptor</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加请求中拦截器 - 打开与目标服务器的连接并继续下一个拦截器。 网络可能用于返回的响应，或使用条件 GET 验证缓存的响应</span>\n  interceptors <span class=\"token operator\">+=</span> ConnectInterceptor\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>forWebSocket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    interceptors <span class=\"token operator\">+=</span> client<span class=\"token punctuation\">.</span>networkInterceptors\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 这是链中的最后一个拦截器。 它对服务器进行网络调用，真正的网络请求从这里开始</span>\n  interceptors <span class=\"token operator\">+=</span> <span class=\"token function\">CallServerInterceptor</span><span class=\"token punctuation\">(</span>forWebSocket<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 构建网络请求链 - 一个具体的拦截器链，承载着整个拦截器链：所有应用程序拦截器、OkHttp 核心、所有网络拦截器，最后是网络调用者。</span>\n  <span class=\"token keyword\">val</span> chain <span class=\"token operator\">=</span> <span class=\"token function\">RealInterceptorChain</span><span class=\"token punctuation\">(</span>\n      call <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n      interceptors <span class=\"token operator\">=</span> interceptors<span class=\"token punctuation\">,</span>\n      index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      exchange <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      request <span class=\"token operator\">=</span> originalRequest<span class=\"token punctuation\">,</span>\n      connectTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>connectTimeoutMillis<span class=\"token punctuation\">,</span>\n      readTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>readTimeoutMillis<span class=\"token punctuation\">,</span>\n      writeTimeoutMillis <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>writeTimeoutMillis\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> calledNoMoreExchanges <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>originalRequest<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 是否取消请求</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isCanceled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">closeQuietly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Canceled\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> response\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    calledNoMoreExchanges <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">noMoreExchanges</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Throwable\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>calledNoMoreExchanges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">noMoreExchanges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RealInterceptorChain.kt</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Throws</span><span class=\"token punctuation\">(</span>IOException<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 判断拦截器是否为空</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> interceptors<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 请求数加 1</span>\n  calls<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exchange <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span>finder<span class=\"token punctuation\">.</span><span class=\"token function\">sameHostAndPort</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>interceptors<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">&#125;</span></span> must retain the same host and port\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>calls <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>interceptors<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">&#125;</span></span> must call proceed() exactly once\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// Call the next interceptor in the chain. 调用链中的下一个拦截器</span>\n  <span class=\"token keyword\">val</span> next <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> request <span class=\"token operator\">=</span> request<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 获取当前的拦截器</span>\n  <span class=\"token keyword\">val</span> interceptor <span class=\"token operator\">=</span> interceptors<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 开始一个个的执行每一个拦截器，每个拦截器的 intercept 都会调到 当前类的 proceed ，直至最后一个 CallServerInterceptor 执行完</span>\n  <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USELESS_ELVIS\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"interceptor <span class=\"token interpolation variable\">$interceptor</span> returned null\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exchange <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> interceptors<span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> next<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"network interceptor <span class=\"token interpolation variable\">$interceptor</span> must call proceed() exactly once\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"interceptor <span class=\"token interpolation variable\">$interceptor</span> returned a response with no body\"</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"chain\"><a class=\"markdownIt-Anchor\" href=\"#chain\">#</a> Chain</h4>\n<blockquote>\n<p>Interceptor 与 Chain 彼此互相依赖，互相调用，共同发展，形成了一个完美的调用链</p>\n</blockquote>\n<p>Chain 被用来描述责任链，通过其中的 process 方法开始依次执行链上的每个节点，并返回处理后的 Response。<br>\nChain 的唯一实现为 RealInterceptorChain（下文简称 RIC），RIC 可以称之为<strong>拦截器责任链</strong>，其中的节点由 RealCall 中添加进来的 Interceptor 们组成。由于 Interceptor 的互相独立性，RIC 中还会包含一些公共参数及共享的对象。</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hbpJx.png\" alt=\"5hbpJx.png\"></p>\n<h3 id=\"about\"><a class=\"markdownIt-Anchor\" href=\"#about\">#</a> About</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/116777864\">OkHttp 源码深度解析</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/104813091\"> OkHttp 源码解析</a><br>\n<a href=\"https://juejin.cn/post/7020027832977850381\"> OkHttp 源码原理</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/5FIszA6Ut2OHE8Sg/",
            "url": "https://onion99.github.io/2021/10/31/5FIszA6Ut2OHE8Sg/",
            "title": "安卓优化-布局优化",
            "date_published": "2021-10-31T12:50:14.000Z",
            "content_html": "<h3 id=\"布局耗时统计\"><a class=\"markdownIt-Anchor\" href=\"#布局耗时统计\">#</a> 布局耗时统计</h3>\n<ul>\n<li>手动埋点</li>\n<li>AOP/ArtHook\n<ul>\n<li>切入 Activity 的 setContentView</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"布局加载优化\"><a class=\"markdownIt-Anchor\" href=\"#布局加载优化\">#</a> 布局加载优化</h3>\n<ul>\n<li>代码写布局\n<ul>\n<li>Java 代码写布局</li>\n<li>Anko</li>\n<li>JetpackCompose</li>\n</ul>\n</li>\n<li>X2C</li>\n<li>Litho</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"视图绘制优化\"><a class=\"markdownIt-Anchor\" href=\"#视图绘制优化\">#</a> 视图绘制优化</h3>\n<ul>\n<li>优化布局层级以及嵌套\n<ul>\n<li>使用 ConstraintLayout</li>\n</ul>\n</li>\n<li>避免过度绘制，自定义 View 避免多次调用 onDraw,onMeasure</li>\n<li>其他\n<ul>\n<li>ViewStub: 延迟初始化</li>\n<li>onDraw,onMeasure 中避免创建大对象，耗时操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"include\"><a class=\"markdownIt-Anchor\" href=\"#include\">#</a> Include</h4>\n<blockquote>\n<p>提高布局复用性</p>\n</blockquote>\n<p>login.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40dp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@layout/titlebar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>include 所在的 layout 的布局有给其设置 id, 而 include 标签里面又给自己的根容器设置 id, 最好两个 id 都相同，否则 findview 时拿到空对象</p>\n<h4 id=\"merge\"><a class=\"markdownIt-Anchor\" href=\"#merge\">#</a> Merge</h4>\n<blockquote>\n<p>帮助 include 标签排除多余的一层 ViewGroup 容器，减少 view hierarchy 的结构，提升 UI 渲染的性能</p>\n</blockquote>\n<p>titlebar.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>merge</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20dp<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginRight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20dp<span class=\"token punctuation\">\"</span></span>  \n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>标题<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>merge</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>因为 merge 标签并不是 View, 所以在通过 LayoutInflate.inflate () 方法渲染的时候，第二个参数必须指定一个父容器 (parent), 且第三个参数 (attachToRoot) 必须为 true</li>\n<li>merge 标签必须使用在根布局，并且 ViewStub 标签中的 layout 布局不能使用 merge 标签</li>\n</ul>\n<h4 id=\"viewstub\"><a class=\"markdownIt-Anchor\" href=\"#viewstub\">#</a> ViewStub</h4>\n<blockquote>\n<p>延迟绘制 View</p>\n</blockquote>\n<p>layout.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ViewStub</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/viewstub<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@layout/info<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>activity.java</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ViewStub</span> stub <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewStub</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>viewstub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stub<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">View</span> stubView <span class=\"token operator\">=</span> stub<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">EditText</span> editText <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EditText</span><span class=\"token punctuation\">)</span> stubView<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>edit_password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>ViewStub 标签不支持 merge 标签</li>\n<li>ViewStub 的 inflate 只能被调用一次，第二次调用会抛出异常</li>\n<li>虽然 ViewStub 是不占用任何空间的，但是每个布局都必须要指定 layout_width 和 layout_height 属性，否则运行就会报错</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/6JN9JxpnRSjVeWry/",
            "url": "https://onion99.github.io/2021/10/31/6JN9JxpnRSjVeWry/",
            "title": "安卓优化-线程优化",
            "date_published": "2021-10-31T12:48:51.000Z",
            "content_html": "<h3 id=\"线程调度\"><a class=\"markdownIt-Anchor\" href=\"#线程调度\">#</a> 线程调度</h3>\n<blockquote>\n<p>任意时刻，只有一个线程占用 CPU，处于运行状态</p>\n</blockquote>\n<p>多线程并发：轮流获取 cpu 使用权<br>\n JVM 负责线程调度：按照特定调度模型分配 CPU 使用权</p>\n<h4 id=\"调度模型\"><a class=\"markdownIt-Anchor\" href=\"#调度模型\">#</a> 调度模型</h4>\n<ul>\n<li>分时调度模型：轮流获取，均匀分配 cpu 时间</li>\n<li>抢占式调度模型：按照优先级来</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"android异步方式\"><a class=\"markdownIt-Anchor\" href=\"#android异步方式\">#</a> Android 异步方式</h3>\n<ul>\n<li>Thread\n<ul>\n<li>最简单、常见的方式</li>\n<li>不易复用，频繁创建销毁开销大</li>\n</ul>\n</li>\n<li>HandlerThread\n<ul>\n<li>自带消息循环的线程</li>\n<li>串行执行，长时间运行，不断从队列中获取任务</li>\n</ul>\n</li>\n<li>IntentService\n<ul>\n<li>继承自 Service 在内部创建 HandlerThread</li>\n<li>异步、不占用主线程</li>\n<li>优先级高，不易被系统 kil</li>\n</ul>\n</li>\n<li>AsyncTask\n<ul>\n<li>Android 提供的工具类</li>\n<li>无需自己处理线程切换</li>\n</ul>\n</li>\n<li>线程池\n<ul>\n<li>jdk 提供的线程池</li>\n<li>易复用，减少频繁创建、销毁的时间</li>\n<li>功能强大：定时、任务列队、并发数控制等</li>\n</ul>\n</li>\n<li>RxJava\n<ul>\n<li>由强大的 Scheduler 集合提供</li>\n<li>不同类型的区分：IO 密集型、CPU 密集型</li>\n</ul>\n</li>\n<li>协程</li>\n</ul>\n<h3 id=\"线程使用准则\"><a class=\"markdownIt-Anchor\" href=\"#线程使用准则\">#</a> 线程使用准则</h3>\n<p>1、严禁使用 new Thread, 因为这样不便控制，可能产生预期之外的事情<br>\n 2、提供基础线程池供各个业务栈使用（避免各个业务栈各自维护一套线程池，导致线程数过多）<br>\n3、根据任务类型选择合适的异步方式（优先级低长时间执行 - HandlerThread，定时执行 - 线程池）<br>\n4、创建线程必须命名（方便定位线程归属，运行期 Thread.currentThread ().setName 修改名字）<br>\n5、关键异步任务监控（异步不等于不耗时，AOP 的方式来做监控）<br>\n6、重视优先级的设置（Process.setThreadPriority (), 可以设置多次）</p>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/9LsQhIFgDkllFt0Q/",
            "url": "https://onion99.github.io/2021/10/31/9LsQhIFgDkllFt0Q/",
            "title": "安卓优化-包体积",
            "date_published": "2021-10-31T12:48:08.000Z",
            "content_html": "<p><a href=\"https://cloud.tencent.com/developer/article/1425318\">Android APP 终极瘦身指南</a></p>\n<ul>\n<li>图片转 WebP</li>\n<li>去掉不必要的 so 库</li>\n<li>开启 shrinkResources 去除无用资源</li>\n<li>开启 minifyEnabled 混淆代码</li>\n<li>删除无用的语言资源</li>\n<li>使用微信资源压缩打包工具</li>\n<li>避免重复库，以及避免不同版本的库</li>\n<li>AndroidManifest 中 -&gt; android:extractNativeLibs=“true”</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/UYa5EEntsM9sKTYz/",
            "url": "https://onion99.github.io/2021/10/31/UYa5EEntsM9sKTYz/",
            "title": "安卓优化-卡顿优化",
            "date_published": "2021-10-31T12:47:12.000Z",
            "content_html": "<blockquote>\n<p>卡顿产生的根本原因就是 CPU 和 GPU 没有及时处理好数据，针对卡顿的优化就有思路了：尽可能减少 CPU 和 GPU 资源的消耗</p>\n</blockquote>\n<ul>\n<li>CPU：中央处理器（CPU，central processing unit）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</li>\n<li>GPU：图形处理器（英语：Graphics Processing Unit，缩写：GPU），又称显示核心，做图像和图形相关运算工作的微处理器</li>\n</ul>\n<h3 id=\"卡顿检测\"><a class=\"markdownIt-Anchor\" href=\"#卡顿检测\">#</a> 卡顿检测</h3>\n<p><a href=\"https://blog.csdn.net/lmj623565791/article/details/58626355\">Android UI 性能优化 检测应用中的 UI 卡顿</a></p>\n<p><a href=\"https://www.jianshu.com/p/9e8f88eac490\">Android 性能优化 - 检测 App 卡顿 - 简书 (jianshu.com)</a></p>\n<span id=\"more\"></span>\n<h4 id=\"用ui线程looper打印的日志\"><a class=\"markdownIt-Anchor\" href=\"#用ui线程looper打印的日志\">#</a> 用 UI 线程 Looper 打印的日志</h4>\n<p>开源工具:<br>\n<a href=\"https://github.com/Kyson/AndroidGodEye\">Kyson/AndroidGodEye: An app performance monitor(APM) , like “Android Studio profiler”, you can easily monitor the performance of your app real time in browser (github.com)</a></p>\n<p><a href=\"https://github.com/markzhai/AndroidPerformanceMonitor\">markzhai/AndroidPerformanceMonitor: A transparent ui-block detection library for Android. (known as BlockCanary) </a></p>\n<p><a href=\"https://github.com/BzCoder/BlockCanaryCompat\">BzCoder/BlockCanaryCompat: 卡顿监控，BlockCanary 适配 Android O 以上系统 (github.com)</a></p>\n<h4 id=\"choreographer\"><a class=\"markdownIt-Anchor\" href=\"#choreographer\">#</a> Choreographer</h4>\n<p>Android 系统每隔 16ms 发出 VSYNC 信号，触发对 UI 进行渲染。开发者可以使用 Choreographer#postFrameCallback 设置自己的 callback 与 Choreographer 交互，你设置的 FrameCallCack（doFrame 方法）会在下一个 frame 被渲染时触发。理论上来说两次回调的时间周期应该在 16ms，如果超过了 16ms 我们则认为发生了卡顿，我们主要就是利用两次回调间的时间周期来判断</p>\n<p>开源工具:<br>\n<a href=\"https://github.com/wasabeef/Takt\">wasabeef/Takt: Takt is Android library for measuring the FPS using Choreographer</a></p>\n<p><a href=\"https://github.com/friendlyrobotnyc/TinyDancer\">friendlyrobotnyc/TinyDancer: An android library for displaying fps from the choreographer and percentage of time with two or more frames dropped </a></p>\n<h3 id=\"anr分析\"><a class=\"markdownIt-Anchor\" href=\"#anr分析\">#</a> ANR 分析</h3>\n<blockquote>\n<p>Application Not Responding，也就是应用程序无响应</p>\n</blockquote>\n<h4 id=\"产生原因\"><a class=\"markdownIt-Anchor\" href=\"#产生原因\">#</a> 产生原因</h4>\n<ul>\n<li>InputDispatching Timeout：5 秒内无法响应屏幕触摸事件或键盘输入事件</li>\n<li>BroadcastQueue Timeout ：在执行前台广播（BroadcastReceiver）的 <code>onReceive()</code>  函数时 10 秒没有处理完成，后台为 60 秒</li>\n<li>Service Timeout：前台服务 20 秒内，后台服务在 200 秒内没有执行完毕</li>\n<li>ContentProvider Timeout：ContentProvider 的 publish 在 10s 内没进行完</li>\n<li>其他\n<ul>\n<li>主线程阻塞或主线程数据读取</li>\n<li>CPU 满负荷，I/O 阻塞</li>\n<li>内存不足</li>\n</ul>\n</li>\n</ul>\n<p>分析:</p>\n<ul>\n<li>log 上的 anr reason</li>\n<li>adb 导出 ANR 日志\n<ul>\n<li><code>adb pull /data/anr/traces.txt</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/T8ghe13OAeLx6NBP/",
            "url": "https://onion99.github.io/2021/10/31/T8ghe13OAeLx6NBP/",
            "title": "安卓优化-内存优化",
            "date_published": "2021-10-31T12:46:21.000Z",
            "content_html": "<h3 id=\"内存信息查看\"><a class=\"markdownIt-Anchor\" href=\"#内存信息查看\">#</a> 内存信息查看</h3>\n<p><a href=\"https://www.jianshu.com/p/28b9cd87e667\">App 内存优化实践：一步一步做内存分析与优化</a></p>\n<p>查看每个 App 进程可以分配到的最大内存</p>\n<pre class=\"line-numbers language-undefined\" data-language=\"undefined\"><code class=\"language-undefined\">adb shell getprop | grep dalvik.vm.heapsize<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>App 的内存使用情况概览</p>\n<pre class=\"line-numbers language-undefined\" data-language=\"undefined\"><code class=\"language-undefined\">adb shell dumpsys meminfo 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"优化工具\"><a class=\"markdownIt-Anchor\" href=\"#优化工具\">#</a> 优化工具</h3>\n<ul>\n<li>CPU Profiler</li>\n<li>Memory Analyzer（MAT）</li>\n<li>LeakCannary</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"优化方向\"><a class=\"markdownIt-Anchor\" href=\"#优化方向\">#</a> 优化方向</h3>\n<p><a href=\"https://www.cnblogs.com/wangjie1990/p/11327112.html\">Android 如何优化 APP 内存 </a></p>\n<ul>\n<li>谨慎使用 Services\n<ul>\n<li>启动一个 Service 时， 系统需要始终保持运行该 Service 的进程，该 Service 占用的 RAM 对其他进程不共享</li>\n<li>避免使用持久性服务，如 <code>JobScheduler</code>  之类</li>\n</ul>\n</li>\n<li>使用经过优化的多数据容器\n<ul>\n<li>如 SparseArray，SparseBooleanArray 和 LongSparseArray</li>\n<li>如有必要，您可以随时切换到原始数组以获得精简的数据结构</li>\n</ul>\n</li>\n<li>使用 nano protobufs 进行序列化数据</li>\n<li>避免内存泄漏\n<ul>\n<li>内存泄露会导致大量的垃圾收集事件发生，从而导致系统执行其他内容 (如渲染或者传输) 的时间变少</li>\n</ul>\n</li>\n<li>移除内存密集型资源，以及 lib 库\n<ul>\n<li>减小 APK 的大小</li>\n<li>请使用不进行反射扫描的依赖注入库 (Dagger2), 频繁的反射需要更多的 CPU 和内存消耗</li>\n<li>谨慎使用外部库，外部库可能对同一个功能有不一样的实现，这可能导致预期之外的事情</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/10/31/4LlbPfdOOCp58LMK/",
            "url": "https://onion99.github.io/2021/10/31/4LlbPfdOOCp58LMK/",
            "title": "安卓优化-启动优化",
            "date_published": "2021-10-31T12:43:04.000Z",
            "content_html": "<h3 id=\"启动流程\"><a class=\"markdownIt-Anchor\" href=\"#启动流程\">#</a> 启动流程</h3>\n<h4 id=\"相关\"><a class=\"markdownIt-Anchor\" href=\"#相关\">#</a> 相关</h4>\n<blockquote>\n<p>启动的流程就是通过这六个大类在这三个进程之间不断通信的过程</p>\n</blockquote>\n<h5 id=\"三个进程\"><a class=\"markdownIt-Anchor\" href=\"#三个进程\">#</a> 三个进程</h5>\n<ul>\n<li>Launcher 进程：整个 App 启动流程的起点，负责处理桌面与用户之间的交互事件，可以想象为一个桌面启动器</li>\n<li>SystemServer 进程: Android 中的所有 SystemServer 都由其孵化 (Fork) 出来，例如 AMS,WindowsMannager,PackageManagerService 等</li>\n<li>App 进程：启动的 App 所在的进程</li>\n</ul>\n<span id=\"more\"></span>\n<h5 id=\"六个大类\"><a class=\"markdownIt-Anchor\" href=\"#六个大类\">#</a> 六个大类</h5>\n<ul>\n<li>ActivityManagerService:  即 AMS, 负责管理系统中四大组件的启动，切换，调度以及应用进程的管理</li>\n<li>Instrumentation: 监控应用程序和系统的交互</li>\n<li>ActivityThread: 应用的入口类，通过调用 main 方法，开启消息循环队列。ActivityThread 所在的线程被称为主线程</li>\n<li>ApplicationThread: 提供 Binder 通讯接口，AMS 则通过代理调用此 App 进程的本地方法</li>\n<li>ActivityManagerProxy：AMS 服务在当前进程的代理类，负责与 AMS 通信</li>\n<li>ApplicationThreadProxy：ApplicationThread 在 AMS 服务中的代理类，负责与 ApplicationThread 通信</li>\n</ul>\n<h4 id=\"顺序\"><a class=\"markdownIt-Anchor\" href=\"#顺序\">#</a> 顺序</h4>\n<p><a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\">APP 启动流程解析，墙裂推荐</a><br>\n<a href=\"https://www.cnblogs.com/not2/p/14326090.html\"> App 启动速度优化 T2</a><br>\n<a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\"> 具体代码流程</a></p>\n<ol>\n<li>Launcher 通知 AMS, 要启动某一应用，并说明对应的 LauncherActivity</li>\n<li>AMS 表示收到，等待 Launcher 进入 Pause 状态</li>\n<li>Launcher 进入 Pause 状态，通知 AMS 可以启动某一应用了</li>\n<li>AMS 开始检查某一应用是否启动\n<ul>\n<li>是，则直接启动，流程终止</li>\n<li>否，AMS 则在的进程中创建 ActivityThread 对象，并启动 main 函数</li>\n</ul>\n</li>\n<li>某一应用通知 AMS 启动准备就绪</li>\n<li>AMS 通知某一应用要启动的页面，某一应用启动对应页面</li>\n</ol>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57Z1PJ.png\" alt=\"57Z1PJ.png\"></p>\n<h3 id=\"启动分类\"><a class=\"markdownIt-Anchor\" href=\"#启动分类\">#</a> 启动分类</h3>\n<ul>\n<li>冷启动\n<ul>\n<li>耗时最多，优化重点</li>\n<li><img src=\"https://z3.ax1x.com/2021/10/27/57ZxJJ.png\" alt=\"57ZxJJ.png\"></li>\n</ul>\n</li>\n<li>热启动\n<ul>\n<li>最快。即后台到前台的切换</li>\n</ul>\n</li>\n<li>温启动\n<ul>\n<li>较快，只重走 Activity 的生命周期，即销毁后重建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"耗时统计\"><a class=\"markdownIt-Anchor\" href=\"#耗时统计\">#</a> 耗时统计</h3>\n<h4 id=\"systrace\"><a class=\"markdownIt-Anchor\" href=\"#systrace\">#</a> Systrace</h4>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">TraceCompat</span><span class=\"token punctuation\">.</span><span class=\"token function\">beginSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sectionName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">TraceCompat</span><span class=\"token punctuation\">.</span><span class=\"token function\">endSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><code>python systrace.py -t 10 [other-options] [categories]</code></p>\n<h4 id=\"traceview\"><a class=\"markdownIt-Anchor\" href=\"#traceview\">#</a> Traceview</h4>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57llge.png\" alt=\"57llge.png\"></p>\n<p>使用方式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">.</span><span class=\"token function\">startMethodTracing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileName\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">Debug</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopMethodTracing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>运行之后可以在目录下生成文件：内部存储 /android/data/${application}/files/fileName.trace，此文件可以使用 Android Studio Profile 打开</p>\n<ul>\n<li>Wall Clock time : 是线程真正执行的时间</li>\n<li>Thread time : CPU 执行的时间，比 Wall Clock Time 少，不包含锁时间，等待时间</li>\n<li>Top Down: 就是函数的调用列表</li>\n<li>Call Chart: 系统 Api 黄色，应用调用的方法绿色，第三方 Api (java sdk 也属于第三方) 蓝色</li>\n<li>Flame Chart:  主要的作用是收集调用方法的时间，比如多次调用 LayoutInflate.inflate，Flame Chart 会把他们都收集到一起。</li>\n<li>Bottom Up: 和 Top Down 是相反的</li>\n</ul>\n<h4 id=\"adb-命令统计\"><a class=\"markdownIt-Anchor\" href=\"#adb-命令统计\">#</a> Adb 命令统计</h4>\n<p><code>adb shell am start -S -W 包名/启动类的全限定名</code></p>\n<p>ThisTime : 最后一个 Activity 的启动耗时<br>\n TotalTime : 启动一连串的 Activity 总耗时<br>\n WaitTime : 应用进程的创建过程 + TotalTime</p>\n<h4 id=\"系统日志统计\"><a class=\"markdownIt-Anchor\" href=\"#系统日志统计\">#</a> 系统日志统计</h4>\n<p>过滤 <code>displayed</code>  输出的启动日志</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57mU4e.png\" alt=\"57mU4e.png\"></p>\n<h3 id=\"冷启动优化\"><a class=\"markdownIt-Anchor\" href=\"#冷启动优化\">#</a> 冷启动优化</h3>\n<p><a href=\"https://jishuin.proginn.com/p/763bfbd345f0\"> App 启动时间优化详解</a></p>\n<p>优化方向:</p>\n<ul>\n<li>延迟加载 / 懒加载</li>\n<li>异步线程执行耗时操作，如图片加载、网络访问、IO 操作等</li>\n<li>ViewStub 的使用</li>\n<li>减少布局层次和嵌套布局</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        }
    ]
}