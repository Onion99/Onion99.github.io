{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stay hungry , Stay foolish • All posts by \"android\" category",
    "description": "巴拉巴拉",
    "home_page_url": "https://onion99.github.io",
    "items": [
        {
            "id": "https://onion99.github.io/2022/03/13/XJTlmsU39F0XEnje/",
            "url": "https://onion99.github.io/2022/03/13/XJTlmsU39F0XEnje/",
            "title": "Android - 多渠道打包",
            "date_published": "2022-03-13T09:49:49.000Z",
            "content_html": "<blockquote>\n<p>本质就是给APK添加特定的标签信息</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"普通多渠道打包方案\">普通多渠道打包方案<a title=\"#普通多渠道打包方案\" href=\"#普通多渠道打包方案\"></a></h3>\n<h4 id=\"android-gradle-plugin\">Android Gradle Plugin<a title=\"#android-gradle-plugin\" href=\"#android-gradle-plugin\"></a></h4>\n<ol>\n<li>首先，在AndroidManifest.xml中添加渠道信息占位符：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta-data</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:name</span>=<span class=\"string\">&quot;InstallChannel&quot;</span> <span class=\"attr\">android:value</span>=<span class=\"string\">&quot;$&#123;InstallChannel&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过Gradle Plugin提供的<code>productFlavors</code>标签，添加渠道信息：</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">productFlavors&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;YingYongBao&quot;</span>&#123;</span><br><span class=\"line\">        manifestPlaceholders = [<span class=\"attr\">InstallChannel :</span> <span class=\"string\">&quot;YingYongBao&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"string\">&quot;360&quot;</span>&#123;</span><br><span class=\"line\">        manifestPlaceholders = [<span class=\"attr\">InstallChannel :</span> <span class=\"string\">&quot;360&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"apktool\">ApkTool<a title=\"#apktool\" href=\"#apktool\"></a></h4>\n<blockquote>\n<p>ApkTool是一个逆向分析工具，可以把APK解开，添加代码后，重新打包成APK</p>\n</blockquote>\n<ul>\n<li>复制一份新的APK</li>\n<li>通过ApkTool工具，解压APK（apktool d origin.apk）</li>\n<li>删除已有签名信息</li>\n<li>添加渠道信息（可以在APK的任何文件添加渠道信息）</li>\n<li>通过ApkTool工具，重新打包生成新APK（apktool b newApkDir）</li>\n<li>重新签名</li>\n</ul>\n<p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\">Apktool - A tool for reverse engineering 3rd party, closed, binary Android apps</a></p>\n<h3 id=\"添加comments多渠道打包\">添加comments多渠道打包<a title=\"#添加comments多渠道打包\" href=\"#添加comments多渠道打包\"></a></h3>\n<blockquote>\n<p>利用的是Zip文件“可以添加comment（摘要）”的数据结构特点，在文件的末尾写入任意数据，而不用重新解压zip文件（apk文件就是zip文件格式）</p>\n</blockquote>\n<p>开源实现:<a href=\"https://github.com/seven456/MultiChannelPackageTool\" target=\"_blank\">seven456/MultiChannelPackageTool: Android Multi channel package tool （安卓多渠道打包工具）</a></p>\n<p>但由于Android7.0之后新增了V2签名，该签名会校验整个APK的数据摘要，导致上述渠道打包方案失效。所以如果想继续使用上述方案，需要关闭Gradle Plugin中的V2签名选项，禁用V2签名。</p>\n<h3 id=\"美团的android多渠道打包\">美团的Android多渠道打包<a title=\"#美团的android多渠道打包\" href=\"#美团的android多渠道打包\"></a></h3>\n<blockquote>\n<p>通过可扩展的APK Signature Scheme v2 Block,添加渠道信息</p>\n</blockquote>\n<p>开源实现: <a href=\"https://github.com/Meituan-Dianping/walle\" target=\"_blank\">Meituan-Dianping/walle: Android Signature V2 Scheme签名下的新一代渠道包打包神器</a></p>\n<p>原理:<a href=\"https://tech.meituan.com/2017/01/13/android-apk-v2-signature-scheme.html\" target=\"_blank\">新一代开源Android渠道包生成工具Walle - 美团技术团队 (meituan.com)</a></p>\n<h3 id=\"豌豆荚android多渠道打包\">豌豆荚Android多渠道打包<a title=\"#豌豆荚android多渠道打包\" href=\"#豌豆荚android多渠道打包\"></a></h3>\n<blockquote>\n<p>把一个Android应用包当作zip文件包进行解压，然后发现在签名生成的目录下添加一个空文件不需要重新签名。利用这个机制，该文件的文件名就是渠道名。但由于v2签名的校验机制,添加了一个非空文件就会破坏签名校验，需要重新签名。</p>\n</blockquote>\n<!--more-->\n<p>提前构建一个没有渠道的APK，输入原始APK文件和渠道号，产出包含渠道号标记的APK.</p>\n<p>1.使用AAPT添加渠道文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aapt add base.apk asserts/channel.txt</span><br></pre></td></tr></table></figure>\n<p>2.使用zipalign工具将APK进行字节对齐</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zipalign -f 4 base.apk  app_zipalign.apk&#125;</span><br></pre></td></tr></table></figure>\n<p>3.使用apksigner对apk重新签名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apksigner sign --v1-signer-name CERT -ks $&#123;mStore&#125; --ks-key-alias $&#123;mAlias&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"apk打包流程\">APK打包流程<a title=\"#apk打包流程\" href=\"#apk打包流程\"></a></h3>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWKCWV.png\" alt=\"bWKCWV.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>打包资源文件，生成 R.java 文件\n<ul>\n<li>aapt 工具（aapt.exe） -&gt; AndroidManifest.xml 和 布局文件 XMl 都会编译 -&gt; R.java -&gt; AndroidManifest.xml 会被 aapt 编译成二进制</li>\n<li>res 目录下资源 -&gt; 编译，变成二进制文件，生成 resource id -&gt; 最后生成 resouce.arsc（文件索引表）</li>\n</ul>\n</li>\n<li>处理 aidl 文件，生成相应的 Java 文件\n<ul>\n<li>aidl 工具（aidl.exe）</li>\n</ul>\n</li>\n<li>编译项目源代码，生成 class 文件</li>\n<li>转换所有 class 文件，生成 classes.dex 文件\n<ul>\n<li>dx.bat</li>\n</ul>\n</li>\n<li>打包生成 APK 文件\n<ul>\n<li>apkbuilder 工具打包到最终的 .apk 文件中</li>\n</ul>\n</li>\n<li>对APK文件进行签名</li>\n<li>对签名后的 APK 文件进行对齐处理（正式包）</li>\n<li>对 APK 进行对齐处理，用到的工具是 zipalign</li>\n</ul>\n<h3 id=\"apk-签名\">APK 签名<a title=\"#apk-签名\" href=\"#apk-签名\"></a></h3>\n<blockquote>\n<p>了解 HTTPS 通信的同学都知道，在消息通信时，必须至少解决两个问题：一是确保消息来源的真实性，二是确保消息不会被第三方篡改。<br>\n同理，在安装 apk 时，同样也需要确保 apk 来源的真实性，以及 apk 没有被第三方篡改</p>\n</blockquote>\n<p>签名机制主要有两种用途：</p>\n<ul>\n<li>使用特殊的 key 签名可以获取到一些不同的权限</li>\n<li>验证数据保证不被篡改，防止应用被恶意的第三方覆盖</li>\n</ul>\n<p>签名工具</p>\n<ul>\n<li>jarsigner：jdk 自带的签名工具，对 jar 进行签名。使用 keystore 文件进行签名，生成的签名文件默认使用 keystore 的别名命名。</li>\n<li>apksigner：Android sdk 提供的专门用于 Android 应用的签名工具。使用 pk8、x509.pem 文件进行签名。 pk8 是私钥文件，x509.pem 是含有公钥的文件。生成的签名文件统一使用“CERT”命名。</li>\n</ul>\n<h4 id=\"v1-签名\">V1 签名<a title=\"#v1-签名\" href=\"#v1-签名\"></a></h4>\n<blockquote>\n<p>基于 JAR 签名</p>\n</blockquote>\n<h5 id=\"签名\">签名<a title=\"#签名\" href=\"#签名\"></a></h5>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWMbDg.png\" alt=\"bWMbDg.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"校验\">校验<a title=\"#校验\" href=\"#校验\"></a></h5>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWQS2V.png\" alt=\"bWQS2V.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>检查 APK 中包含的所有文件，对应的摘要值与 MANIFEST.MF 文件中记录的值一致。</li>\n<li>使用证书文件（RSA 文件）检验签名文件（SF 文件）没有被修改过。</li>\n<li>使用签名文件（SF 文件）检验 MF 文件没有被修改过。</li>\n</ul>\n<h5 id=\"v1-弊端\">v1 弊端<a title=\"#v1-弊端\" href=\"#v1-弊端\"></a></h5>\n<ul>\n<li>签名检验速度慢：对所有文件进行摘要绩，如果 Android 机器差，安装速度慢。</li>\n<li>完整性保障不够：META-INF 目录用来存放签名，但可以随意添加文件。</li>\n</ul>\n<h4 id=\"v2-签名\">v2 签名<a title=\"#v2-签名\" href=\"#v2-签名\"></a></h4>\n<blockquote>\n<p>一种全文件签名方案，能够发现对 APK 的受保护部分进行的所有更改，从而有助于加快验证速度并增强完整性保证。</p>\n</blockquote>\n<ul>\n<li>\n<p>验证归档中的所有字节，而不是单个 ZIP 条目，因此，在签署后无法再运行 ZIPalign（必须在签名之前执行）</p>\n</li>\n<li>\n<p>v2 会在原先 APK 块中增加了一个Signing Block（签名块），新的块存储了签名、摘要、签名算法、证书链和额外属性等信息。最终的签名APK有四块：头文件区、V2签名块、中央目录、尾部。</p>\n</li>\n</ul>\n<p>各版本签名组成:<br>\n<img src=\"https://s1.ax1x.com/2022/03/09/bWl9JI.png\" alt=\"bWl9JI.png\" loading=\"lazy\"></p>\n<h4 id=\"v3-签名\">v3 签名<a title=\"#v3-签名\" href=\"#v3-签名\"></a></h4>\n<p>在v2的基础上加入了证书的旋转校验，即可以在一次的升级安装中使用新的证书，新的私钥来签名APK。当然这个新的证书是需要老证书来保证的，类似一个证书链。</p>\n<h4 id=\"签名版本区别\">签名版本区别<a title=\"#签名版本区别\" href=\"#签名版本区别\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">版本</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">v1</td>\n<td>基于JAR 签名,签名以文件的形式存在于apk包中，这个版本的apk包就是一个标准的zip包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">v2</td>\n<td>在 Android 7.0 引入,签名信息被塞到了apk文件本身中，这时apk已经不符合一个标准的zip压缩包的文件结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">v3</td>\n<td>在 Android 9.0 引入,添加了一种更新证书的方式，这部分更新证书的数据同样被放在了签名信息中</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/5baea0e1cd1e\" target=\"_blank\">Android多渠道打包（VasDolly实现原理） - 简书 (jianshu.com)</a><br>\n<a href=\"https://www.jb51.net/article/174939.htm\" target=\"_blank\">详解Android v1、v2、v3签名(小结）_</a><br>\n<a href=\"https://blog.csdn.net/bobby_fu/article/details/103843038\" target=\"_blank\">Android P v3签名新特性</a><br>\n<a href=\"https://github.com/yoyiyi/SoleilNotes/blob/master/Android/v1%E3%80%81v2%E3%80%81v3%E7%AD%BE%E5%90%8D%E5%8C%BA%E5%88%AB.md\" target=\"_blank\">SoleilNotes/v1、v2、v3签名区别</a></p>\n",
            "tags": []
        },
        {
            "id": "https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/",
            "url": "https://onion99.github.io/2022/03/12/Kt2Wobik8Fv12ZRY/",
            "title": "Android AOP - ASM+Transform",
            "date_published": "2022-03-12T09:45:36.000Z",
            "content_html": "<span id=\"more\"></span>\n<p><img src=\"https://s1.ax1x.com/2022/03/10/bhoW8O.png\" alt=\"bhoW8O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"transform\">Transform<a title=\"#transform\" href=\"#transform\"></a></h3>\n<blockquote>\n<p>Android Gradle Plugin 从 1.5.0 开始支持 Transform API，以允许第三方插件在经过编译的 .class 文件转换为 .dex 文件之前对其进行操纵。</p>\n</blockquote>\n<p>普通编译过程：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bINI8f.png\" alt=\"bINI8f.png\" loading=\"lazy\"><br>\n可以看到Android 构建流程是一套流水线的工作机制，每一个的构建单元接收上一个构建单元的输出，作为输入，再将产品进行输出，<code>com.android.build</code>库提供了<code>Transform</code>的机制，而这个机制是Android 构建系统为了给外部提供一个可以加入自定义构建单元，如拦截某个构建单元的输出，或者加入一些输出等。而这些Transform是在java源码编译完成之后，package之前进行的。<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIZBy8.md.png\" alt=\"bIZBy8.md.png\" loading=\"lazy\"></p>\n<p>在Android Gradle构建系统中，可以通过<code>AppExtension </code>将<code>transform</code>注册到构建系统中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(Project project)</span> </span>&#123;</span><br><span class=\"line\">        AppExtension appExtension = (AppExtension)project.getProperties().get(<span class=\"string\">&quot;android&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 给App编译过程注册transform</span></span><br><span class=\"line\">        appExtension.registerTransform(<span class=\"keyword\">new</span> CustomTransform(), Collections.EMPTY_LIST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"asm\">ASM<a title=\"#asm\" href=\"#asm\"></a></h3>\n<blockquote>\n<p><a href=\"https://asm.ow2.io/\" target=\"_blank\">ASM</a>是一种通用<strong>Java字节码</strong>操作和分析框架。它可以用来修改现有的类，也可以直接以二进制形式动态生成类。</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/11/bI0iSx.png\" alt=\"bI0iSx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>ASM设计了两种API类型解析文件结构：</p>\n<ul>\n<li>Tree API</li>\n<li>基于Visitor API(visitor pattern)，</li>\n</ul>\n<p>让我们以不同的方式处理下吧🤤🤤🤤</p>\n<h4 id=\"tree-api\">Tree API<a title=\"#tree-api\" href=\"#tree-api\"></a></h4>\n<p>Tree API将class的结构读取到内存，构建一个树形结构，然后需要处理Method、Field等元素时，到树形结构中定位到某个元素，进行操作，然后把操作再写入新的class文件。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appExtension: AppExtension = target.extensions.getByType()</span><br><span class=\"line\">        appExtension.registerTransform(TestTransform())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransform</span> : <span class=\"type\">BaseTransform</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isPrint = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isChange = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modifyClass</span><span class=\"params\">(byteArray: <span class=\"type\">ByteArray</span>)</span></span>: ByteArray &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> classReader = ClassReader(byteArray)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> classNode = ClassNode()</span><br><span class=\"line\">        <span class=\"comment\">// 通过传递 ClassReader 解析对应 ClassFile 生成 ClassNode</span></span><br><span class=\"line\">        classReader.accept(classNode, ClassReader.EXPAND_FRAMES)</span><br><span class=\"line\">        <span class=\"comment\">// 打印测试</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrint)&#123;</span><br><span class=\"line\">            isPrint = <span class=\"literal\">false</span></span><br><span class=\"line\">            Log.log(classNode.toString())</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (methodNode <span class=\"keyword\">in</span> classNode.methods) &#123;</span><br><span class=\"line\">                Log.log(<span class=\"string\">&quot;<span class=\"subst\">$&#123;classNode.name&#125;</span> ------&gt;&gt;&gt; <span class=\"variable\">$methodNode</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果文件对classNode有修改的情况下，需要这样处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isChange)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> classWriter = ClassWriter(ClassWriter.COMPUTE_MAXS)</span><br><span class=\"line\">            classNode.accept(classWriter)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> classWriter.toByteArray()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInputTypes</span><span class=\"params\">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransformManager.CONTENT_CLASS</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScopes</span><span class=\"params\">()</span></span>: MutableSet&lt;<span class=\"keyword\">in</span> QualifiedContent.Scope&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mutableSetOf(</span><br><span class=\"line\">            QualifiedContent.Scope.PROJECT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到编译的类正被我们打印出来：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIq3id.png\" alt=\"bIq3id.png\" loading=\"lazy\"></p>\n<h4 id=\"visitor-api\">Visitor API<a title=\"#visitor-api\" href=\"#visitor-api\"></a></h4>\n<p>Visitor API则将通过接口的方式，分离读class和写class的逻辑，一般通过一个ClassReader负责读取class字节码，然后ClassReader通过一个ClassVisitor接口，将字节码的每个细节按顺序通过接口的方式，传递给ClassVisitor（你会发现ClassVisitor中有多个visitXXXX接口），这个过程就像ClassReader带着ClassVisitor游览了class字节码的每一个指令。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> appExtension: AppExtension = target.extensions.getByType()</span><br><span class=\"line\">        appExtension.registerTransform(TestVisitorTransform())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClassVisitor</span></span>(visitor: ClassVisitor):ClassVisitor(Opcodes.ASM4,visitor)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVisitorTransform</span> : <span class=\"type\">BaseTransform</span></span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isPrint = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> isChange = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">modifyClass</span><span class=\"params\">(byteArray: <span class=\"type\">ByteArray</span>)</span></span>: ByteArray &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析class文件</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classReader = ClassReader(byteArray)</span><br><span class=\"line\">        <span class=\"comment\">// 将class文件内容写入到ClassWriter中</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classWriter = ClassWriter(classReader,ClassWriter.COMPUTE_MAXS)</span><br><span class=\"line\">        <span class=\"comment\">// 赋予对应的ClassVisitor读写能力</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> classVisitor = TestClassVisitor(classWriter)</span><br><span class=\"line\">        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES)</span><br><span class=\"line\">        <span class=\"comment\">// 打印测试</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPrint)&#123;</span><br><span class=\"line\">            isPrint = <span class=\"literal\">false</span></span><br><span class=\"line\">            Log.log(classVisitor.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果文件对classNode有修改的情况下，需要这样处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isChange)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> classWriter.toByteArray()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 返回修改内容</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArray</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInputTypes</span><span class=\"params\">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TransformManager.CONTENT_CLASS</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScopes</span><span class=\"params\">()</span></span>: MutableSet&lt;<span class=\"keyword\">in</span> QualifiedContent.Scope&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mutableSetOf(</span><br><span class=\"line\">            QualifiedContent.Scope.PROJECT</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样可以看到编译的类正被我们打印出来：<br>\n<img src=\"https://s1.ax1x.com/2022/03/11/bIvebV.png\" alt=\"bIvebV.png\" loading=\"lazy\"></p>\n<ul>\n<li>ClassReader：负责对 .class 文件进行读取</li>\n<li>ClassVisitor： 负责访问 .class 文件中各个元素</li>\n<li>ClassWriter： 负责对 .class 文件进行写入，将字节码输出为 byte 数组。</li>\n</ul>\n<h3 id=\"字节码了解\">字节码了解<a title=\"#字节码了解\" href=\"#字节码了解\"></a></h3>\n<p><a href=\"https://plugins.jetbrains.com/plugin/14860-asm-bytecode-viewer-support-kotlin\" target=\"_blank\">Android Studio 辅助类转字节码插件：ASM Bytecode Viewer Support Kotlin</a><br>\n<img src=\"https://pic1.zhimg.com/v2-fdd5caeb51dbfb819539611fa9ccbcd4_r.jpg\" alt=\"preview\" loading=\"lazy\"></p>\n<p><a href=\"https://juejin.cn/post/6944517233674551304#heading-5\" target=\"_blank\">字节码结构分析 - 掘金 (juejin.cn)</a><br>\n<a href=\"https://www.jianshu.com/p/92a75a18cbc1\" target=\"_blank\">Java ByteCode - 简书 (jianshu.com)</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/94498015\" target=\"_blank\">史上最通俗易懂的ASM教程 - 知乎 (zhihu.com)</a></p>\n<h3 id=\"自定义gradle插件\">自定义gradle插件<a title=\"#自定义gradle插件\" href=\"#自定义gradle插件\"></a></h3>\n<blockquote>\n<p>Transform和Asm的结合使用需要用到Gradle插件</p>\n</blockquote>\n<p>自定义插件方式：详看<a href=\"https://docs.gradle.org/current/userguide/custom_plugins.html#example_a_build_for_a_custom_plugin\" target=\"_blank\">Developing Custom Gradle Plugins</a></p>\n<ul>\n<li>Build script</li>\n<li><code>buildSrc</code> 项目</li>\n<li>独立项目（Standalone project）</li>\n</ul>\n<h4 id=\"build-script\">Build script<a title=\"#build-script\" href=\"#build-script\"></a></h4>\n<blockquote>\n<p>直接在项目的build.gradle中添加groovy脚本代码并引用。这样插件在构建脚本之外不可见，只能在此模块中使用脚本插件。</p>\n</blockquote>\n<ol>\n<li>简单编写脚本<br>\nbuild.gradle:</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingPlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Plugin</span>&lt;<span class=\"title\">Project</span>&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> apply(Project project) &#123;</span><br><span class=\"line\">        project.task(<span class=\"string\">&#x27;hello&#x27;</span>) &#123;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println <span class=\"string\">&#x27;Hello from the GreetingPlugin&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Apply the plugin</span></span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> GreetingPlugin</span><br></pre></td></tr></table></figure>\n<p>跟上面一样，只不过采用新版kts风格<br>\nbuild.gradle.kts</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingPlugin</span> : <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(project: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        project.task(<span class=\"string\">&quot;hello&quot;</span>) &#123;</span><br><span class=\"line\">            doLast &#123;</span><br><span class=\"line\">                println(<span class=\"string\">&quot;Hello from the GreetingPlugin&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Apply the plugin</span></span><br><span class=\"line\">apply&lt;GreetingPlugin&gt;()</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>运行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; gradle -q hello</span><br><span class=\"line\">Hello from the GreetingPlugin</span><br></pre></td></tr></table></figure>\n<h4 id=\"buildsrc-项目\">buildSrc 项目<a title=\"#buildsrc-项目\" href=\"#buildsrc-项目\"></a></h4>\n<blockquote>\n<p>将插件的源代码放在rootProjectDir/buildSrc/src/main/groovy目录中，Gradle将负责编译和测试插件，并使其在构建脚本的类路径中可用。该插件每个构建脚本都是可见的。但是它在构建外部不可见即在当前工程的各个模块都可见，但是项目之外不可见</p>\n</blockquote>\n<p>buildSrc是android中一个保留名，是一个专门用来做gradle插件的module，所以这个module的名字必须是buildSrc，此模块下面有一个固定的目录结构src/main/groovy，这个是用来存放真正的脚本文件的。其他的自定义类可以放在这个目录下，也可以放在自建的其他目录下。</p>\n<ol>\n<li>创建<code>buildSrc</code>Module,可以直接创建目录\n<ul>\n<li>在工程根目录下创建目录<code>buildSrc</code></li>\n<li>在buildSrc下创建目录结构 <code>src/main/groovy</code>或者<code>src/main/java</code></li>\n<li>在buildSrc根目录下创建<code> build.gradle</code>或者<code> build.gradle.kts</code></li>\n</ul>\n</li>\n</ol>\n<p>build.gradle.kts:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    `kotlin-dsl`</span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;jvm&quot;</span>) version <span class=\"string\">&quot;1.4.32&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> compileKotlin: KotlinCompile <span class=\"keyword\">by</span> tasks</span><br><span class=\"line\"><span class=\"keyword\">val</span> compileTestKotlin: KotlinCompile <span class=\"keyword\">by</span> tasks</span><br><span class=\"line\">compileKotlin.kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">compileTestKotlin.kotlinOptions &#123;</span><br><span class=\"line\">    jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    google()</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;com.android.tools.build:gradle:4.1.1&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;commons-io:commons-io:2.6&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;commons-codec:commons-codec:1.15&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;org.ow2.asm:asm-commons:9.2&quot;</span>)</span><br><span class=\"line\">    compileOnly(<span class=\"string\">&quot;org.ow2.asm:asm-tree:9.2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>build.gradle</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;groovy&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"comment\">// gradle插件必须的引用</span></span><br><span class=\"line\">    implementation gradleApi()</span><br><span class=\"line\">    implementation localGroovy()</span><br><span class=\"line\">    </span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.android.tools.build:gradle:4.1.1&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// asm依赖</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm:9.2&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm-util:9.2&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;org.ow2.asm:asm-commons:9.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">    google()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 指定编译的编码 不然有中文的话会出现  ’编码GBK的不可映射字符‘</span></span><br><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">    options.encoding = <span class=\"string\">&quot;UTF-8&quot;</span></span><br><span class=\"line\">    println(<span class=\"string\">&#x27;使用utf8编译&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建插件入口TestPlugin</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.onion.plugin.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPlugin</span>: <span class=\"type\">Plugin</span>&lt;<span class=\"type\">Project</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apply</span><span class=\"params\">(target: <span class=\"type\">Project</span>)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Test Plugin : target = [<span class=\"subst\">$&#123;target&#125;</span>]&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在App Module 中引入,然后Project Build</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.onion.plugin.plugin.TestPlugin</span><br><span class=\"line\">apply <span class=\"attr\">plugin:</span> TestPlugin <span class=\"comment\">// 插桩测试</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"插件发布额外学习\">插件发布额外学习<a title=\"#插件发布额外学习\" href=\"#插件发布额外学习\"></a></h4>\n<ul>\n<li><a href=\"https://juejin.cn/post/6887581345384497165\" title=\"https://juejin.cn/post/6887581345384497165\" target=\"_blank\">Android Gradle 插件开发入门指南（一）</a>，讲解Gradle Plugin开发的完整流程</li>\n<li><a href=\"https://juejin.cn/post/6887583351348133895\" title=\"https://juejin.cn/post/6887583351348133895\" target=\"_blank\">Android Gradle 插件开发入门指南（二）</a>，针对Android的Gradle Plugin开发实践</li>\n<li><a href=\"https://juejin.cn/post/6890544619856068616\" title=\"https://juejin.cn/post/6890544619856068616\" target=\"_blank\">Android Gradle 插件开发入门指南（三）</a>，如何将插件发布到jcenter</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"http://quinnchen.cn/2018/09/13/2018-09-13-asm-transform/\" target=\"_blank\">一起玩转Android项目中的字节码 | Quinn Note (quinnchen.cn)</a><br>\n<a href=\"https://www.jianshu.com/p/92a75a18cbc1\" target=\"_blank\">Java ByteCode</a><br>\n<a href=\"https://blog.csdn.net/qq_23992393/article/details/103696976\" target=\"_blank\">ASM + Transform 在android中的使用</a><br>\n<a href=\"https://www.jianshu.com/p/a1e6b3abd789\" target=\"_blank\">ASM</a><br>\n<a href=\"https://juejin.cn/post/6893917892061413389#heading-3\" target=\"_blank\">白话 Android AOP (一) </a><br>\n<a href=\"https://mp.weixin.qq.com/s/YFi6-DrV22X_VVfFbKHNEg\" target=\"_blank\">Android gradle Transform 分析</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/",
            "url": "https://onion99.github.io/2022/03/11/3Bhw0wOwpYCE6F8V/",
            "title": "Android AOP - AspectJ",
            "date_published": "2022-03-11T09:40:38.000Z",
            "content_html": "<blockquote>\n<p>AspectJ通过注解的形式来标注切入点、切入对象等，然后在代码编译期间将代码织入到java的字节码中</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>Android开源方案：<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx\" target=\"_blank\">AspectJX</a></p>\n<h3 id=\"引入依赖\">引入依赖<a title=\"#引入依赖\" href=\"#引入依赖\"></a></h3>\n<p>gradle引入：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">&#x27;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>应用plugin：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;android-aspectjx&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>AspectJX配置：</p>\n<p>AspectJX默认会处理所有的二进制代码文件和库，为了提升编译效率及规避部分第三方库出现的编译兼容性问题，AspectJX提供<code>include</code>,<code>exclude</code>命令来过滤需要处理的文件及排除某些文件(包括class文件及jar文件)。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspectjx &#123;</span><br><span class=\"line\">    <span class=\"comment\">//排除所有package路径中包含`android.support`的class文件及库（jar文件）</span></span><br><span class=\"line\">\texclude <span class=\"string\">&#x27;android.support&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开关配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspectjx &#123;</span><br><span class=\"line\">    <span class=\"comment\">//关闭AspectJX功能</span></span><br><span class=\"line\">\tenabled <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单使用\">简单使用<a title=\"#简单使用\" href=\"#简单使用\"></a></h3>\n<ol>\n<li>准备切入的类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;animal fly method:&quot;</span> + <span class=\"keyword\">this</span>.toString() + <span class=\"string\">&quot;#fly&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写对应的切面类，用@Aspect注解</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span>  <span class=\"comment\">//①</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标注切入的方法，看到没有这里用的Poincut的 call</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&quot;)</span><span class=\"comment\">//②</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标注函数执行前处理</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;callMethod()&quot;)</span><span class=\"comment\">//③</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeMethodCall</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;before-&gt;&quot;</span> + joinPoint.getTarget().toString()); <span class=\"comment\">//④</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编译后就可以看到类的方法在执行前有代码插入了<br>\n<img src=\"https://s1.ax1x.com/2022/03/10/bhAMh8.png\" alt=\"bhAMh8.png\" loading=\"lazy\"></li>\n</ol>\n<h3 id=\"语法\">语法<a title=\"#语法\" href=\"#语法\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">JPoint</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">Pointcut语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">method call</td>\n<td style=\"text-align:left\">函数调用</td>\n<td style=\"text-align:left\">call(MethodSignature)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">method execution</td>\n<td style=\"text-align:left\">函数内部执行</td>\n<td style=\"text-align:left\">execution(MethodSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">method execution</td>\n<td style=\"text-align:left\">构造函数调用</td>\n<td style=\"text-align:left\">call(ConstructorSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">constructor execution</td>\n<td style=\"text-align:left\">构造函数内部执行</td>\n<td style=\"text-align:left\">execution(ConstructorSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field get</td>\n<td style=\"text-align:left\">读变量</td>\n<td style=\"text-align:left\">get(FieldSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">field set</td>\n<td style=\"text-align:left\">写变量</td>\n<td style=\"text-align:left\">set(FieldSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static initialization</td>\n<td style=\"text-align:left\">静态代码块初始化</td>\n<td style=\"text-align:left\">staticinitialization(TypeSignature）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">handler</td>\n<td style=\"text-align:left\">异常处理</td>\n<td style=\"text-align:left\">handler(TypeSignature),只能与@Before()配置使用</td>\n</tr>\n</tbody>\n</table></div></div><br/>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">Advice</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">@Before(Pointcut)</td>\n<td style=\"text-align:left\">执行Jpoint之前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@After(Pointcut)</td>\n<td style=\"text-align:left\">执行Jpoint之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@Around(Pointcut)</td>\n<td style=\"text-align:left\">替换原理的代码</td>\n</tr>\n</tbody>\n</table></div></div><p>完整语法看这<a href=\"https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf\" target=\"_blank\">AspectJ</a></p>\n<h3 id=\"注意点\">注意点<a title=\"#注意点\" href=\"#注意点\"></a></h3>\n<p>标注<code>call</code>和<code>execution</code>执行的时候，This和Target不同的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;call(* com.wandering.sample.aspectj.Animal.fly(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;callMethod-&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;callMethod()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeMethodCall</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;getTarget-&gt;&quot;</span> + joinPoint.getTarget());</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;getThis-&gt;&quot;</span> + joinPoint.getThis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>切入方：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    Animal animal = new Animal();</span><br><span class=\"line\">    animal.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTarget-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br><span class=\"line\">getThis-&gt;com.wandering.sample.aspectj.MainActivity@<span class=\"number\">98</span>c38bf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>说明target指代的是切入点方法的所有者，而this指代的是被织入代码所属类的实例对象。</p>\n</blockquote>\n<p>将切点的<code>call</code>改为<code>execution</code>：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTarget-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br><span class=\"line\">getThis-&gt;com.wandering.sample.aspectj.Animal@<span class=\"number\">509</span>ddfd</span><br></pre></td></tr></table></figure>\n<h3 id=\"缺点\">缺点<a title=\"#缺点\" href=\"#缺点\"></a></h3>\n<ul>\n<li>如果相应的class没有实现相应的对点方法将无法织入，如Activity没有实现onResume方法的话，将无法织入代码。</li>\n<li>无法处理Lambda语法</li>\n<li>会有一系列兼容性问题，如R8、gradle版本不同等</li>\n<li>性能较差，APP项目比较大时编译时间明显加长</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://github.com/hyvenzhu/Android-Demos/blob/master/AspectJDemo/AspectJ.pdf\" target=\"_blank\">Android-Demos/AspectJ.pdf</a><br>\n<a href=\"https://juejin.cn/post/6888548726424469511\" target=\"_blank\">Android AOP方案(一)——AspectJ</a><br>\n<a href=\"https://www.jianshu.com/p/28aa352af7fb\" target=\"_blank\">Android AOP - 简书</a><br>\n<a href=\"https://www.jianshu.com/p/d07c996ea13c\" target=\"_blank\">Android AspectJ</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/11/qyGiQE7cKbQOfEKm/",
            "url": "https://onion99.github.io/2022/03/11/qyGiQE7cKbQOfEKm/",
            "title": "Android AOP - JDK动态代理",
            "date_published": "2022-03-10T21:25:00.000Z",
            "content_html": "<p>JDK的动态代理底层是通过Java反射机制实现的，并且需要目标对象继承自一个接口才能生成它的代理类</p>\n<span id=\"more\"></span>\n<h4 id=\"java动态代理\">Java动态代理<a title=\"#java动态代理\" href=\"#java动态代理\"></a></h4>\n<blockquote>\n<p>JDK 运行期间，动态创建 class 字节码并加载到 JVM</p>\n</blockquote>\n<ol>\n<li>JDK的动态代理需要实现一个处理方法调用的Handler，用于实现代理方法的内部逻辑，实现InvocationHandler接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JdkProxyHandler</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// proxy：生成的代理对象, obj：目标方法, args：目标方法参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理前&quot;</span>);</span><br><span class=\"line\">        Object result = method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理后&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>代理</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ISender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">send</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2-2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmsSender</span> <span class=\"keyword\">implements</span> <span class=\"title\">ISender</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">send</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sending msg&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2-3</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJdkProxy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ISender sender = (ISender) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Class[]&#123;ISender.class&#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> JdkProxyHandler(<span class=\"keyword\">new</span> SmsSender()));</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = sender.send();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;代理对象：&quot;</span> + sender.getClass().getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;输出结果：&quot;</span> + result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通 过 JDK 的 java.lang.reflect.Proxy 类实现动态代理 ， 会使用其静态方法newProxyInstance()，依据目标对象、业务接口及调用处理器三者，自动生成一个动态代理对象。</p>\n<p><code>public static newProxyInstance ( ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler handler)</code></p>\n<ul>\n<li>loader：目标类的类加载器，通过目标对象的反射可获取</li>\n<li>interfaces：目标类实现的接口数组，通过目标对象的反射可获取</li>\n<li>handler：调用处理器。</li>\n</ul>\n<h5 id=\"原理\">原理<a title=\"#原理\" href=\"#原理\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                          InvocationHandler h)</span> <span class=\"keyword\">throws</span> IllegalArgumentException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.检查</span></span><br><span class=\"line\">    Objects.requireNonNull(h);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//查找或生成指定的代理类</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//通过反射创建代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">            AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        Throwable t = e.getCause();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"局限性\">局限性<a title=\"#局限性\" href=\"#局限性\"></a></h3>\n<p>只能代理接口，并且只能修改接口声明的方法</p>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jb51.net/article/209607.htm\" target=\"_blank\">Java动态代理四种实现方式详解</a><br>\n<a href=\"https://www.cnblogs.com/wkfvawl/p/15030814.html\" target=\"_blank\">Java 动态代理 - 王陸</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/",
            "url": "https://onion99.github.io/2022/03/10/9rnRdFk7xf4rnvds/",
            "title": "Android AOP - 概论",
            "date_published": "2022-03-10T09:26:27.000Z",
            "content_html": "<h3 id=\"编程架构思想\">编程架构思想<a title=\"#编程架构思想\" href=\"#编程架构思想\"></a></h3>\n<ul>\n<li>\n<p>面向对象(Object Oriented Programming)</p>\n</li>\n<li>\n<p>面向过程(Procedure Oriented Programming)</p>\n</li>\n<li>\n<p>面向切面(Aspect Oriented Programming)</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<p>AOP 意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术，和 OOP 以对象为核心不同，AOP是针对业务处理过程中的类似的代码逻辑进行切入，然后统一处理。</p>\n<p>AOP其实是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。</p>\n<p><img src=\"https://s1.ax1x.com/2022/03/10/bfRiDK.png\" alt=\"bfRiDK.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"常见概念\">常见概念<a title=\"#常见概念\" href=\"#常见概念\"></a></h3>\n<ul>\n<li>连接点(<em>Joinpoint</em>)\n<ul>\n<li>程序中可能作为代码注入目标的特定的点，例如一个方法调用或者方法入口。</li>\n</ul>\n</li>\n<li>切点（<em>Pointcut</em>）\n<ul>\n<li>告诉代码注入工具，在任何注入一段特定代码的表达式。例如，在哪些joint points应用一个特定的Advice。</li>\n<li>切入点可以选择唯一一个，比如执行某一个方法，也可以有多个选择，比如，标记了一个定义成@DebugLog的自定义注解的所有方法。</li>\n</ul>\n</li>\n<li>增强（<em>Advice</em>）\n<ul>\n<li>注入到class文件中的代码。</li>\n<li>典型的Advice类型有before、after和around，分别表示在目标方法执行之前、执行后和完全代替目标方法执行的代码。</li>\n</ul>\n</li>\n<li>目标对象 (<em>Target</em>)</li>\n<li>引介(<em>Introduction</em>)</li>\n<li>织入（<em>Weaving</em>）\n<ul>\n<li>注入代码（advices）到目标位置（joint points）的过程</li>\n</ul>\n</li>\n<li>代理（<em>Proxy</em>）</li>\n<li>切面（<em>Aspect</em>）\n<ul>\n<li>Pointcut和Advice的组合看做切面。例如，我们在应用中通过定义一个Pointcut和给定恰当的Advice，添加一个日志切面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分类\">分类<a title=\"#分类\" href=\"#分类\"></a></h3>\n<blockquote>\n<p>一类是，例如Java的动态代理；另一类可以归结为，例如经常听说的，AspecJ等框架</p>\n</blockquote>\n<ul>\n<li>运行期的AOP\n<ul>\n<li>Java的动态代理</li>\n</ul>\n</li>\n<li>编译期的AOP\n<ul>\n<li>ASM</li>\n<li>AspecJ</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"应用\">应用<a title=\"#应用\" href=\"#应用\"></a></h3>\n<ul>\n<li>Hot Fix\n<ul>\n<li>基于AOP技术，编译期修改Java字节码，对每一个方法进行插桩操作，以便于hook每一个方法，做到方法级别的热修复</li>\n</ul>\n</li>\n<li>监测方法耗时</li>\n<li>日志记录</li>\n<li>统一处理点击抖动</li>\n<li>其他的监控方面</li>\n</ul>\n<h3 id=\"aop与apt区别\">AOP与APT区别<a title=\"#aop与apt区别\" href=\"#aop与apt区别\"></a></h3>\n<p>APT(Annotation Processing Tool)即注解处理器，是一种处理注解的工具，确切的说它是javac的一个工具，它用来在编译时扫描和处理注解。注解处理器以Java代码(或者编译过的字节码)作为输入，生成<code>.java文件</code>作为输出。</p>\n<ul>\n<li>APT是在编译期，通过注解生成<code>java</code>文件，然后.java文件仍然需要进一步编译生成<code>.class</code>文件</li>\n<li>AOP是在编译完成后直接通过修改<code>.class</code>文件，添加或者修改代码逻辑</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxODg0MzU2OQ==&amp;mid=2247483887&amp;idx=1&amp;sn=d54e3f210a4f31f477dba06c3dcd352e&amp;scene=21#wechat_redirect\" target=\"_blank\">AOP技术在客户端的应用与实践</a></p>\n",
            "tags": [
                "AOP"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/09/wkROkqAosRBXidma/",
            "url": "https://onion99.github.io/2022/03/09/wkROkqAosRBXidma/",
            "title": "Android-动态化方案探索",
            "date_published": "2022-03-09T09:21:31.000Z",
            "content_html": "<p><img src=\"https://pic3.zhimg.com/80/v2-7179de6b1bfe62fa7aa3c93d5948509a_720w.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>开源方案：<br>\n<a href=\"https://github.com/alibaba/vlayout\" target=\"_blank\">alibaba/vlayout: Project vlayout is a powerfull LayoutManager extension for RecyclerView, it provides a group of layouts for RecyclerView. Make it able to handle a complicate situation when grid, list and other layouts in the same recyclerview</a></p>\n<p><a href=\"https://github.com/alibaba/tangram-android\" target=\"_blank\">alibaba/Tangram-Android: Tangram is a modular UI solution for building native page dynamically including Tangram for Android, Tangram for iOS and even backend CMS. This project provides the sdk on Android</a></p>\n",
            "tags": []
        },
        {
            "id": "https://onion99.github.io/2022/03/08/r2WB7zoGFwDaiwmB/",
            "url": "https://onion99.github.io/2022/03/08/r2WB7zoGFwDaiwmB/",
            "title": "Android - 组件化",
            "date_published": "2022-03-08T09:17:11.000Z",
            "content_html": "<blockquote>\n<p>组件是可拆除的就表示组件与组件之间是不会耦合的。 组件化就是需要去拆分出组件和实现组件之间通信的过程</p>\n</blockquote>\n<p>项目发展到一定程度，随着人员的增多，代码越来越臃肿，这时候就必须进行模块化的拆分。模块化是一种指导理念，其核心思想就是分而治之、降低耦合最终目的方便项目开发更加流畅，分工更加明确。同时业务线只需要依赖自己的模块无需引入其他业务模块从而可以加快编译速度</p>\n<span id=\"more\"></span>\n<h3 id=\"组件拆分\">组件拆分<a title=\"#组件拆分\" href=\"#组件拆分\"></a></h3>\n<p><img src=\"https://s1.ax1x.com/2022/03/09/bWG2b8.png\" alt=\"bWG2b8.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"实现组件化\">实现组件化<a title=\"#实现组件化\" href=\"#实现组件化\"></a></h3>\n<blockquote>\n<p>核心即是<strong>路由</strong>，<strong>反射</strong>，<strong>通信协议</strong></p>\n</blockquote>\n<p>组件之间没有依赖关系所以组件向外暴露的方法要进行注册，我们通过我们起的别名去寻找他，这就是路由的过 程，然后通过反射去实例化，通过通信协议与组件交互。</p>\n<p>组件化通信一定要有统一的协议去约束，不然即使找到了目标对象但是不知道如何使用也是无济于事的。 我们需要明确一点组件需要向外暴露什么东西呢?</p>\n<ul>\n<li>一个是组件提供的Activity/Fragment路由</li>\n<li>一个是组件提供的一些服务方法，如定位库提供定位信息获取</li>\n</ul>\n<p>开源方案：<a href=\"https://github.com/alibaba/ARouter\" target=\"_blank\">alibaba/ARouter: 💪 A framework for assisting in the renovation of Android componentization (帮助 Android App 进行组件化改造的路由框架)</a></p>\n<h3 id=\"文章来源\">文章来源<a title=\"#文章来源\" href=\"#文章来源\"></a></h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/365501317\" target=\"_blank\">老生常谈：组件化 - 知乎 (zhihu.com)</a></p>\n",
            "tags": []
        },
        {
            "id": "https://onion99.github.io/2022/03/08/yriIudTcpjYyMHli/",
            "url": "https://onion99.github.io/2022/03/08/yriIudTcpjYyMHli/",
            "title": "Android黑科技 - 插件化",
            "date_published": "2022-03-07T22:46:11.000Z",
            "content_html": "<p>插件化技术最初源于免安装运行apk的想法，这个免安装的apk可以理解为插件。支持插件化的app可以在运行时加载和运行插件，这样便可以将app中一些不常用的功能模块做成插件，一方面减小了安装包的大小，另一方面可以实现app功能的动态扩展。</p>\n<p>想要实现插件化，主要是解决下面三个问题：</p>\n<ul>\n<li>插件中代码的加载和与主工程的互相调用</li>\n<li>插件中资源的加载和与主工程的互相访问</li>\n<li>四大组件生命周期的管理</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"插件化发展\">插件化发展<a title=\"#插件化发展\" href=\"#插件化发展\"></a></h3>\n<p><img src=\"https://s1.ax1x.com/2022/03/07/byn21s.png\" alt=\"byn21s.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>第一代</strong>：dynamic-load-apk最早使用ProxyActivity这种静态代理技术，由ProxyActivity去控制插件中PluginActivity的生命周期。该种方式缺点明显，插件中的activity必须继承PluginActivity，开发时要小心处理context。而DroidPlugin通过Hook系统服务的方式启动插件中的Activity，使得开发插件的过程和开发普通的app没有什么区别，但是由于hook过多系统服务，异常复杂且不够稳定。</p>\n<p><strong>第二代</strong>：为了同时达到插件开发的低侵入性（像开发普通app一样开发插件）和框架的稳定性，在实现原理上都是趋近于选择尽量少的hook，并通过在manifest中预埋一些组件实现对四大组件的插件化。另外各个框架根据其设计思想都做了不同程度的扩展，其中Small更是做成了一个跨平台，组件化的开发框架。</p>\n<p><strong>第三代</strong>：VirtualApp比较厉害，能够完全模拟app的运行环境，能够实现app的免安装运行和双开技术。Atlas是阿里今年开源出来的一个结合组件化和热修复技术的一个app基础框架，其广泛的应用与阿里系的各个app，其号称是一个容器化框架</p>\n<h3 id=\"插件化方案\">插件化方案<a title=\"#插件化方案\" href=\"#插件化方案\"></a></h3>\n<h4 id=\"静态方案-通过proxyactivity统一加载插件中的所有activity，以that框架为代表\">静态方案-通过ProxyActivity统一加载插件中的所有Activity，以that框架为代表<a title=\"#静态方案-通过proxyactivity统一加载插件中的所有activity，以that框架为代表\" href=\"#静态方案-通过proxyactivity统一加载插件中的所有activity，以that框架为代表\"></a></h4>\n<blockquote>\n<p>ProxyActivity代理的方式最早是由dynamic-load-apk提出的，其思想很简单，在主工程中放一个ProxyActivy，启动插件中的Activity时会先启动ProxyActivity，在ProxyActivity中创建插件Activity，并同步生命周期</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/07/byKLex.png\" alt=\"byKLex.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h5 id=\"流程:\">流程:<a title=\"#流程:\" href=\"#流程:\"></a></h5>\n<ol>\n<li>首先需要通过统一的入口（如图中的PluginManager）启动插件Activity，其内部会将启动的插件Activity信息保存下来，并将intent替换为启动ProxyActivity的intent。</li>\n<li>ProxyActivity根据插件的信息拿到该插件的ClassLoader和Resource，通过反射创建PluginActivity并调用其onCreate方法。</li>\n<li>PluginActivty调用的setContentView被重写了，会去调用ProxyActivty的setContentView。由于ProxyActivity重写了getResource返回的是插件的Resource，所以setContentView能够访问到插件中的资源。同样findViewById也是调用ProxyActivity的。</li>\n<li>ProxyActivity中的其他生命周期回调函数中调用相应PluginActivity的生命周期</li>\n</ol>\n<h5 id=\"实现\">实现<a title=\"#实现\" href=\"#实现\"></a></h5>\n<p>模拟Activty基本实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ProxyActivityInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生命周期的activity</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Activity proxyActivity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBackPressed</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插件BaseActivty类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是插件的基类，所有的activity都要继承这个类，</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">ProxyActivityInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Activity that;<span class=\"comment\">//这里的that 指的是我们的宿主app，因为插件是没有安装的 是没有上下文的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Activity proxyActivity)</span> </span>&#123;</span><br><span class=\"line\">        that = proxyActivity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//可以看到,最终调用主App(宿主)的activity 函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (that != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            that.setContentView(view);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.setContentView(view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContentView</span><span class=\"params\">(<span class=\"keyword\">int</span> layoutResID)</span> </span>&#123;</span><br><span class=\"line\">        that.setContentView(layoutResID);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">findViewById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> that.findViewById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Intent <span class=\"title\">getIntent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (that != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> that.getIntent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getIntent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassLoader <span class=\"title\">getClassLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> that.getClassLoader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LayoutInflater <span class=\"title\">getLayoutInflater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> that.getLayoutInflater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ApplicationInfo <span class=\"title\">getApplicationInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> that.getApplicationInfo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Window <span class=\"title\">getWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> that.getWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WindowManager <span class=\"title\">getWindowManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> that.getWindowManager();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        ProxyActivity ---&gt;className</span></span><br><span class=\"line\">        Intent m = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">        m.putExtra(<span class=\"string\">&quot;ClassName&quot;</span>, intent.getComponent().getClassName());</span><br><span class=\"line\">        that.startActivity(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>插件ProxyActivity(): 主要通过这个去 New 一个Activity 来模拟原生Activity管理</p>\n<blockquote>\n<p>插件内部的跳转其实也就是在开同一个activity</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProxyActivityInterface pluginObj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">//在这里拿到了真实跳转的activity 拿出来 再去启动真实的activity</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String className = getIntent().getStringExtra(<span class=\"string\">&quot;ClassName&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射在去启动一个真实的activity 拿到Class对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; plugClass = getClassLoader().loadClass(className);</span><br><span class=\"line\">            Constructor&lt;?&gt; pluginConstructor = plugClass.getConstructor(<span class=\"keyword\">new</span> Class[]&#123;&#125;);</span><br><span class=\"line\">            <span class=\"comment\">//因为插件的activity实现了我们的标准</span></span><br><span class=\"line\">            pluginObj = (ProxyActivityInterface) pluginConstructor.newInstance(<span class=\"keyword\">new</span> Object[]&#123;&#125;);</span><br><span class=\"line\">            pluginObj.attach(<span class=\"keyword\">this</span>);<span class=\"comment\">//注入上下文</span></span><br><span class=\"line\">            pluginObj.onCreate(<span class=\"keyword\">new</span> Bundle());<span class=\"comment\">//一定要调用onCreate </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e.getClass().getSimpleName() .equals(<span class=\"string\">&quot;ClassCastException&quot;</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//我这里是直接拿到异常判断的 ，也可的 拿到上面的plugClass对象判断有没有实现我们的接口</span></span><br><span class=\"line\">                finish();</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;非法页面&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">    <span class=\"comment\">//为什么要重写这个呢 因为这个是插件内部startactivity调用的 将真正要开启的activity的类名穿过来</span></span><br><span class=\"line\">    <span class=\"comment\">//然后取出来，启动我们的占坑的activity 在我们真正要启动的赛进去</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        String className1=intent.getStringExtra(<span class=\"string\">&quot;ClassName&quot;</span>);</span><br><span class=\"line\">        Intent intent1 = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ProxyActivity.class);</span><br><span class=\"line\">        intent1.putExtra(<span class=\"string\">&quot;ClassName&quot;</span>, className1);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.startActivity(intent1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写classLoader</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassLoader <span class=\"title\">getClassLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HookManager.getInstance().getClassLoader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写Resource</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Resources <span class=\"title\">getResources</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HookManager.getInstance().getResource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        pluginObj.onStart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        pluginObj.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        pluginObj.onPause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插件apk和资源加载处理-Hookmanager:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HookManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HookManager ourInstance = <span class=\"keyword\">new</span> HookManager();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resources resources;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DexClassLoader loader;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> PackageInfo packageInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HookManager <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HookManager</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制插件到缓存目录,方便加载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadPlugin</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 假如这里是从网络获取的插件 我们直接从sd卡获取 然后读取到我们的cache目录</span></span><br><span class=\"line\">        String pluginName = <span class=\"string\">&quot;plugin.apk&quot;</span>;</span><br><span class=\"line\">        File filesDir = activity.getDir(<span class=\"string\">&quot;plugin&quot;</span>, activity.MODE_PRIVATE);</span><br><span class=\"line\">        String filePath = <span class=\"keyword\">new</span> File(filesDir, pluginName).getAbsolutePath();</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">            file.delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FileInputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileOutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//读取的目录</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            is = <span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory(), pluginName));</span><br><span class=\"line\">            <span class=\"comment\">//要输入的目录</span></span><br><span class=\"line\">            os = <span class=\"keyword\">new</span> FileOutputStream(filePath);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((len = is.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                os.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            File f = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f.exists()) &#123;</span><br><span class=\"line\">                Toast.makeText(activity, <span class=\"string\">&quot;dex overwrite&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            loadPathToPlugin(activity);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                os.close();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadPathToPlugin</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        File filesDir = activity.getDir(<span class=\"string\">&quot;plugin&quot;</span>, activity.MODE_PRIVATE);</span><br><span class=\"line\">        String name = <span class=\"string\">&quot;plugin.apk&quot;</span>;</span><br><span class=\"line\">        String path = <span class=\"keyword\">new</span> File(filesDir, name).getAbsolutePath();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//然后我们开始加载我们的apk 使用DexClassLoader</span></span><br><span class=\"line\">        File dexOutDir = activity.getDir(<span class=\"string\">&quot;dex&quot;</span>, activity.MODE_PRIVATE);</span><br><span class=\"line\">        loader = <span class=\"keyword\">new</span> DexClassLoader(path, dexOutDir.getAbsolutePath(), <span class=\"keyword\">null</span>, activity.getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过PackAgemanager 来获取插件的第一个activity是哪一个</span></span><br><span class=\"line\">        PackageManager packageManager = activity.getPackageManager();</span><br><span class=\"line\">        packageInfo = packageManager.getPackageArchiveInfo(path, PackageManager.GET_ACTIVITIES);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//然后开始加载我们的资源 肯定要使用Resource 但是它是AssetManager创建出来的 就是AssertManager 有一个addAssertPath 这个方法 但是私有的 所有使用反射</span></span><br><span class=\"line\">        Class&lt;?&gt; assetManagerClass = AssetManager.class;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            AssetManager assertManagerObj = (AssetManager) assetManagerClass.newInstance();</span><br><span class=\"line\">            Method addAssetPathMethod = assetManagerClass.getMethod(<span class=\"string\">&quot;addAssetPath&quot;</span>, String.class);</span><br><span class=\"line\">            addAssetPathMethod.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            addAssetPathMethod.invoke(assertManagerObj, path);</span><br><span class=\"line\">            <span class=\"comment\">//在创建一个Resource</span></span><br><span class=\"line\">            resources = <span class=\"keyword\">new</span> Resources(assertManagerObj, activity.getResources().getDisplayMetrics(), activity.getResources().getConfiguration());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对外提供插件的classLoader</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClassLoader <span class=\"title\">getClassLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//插件中的Resource</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Resources <span class=\"title\">getResource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resources;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在主App可以实现插件化功能了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载对应插件</span></span><br><span class=\"line\">HookManager.getInstance().loadPlugin(<span class=\"keyword\">this</span>)</span><br><span class=\"line\"><span class=\"comment\">// 通过跳到ProxyActivity 来模拟实现对应插件Activity</span></span><br><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ProxyActivity.class);<span class=\"comment\">//这里就是一个占坑的activity</span></span><br><span class=\"line\"><span class=\"comment\">//这里是拿到我们加载的插件的第一个activity的全类名</span></span><br><span class=\"line\">intent.putExtra(<span class=\"string\">&quot;ClassName&quot;</span>,HookManager.getInstance().packageInfo.activities[<span class=\"number\">0</span>].name);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<p>通过这种代理模拟方式也可以实现 Service、BroadcastReceiver、ContentProvider组件的代理</p>\n<h5 id=\"问题\">问题<a title=\"#问题\" href=\"#问题\"></a></h5>\n<p>注意事项：</p>\n<ul>\n<li>ProxyActivity中需要重写getResouces，getAssets，getClassLoader方法返回插件的相应对象。生命周期函数以及和用户交互相关函数，如onResume，onStop，onBackPressedon，KeyUponWindow，FocusChanged等需要转发给插件。</li>\n<li>PluginActivity中所有调用context的相关的方法，如setContentView，getLayoutInflater，getSystemService等都需要调用ProxyActivity的相应方法。</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>插件中的Activity必须继承PluginActivity，开发侵入性强。</li>\n<li>如果想支持Activity的singleTask，singleInstance等launchMode时，需要自己管理Activity栈，实现起来很繁琐。</li>\n<li>插件中需要小心处理Context，容易出错。</li>\n<li>如果想把之前的模块改造成插件需要很多额外的工作。</li>\n</ul>\n<p>该方式虽然能够很好的实现启动插件Activity的目的，但是由于开发式侵入性很强，dynamic-load-apk之后的插件化方案很少继续使用该方式，而是通过hook系统启动Activity的过程，让启动插件中的Activity像启动主工程的Activity一样简单。</p>\n<h4 id=\"动态替换方案：提供对android底层的各种类进行hook，来实现加载插件中的四大组件，以droidplugin框架为代表\">动态替换方案：提供对Android底层的各种类进行Hook，来实现加载插件中的四大组件，以DroidPlugin框架为代表<a title=\"#动态替换方案：提供对android底层的各种类进行hook，来实现加载插件中的四大组件，以droidplugin框架为代表\" href=\"#动态替换方案：提供对android底层的各种类进行hook，来实现加载插件中的四大组件，以droidplugin框架为代表\"></a></h4>\n<p>实现方案:</p>\n<ul>\n<li>Hook Instrument实现</li>\n<li>Hook Handler实现</li>\n</ul>\n<p>代码Demo:<a href=\"https://github.com/Onion99/AndroidComponentPlugin\" target=\"_blank\">Onion99/AndroidComponentPlugin: Android上简单实现四大组件的插件化</a><br>\n参考 : <a href=\"https://developer.aliyun.com/article/873723?spm=a2c6h.12883283.0.0.67d543078VqvHa&amp;scm=20140722.ID_873723.P_121.MO_938-ST_5186-V_1-ID_873723-OR_rec\" target=\"_blank\">Android Hook告诉你 如何启动未注册的Activity</a></p>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/71585d744076\" target=\"_blank\">Android插件化(一))</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/33017826\" target=\"_blank\">深入理解Android插件化技术 - 知乎 (zhihu.com)</a><br>\n<a href=\"https://blog.csdn.net/n_fly/article/details/113865650\" target=\"_blank\">Android插件化实现方案_安卓插件化</a></p>\n",
            "tags": [
                "黑科技"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/08/phzbEh3JEzAC0XwD/",
            "url": "https://onion99.github.io/2022/03/08/phzbEh3JEzAC0XwD/",
            "title": "Android黑科技 - 热修复",
            "date_published": "2022-03-07T22:38:05.000Z",
            "content_html": "<blockquote>\n<p>热修复本质就是将错误的代码替换成正确的代码,但这里的替换不是改写原有的代码,而是提供一份新的正确的代码,让应用运行时绕过错误的代码,从而执行正确的代码</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/06/bDtcIx.png\" alt=\"bDtcIx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<p>基础知识:</p>\n<ul>\n<li><a href=\"https://fullstackaction.com/pages/ccf9c0/#%E4%B8%80%E3%80%81dex-class-%E6%B5%85%E6%9E%90\" target=\"_blank\">热修复与插件化基础 - dex与class</a></li>\n<li><a href=\"https://fullstackaction.com/pages/1084c4/\" target=\"_blank\">热修复与插件化基础 - Java与Android虚拟机</a></li>\n<li><a href=\"https://fullstackaction.com/pages/a5eb80/\" target=\"_blank\">热修复与插件化基础 - Java与Android的类加载器</a></li>\n</ul>\n<h2 id=\"实现方案\">实现方案<a title=\"#实现方案\" href=\"#实现方案\"></a></h2>\n<h3 id=\"native层替换方案\">Native层替换方案<a title=\"#native层替换方案\" href=\"#native层替换方案\"></a></h3>\n<blockquote>\n<p>底层替换，修改java方法在native层的函数指针，指向修复后的方法以达到修复目的</p>\n</blockquote>\n<p>Android/Java代码的最小组织方式是方法（Method，实际上，每一个dex文件最多可以包含65536（0xffff）个方法），每个方法在ART虚拟机中都有一个ArtMethod结构体指针与之对应，ArtMethod结构体中包含了Java方法的所有信息，包括执行入口、访问权限、所属类和代码执行地址等等。换句话说，虚拟机就是通过ArtMethod结构体来操纵Java方法的。ArtMethod结构如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArtMethod</span> <span class=\"title\">FINAL</span> &#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  GcRoot&lt;mirror::Class&gt; declaring_class_;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::atomic&lt;std::<span class=\"keyword\">uint32_t</span>&gt; access_flags_;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Offset to the CodeItem.</span></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> dex_code_item_offset_;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Index into method_ids of the dex file associated with this method.</span></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> dex_method_index_;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> method_index_;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> hotness_count_;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PtrSizedFields</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// Depending on the method type, the data is</span></span><br><span class=\"line\">    <span class=\"comment\">//   - native method: pointer to the JNI function registered to this method</span></span><br><span class=\"line\">    <span class=\"comment\">//                    or a function to resolve the JNI function,</span></span><br><span class=\"line\">    <span class=\"comment\">//   - conflict method: ImtConflictTable,</span></span><br><span class=\"line\">    <span class=\"comment\">//   - abstract/interface method: the single-implementation if any,</span></span><br><span class=\"line\">    <span class=\"comment\">//   - proxy method: the original interface method or constructor,</span></span><br><span class=\"line\">    <span class=\"comment\">//   - other methods: the profiling data.</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span>* data_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Method dispatch from quick compiled code invokes this pointer which may cause bridging into</span></span><br><span class=\"line\">    <span class=\"comment\">// the interpreter.</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span>* entry_point_from_quick_compiled_code_;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  ptr_sized_fields_;</span><br><span class=\"line\">...</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>其中有一个关键指针，它是方法的执行入口：<br>\n<code>entry_point_from_quick_compiled_code_</code><br>\n也就是说，这个指针指向方法体编译后对应的汇编指令。那么，如果我们能hook这个指针，由原来指向有bug的方法，变成指向正确的方法，就达到了修复的目的。这就是native层替换方案的核心原理。具体实现方案可以是改变指针指向（AndFix），也可以直接替换整个结构体（Sophix）。</p>\n<p>需要注意的是，底层替换方案虽然是即使生效的，但是因为不会加载新类，而是直接修改原类，所以修改的代码不能增加新的方法，否则会造成索引数与方法数不匹配，无法通过索引找到正确方法，字段同理</p>\n<h3 id=\"类加载方案\">类加载方案<a title=\"#类加载方案\" href=\"#类加载方案\"></a></h3>\n<blockquote>\n<p>加载一个类的时候，都会去循环dexElements数组取出里面的dex文件，然后从dex文件中找目标类，只要目标类找到，则直接退出循环，也就是后面的dex文件就没有被取到的机会。将热修复的类放在dexElements[]的最前面，这样加载类时 <strong>会优先加载到要修复的类</strong>以达到修复目的</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/06/bDduwj.png\" alt=\"bDduwj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>基于jvm的java应用是通过ClassLoader来加载应用中的class的，Android对JVM优化过，使用的是ART(以前是Dalvik)，class文件会被打包进dex文件中，底层虚拟机有所不同，那么它们的类加载器也会有所区别，在Android中，要加载dex文件中的class文件就需要用到 PathClassLoader 或 DexClassLoader 这两个Android专用的类加载器。</p>\n<p><img src=\"https://s1.ax1x.com/2022/03/07/bsEKiR.png\" alt=\"bsEKiR.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"原理\">原理<a title=\"#原理\" href=\"#原理\"></a></h4>\n<p><img src=\"https://s1.ax1x.com/2022/03/07/bsdsXT.png\" alt=\"bsdsXT.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"生成修复dex\">生成修复Dex<a title=\"#生成修复dex\" href=\"#生成修复dex\"></a></h4>\n<p>1.将出bug的类修改正确，然后执行打包流程  <a href=\"https://imgtu.com/i/bsNkSf\" target=\"_blank\"><img src=\"https://s1.ax1x.com/2022/03/07/bsNkSf.png\" alt=\"bsNkSf.png\" loading=\"lazy\"></a></p>\n<p>2.此时取出工程目录下的/build/intermediates/javac/debug/classes/包路径/文件夹下对应的class文件</p>\n<p>3.在复制这个class文件时，需要把它所在的完整包目录一起复制，然后在命令行下cd到该目录，执行<code>dx --dex --output=patch.dex 包名路径/需要修复的类文件</code>,此时会在当前目录下生成patch.dex文件  <a href=\"https://imgtu.com/i/bsNQf0\" target=\"_blank\"><img src=\"https://s1.ax1x.com/2022/03/07/bsNQf0.png\" alt=\"bsNQf0.png\" loading=\"lazy\"></a></p>\n<p>4.然后将patch.dex文件当成补丁包放入资源文件夹raw下即可。</p>\n<p>指令为：dx --dex --output=patch.dex com/xxx/xxx/fixbug.class -&gt; 生成patch.dex文件</p>\n<p>也可以写成：dx --dex --output=patch.jar com/xxx/xxx/fixbug.class -&gt; 生成patch.jar文件</p>\n<p>ClassLoader可以加载.dex文件，或者.zip、.jar、.apk中包含的.dex文件</p>\n<h4 id=\"实践\">实践<a title=\"#实践\" href=\"#实践\"></a></h4>\n<p>Application:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 之所以要在本类中做补丁包的安装是因为怕如果在后面的流程中做安装会造成有些带bug的类如果已经被系统加载的话，后续补丁包安装之后</span></span><br><span class=\"line\"><span class=\"comment\"> * 补丁包中的类得不到执行，因为类加载有缓存机制，系统会将加载过的类做一份内存缓存。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        <span class=\"comment\">// 此处为加载补丁包，其实真实应用场景是从服务端下载补丁文件，因为本工程为示例所以直接将其放在raw资源文件目录下去读取，省去了下载过程</span></span><br><span class=\"line\">        File patchFile = <span class=\"keyword\">new</span> File(getCacheDir().getAbsolutePath() + File.separator + <span class=\"string\">&quot;patch.dex&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 为了高版本Android访问外部存储需要分区等问题，因为此处仅做示例讲解所以就直接将包拷贝到私有目录中</span></span><br><span class=\"line\">            <span class=\"comment\">// 拷贝到私有目录中还有一个好处是避免在补丁包安装过程中包文件被删除造成安装失败</span></span><br><span class=\"line\">            copyFile(patchFile);</span><br><span class=\"line\">            <span class=\"comment\">// 安装补丁包</span></span><br><span class=\"line\">            HotFix.installPatch(<span class=\"keyword\">this</span>, patchFile);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        InputStream input = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream output = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 由于本项目是测试功能，所以这里直接将补丁包放在工程内，真实开发环境中应该是放在服务器然后下载下来</span></span><br><span class=\"line\">            input = getResources().openRawResource(R.raw.patch);</span><br><span class=\"line\">            output = <span class=\"keyword\">new</span> FileOutputStream(dest);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> bytesRead;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((bytesRead = input.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                output.write(buf, <span class=\"number\">0</span>, bytesRead);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            input.close();</span><br><span class=\"line\">            output.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HotFix.installPatch:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HotFix</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">installPatch</span><span class=\"params\">(Application application, File patch)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (patch == <span class=\"keyword\">null</span> || !patch.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 1.获取当前的类加载器z</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            ClassLoader classLoader = application.getClassLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 2.获取到dexElements属性以便后续向前追加patch.dex</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            Field pathListField = ReflectUtils.findField(classLoader, <span class=\"string\">&quot;pathList&quot;</span>);</span><br><span class=\"line\">            Object pathList = pathListField.get(classLoader);</span><br><span class=\"line\">            Field dexElementsField = ReflectUtils.findField(pathList, <span class=\"string\">&quot;dexElements&quot;</span>);</span><br><span class=\"line\">            Object[] dexElements = (Object[]) dexElementsField.get(pathList);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 3.通过反射调用DexPathList类中的makePathElements()方法将patch.dex最终转换为Element[]数组，</span></span><br><span class=\"line\"><span class=\"comment\">             * DexPathList一系列方法都是用来将补丁包转换为Element[]数组的，如makePathElements，makeDexElements..</span></span><br><span class=\"line\"><span class=\"comment\">             * 具体的API根据真实API的版本不同方法参数等可能会有出入，所以这里在使用过程中实际上应该通过判断去兼容各个版本，</span></span><br><span class=\"line\"><span class=\"comment\">             * 此处因为是示例所以没做兼容</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            List&lt;File&gt; files = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            files.add(patch);</span><br><span class=\"line\">            Method method = ReflectUtils.findMethod(pathList, <span class=\"string\">&quot;makePathElements&quot;</span>, List.class, File.class, List.class);</span><br><span class=\"line\">            ArrayList&lt;IOException&gt; suppressedExceptions = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            Object[] patchElements = (Object[]) method.invoke(pathList, files, application.getCacheDir(), suppressedExceptions);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 4.合并patchElements+dexElements,将补丁包的.dex文件插入数组最前面，后续在加载类的时候会优先从第一个开始遍历查找类</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            Object[] newElements = (Object[]) Array.newInstance(dexElements.getClass().getComponentType(), dexElements.length + patchElements.length);</span><br><span class=\"line\">            System.arraycopy(patchElements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, patchElements.length);</span><br><span class=\"line\">            System.arraycopy(dexElements, <span class=\"number\">0</span>, newElements, patchElements.length, dexElements.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 5.将新数组置换掉BaseDexClassLoader -&gt; pathList -&gt; dexElements属性，至此工作完成</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            dexElementsField.set(pathList, newElements);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 找到反射属性 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Field <span class=\"title\">findField</span><span class=\"params\">(Object instance, String name)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; clz = instance.getClass();</span><br><span class=\"line\">        Field field = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (clz != Object.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                field = clz.getDeclaredField(name);</span><br><span class=\"line\">                field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//向父类寻找属性</span></span><br><span class=\"line\">            clz = clz.getSuperclass();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> field;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 找到反射函数 **/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Method <span class=\"title\">findMethod</span><span class=\"params\">(Object instance, String name, Class&lt;?&gt;... parameterTypes)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;?&gt; clz = instance.getClass();</span><br><span class=\"line\">        Method method = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (clz != Object.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                method = clz.getDeclaredMethod(name, parameterTypes);</span><br><span class=\"line\">                method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> method;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//向父类寻找属性</span></span><br><span class=\"line\">            clz = clz.getSuperclass();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 找到反射所有函数数组 **/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Method[] findAllMethods(Object instance) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; clz = instance.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clz.getDeclaredMethods();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上，类替换方案的核心思想就是：将修改后的patch（包含bug类文件）打包成dex文件，然后hook ClassLoader加载流程，将这个dex文件插入到Element数组的第一个元素。因为加载类是依次进行的，所以虚拟机从第一个Element找到类后，就不会再加载bug类了。</p>\n<p>类加载方案也有缺点，因为类加载后无法卸载，所以类加载方案必须重启App，让bug类重新加载后才能生效</p>\n<h3 id=\"instant-run方案\">Instant Run方案<a title=\"#instant-run方案\" href=\"#instant-run方案\"></a></h3>\n<blockquote>\n<p>Instant Run 方案的核心思想是——插桩，在编译时通过插桩在每一个方法中插入代码，修改代码逻辑，在需要时绕过错误方法，调用patch类的正确方法</p>\n</blockquote>\n<p>首先，在编译时Instant Run为每个类插入IncrementalChange变量：<br>\n<code>IncrementalChange  $change;</code></p>\n<p>为每一个方法添加类似如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        IncrementalChange var2 = $change;</span><br><span class=\"line\">        <span class=\"comment\">//$change不为null，表示该类有修改，需要重定向</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(var2 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过access$dispatch方法跳转到patch类的正确方法</span></span><br><span class=\"line\">            var2.access$dispatch(<span class=\"string\">&quot;onCreate.(Landroid/os/Bundle;)V&quot;</span>, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">this</span>, savedInstanceState&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setContentView(<span class=\"number\">2130968601</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tv = (TextView)<span class=\"keyword\">this</span>.findViewById(<span class=\"number\">2131492944</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码，当一个类被修改后，Instant Run会为这个类新建一个类，命名为xxx&amp;override，且实现IncrementalChange接口，并且赋值给原类的$change变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span>$<span class=\"title\">override</span> <span class=\"keyword\">implements</span> <span class=\"title\">IncrementalChange</span> </span>&#123;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>此时，在运行时原类中每个方法的var2 != null，通过accessdispatch（参数是方法名和原参数）定位到patch类MainActivityoverride中修改后的方法。</p>\n<p>Instant Run是google在AS2.0时用来实现“热部署”的，同时也为“热修复”提供了一个绝佳的思路。美团的Robust就是基于此。</p>\n<h3 id=\"so库修复\">SO库修复<a title=\"#so库修复\" href=\"#so库修复\"></a></h3>\n<h4 id=\"接口调用替换\">接口调用替换<a title=\"#接口调用替换\" href=\"#接口调用替换\"></a></h4>\n<p>sdk提供接口替换System默认加载so库的接口</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SOPatchManger.loadLibrary(String libName)</span><br><span class=\"line\"><span class=\"comment\">//代替</span></span><br><span class=\"line\">System.loadLibrary(String libName)</span><br></pre></td></tr></table></figure>\n<p>SOPatchManger.loadLibrary接口加载so库的时候优先尝试去加载sdk指定目录下补丁的so。若不存在，则再去加载安装apk目录下的so库</p>\n<p>优点：不需要对不同sdk版本进行兼容，所以sdk版本都是System.loadLibrary这个接口<br>\n缺点：需要侵入业务代码，替换掉System默认加载so库的接口</p>\n<h4 id=\"反射注入\">反射注入<a title=\"#反射注入\" href=\"#反射注入\"></a></h4>\n<p>采取类似类修复反射注入方式，只要把补丁so库的路径插入到nativeLibraryDirectories数组的最前面，就能够达到加载so库的时候是补丁so库而不是原来so库的目录，从而达到修复。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">findLibrary</span>(<span class=\"params\"><span class=\"built_in\">String</span> libraryName</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> fileName = System.mapLibraryName(libraryName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (NativeLibraryElement element : nativeLibraryPathElements) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">String</span> path = element.findNativeLibrary(fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>优点：不需侵入用户接口调用<br>\n缺点：需要做版本兼容控制，兼容性较差</p>\n<h2 id=\"热修复技术方案选型\">热修复技术方案选型<a title=\"#热修复技术方案选型\" href=\"#热修复技术方案选型\"></a></h2>\n<p><img src=\"https://s1.ax1x.com/2022/03/06/bDwH8x.png\" alt=\"bDwH8x.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"热修复和插件化区别\">热修复和插件化区别<a title=\"#热修复和插件化区别\" href=\"#热修复和插件化区别\"></a></h2>\n<blockquote>\n<p>插件化和热修复的原理，都是动态加载 dex／apk 中的类／资源，让宿主正常的加载和运行插件（补丁）中的内容</p>\n</blockquote>\n<ul>\n<li>\n<p>插件化目标是想把需要实现的模块或功能当做一个独立的提取出来，减少宿主的规模。重在解决组件的生命周期，以及资源的问题</p>\n</li>\n<li>\n<p>热修复目标在修复已有的问题。重在解决替换已有的有问题的类／方法／资源等</p>\n</li>\n</ul>\n<h2 id=\"deemo\">Deemo<a title=\"#deemo\" href=\"#deemo\"></a></h2>\n<p><a href=\"https://github.com/jiangzhengnan/Syringe\" target=\"_blank\">jiangzhengnan/Syringe: 📌 插件化注入工程(热修复+插件化)</a></p>\n<h2 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h2>\n<p><a href=\"https://www.jianshu.com/p/cb1f0702d59f\" target=\"_blank\">热修复——深入浅出原理与实现</a><br>\n<a href=\"https://www.cnblogs.com/not2/p/11392733.html\" target=\"_blank\">热修复 - 西贝雪</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/109169752\" target=\"_blank\">Android热修复技术,你会怎么选？</a><br>\n<a href=\"https://github.com/BigSweet/hotFixALL\" target=\"_blank\">BigSweet/hotFixALL: 整理andfix,thinker,robust热修复使用方法和原理</a><br>\n<a href=\"https://github.com/yoyiyi/SoleilNotes/blob/master/Android/%E7%83%AD%E4%BF%AE%E5%A4%8D.md\" target=\"_blank\">SoleilNotes/热修复.md at master · yoyiyi/SoleilNotes</a></p>\n",
            "tags": [
                "黑科技"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/08/ukYPIjylHjywfytF/",
            "url": "https://onion99.github.io/2022/03/08/ukYPIjylHjywfytF/",
            "title": "Android黑科技 - 热修复和插件化基础",
            "date_published": "2022-03-07T22:31:41.000Z",
            "content_html": "<h3 id=\"dalvik和-art\">Dalvik和 ART<a title=\"#dalvik和-art\" href=\"#dalvik和-art\"></a></h3>\n<p>DVM也是实现了JVM规范的一个虚拟器，默认使用CMS垃圾回收器，但是与JVM运行 Class 字节码不同，DVM 执行 Dex(Dalvik Executable Format) ——专为 Dalvik 设计的一种压缩格式。Dex 文件是很多 .class 文件处理压缩后的产物，最终可以在 Android 运行时环境执行。</p>\n<span id=\"more\"></span>\n<p>ART（Android Runtime） 是在 Android 4.4 中引入的一个开发者选项，也是 Android 5.0 及更高版本的默认 Android 运行时。</p>\n<p>ART 和 Dalvik 都是运行 Dex 字节码的兼容运行时，因此针对 Dalvik 开发的应用也能在 ART 环境中运作。</p>\n<p>Dalvik和 ART编译区别<br>\n<img src=\"https://s1.ax1x.com/2022/03/07/bydjWn.png\" alt=\"bydjWn.png\" loading=\"lazy\"></p>\n<p><a href=\"https://source.android.google.cn/devices/tech/dalvik/gc-debug\" target=\"_blank\">source.android.google.cn/devices/tec…</a></p>\n<p>dexopt与dexaot区别:</p>\n<ul>\n<li>dexopt<br>\n在Dalvik中虚拟机在加载一个dex文件时，对 dex 文件 进行 验证 和 优化的操作，其对 dex 文件的优化结果变成了 odex(Optimized dex) 文件，这个文件和 dex 文件很像，只是使用了一些优化操作码。</li>\n<li>dex2oat<br>\nART 预先编译机制，在安装时对 dex 文件执行dexopt优化之后再将odex进行 AOT 提前编译操作，编译为OAT（实际上是ELF文件）可执行文件（机器码）。（相比做过ODEX优化，未做过优化的DEX转换成OAT要花费更长的时间）</li>\n</ul>\n<h3 id=\"类加载\">类加载<a title=\"#类加载\" href=\"#类加载\"></a></h3>\n<blockquote>\n<p>任何一个 Java 程序都是由一个或多个 class 文件组成，在程序运行时，需要将 class 文件加载到 JVM 中才可以使用，负责加载这些 class 文件的就是 Java 的类加载机制。</p>\n</blockquote>\n<p>Android中常用的有两种类加载器，DexClassLoader和PathClassLoader，它们都继承于BaseDexClassLoader。相关源码如下：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-43a7045200722c1aea24966765f82570_720w.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>区别在于调用父类构造器时，DexClassLoader多传了一个optimizedDirectory参数，这个目录必须是内部存储路径，用来缓存系统创建的Dex文件。而PathClassLoader该参数为null，只能加载内部存储目录的Dex文件。所以我们可以用DexClassLoader去加载外部的apk，用法如下：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-280d8e49c4b6aab388bc1f8b906f13f2_720w.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h4>\n<p><a href=\"https://juejin.cn/post/7018534681620512805\" target=\"_blank\">Android 热修复核心原理，ClassLoader类加载 </a><br>\n<a href=\"https://blog.csdn.net/qq_35090026/article/details/122909541#:~:text=Android%E4%B8%AD%E7%9A%84ClassLoader%E7%B1%BB%E5%9E%8B%E5%88%86%E5%88%AB%E6%98%AF%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E5%99%A8%E3%80%82%20%E5%85%B6%E4%B8%AD%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%BB%E8%A6%81%E5%8C%85%E6%8B%AC3%E7%A7%8D%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%20BootClassLoader%20%E3%80%81,PathClassLoader%20%E5%92%8C%20DexClassLoader%20%E3%80%82\" target=\"_blank\">Android ClassLoader类加载机制</a><br>\n<a href=\"https://blog.csdn.net/qq_32506429/article/details/122783941\" target=\"_blank\">Android ClassLoader机制与热修复</a><br>\n<a href=\"https://blog.csdn.net/xiangzhihong8/article/details/52880327\" target=\"_blank\">Android ClassLoader详解</a></p>\n<h3 id=\"双亲委托机制\">双亲委托机制<a title=\"#双亲委托机制\" href=\"#双亲委托机制\"></a></h3>\n<p>ClassLoader调用loadClass方法加载类，代码如下：</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-20dca70a7fca2413de158563cb7d27d1_720w.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>可以看出ClassLoader加载类时，先查看自身是否已经加载过该类，如果没有加载过会首先让父加载器去加载，如果父加载器无法加载该类时才会调用自身的findClass方法加载，该机制很大程度上避免了类的重复加载。</p>\n<h3 id=\"dexclassloader的dexpathlist\">DexClassLoader的DexPathList<a title=\"#dexclassloader的dexpathlist\" href=\"#dexclassloader的dexpathlist\"></a></h3>\n<blockquote>\n<p>DexPathList是在构造DexClassLoader时生成的，其内部包含了DexFile</p>\n</blockquote>\n<p><img src=\"https://s1.ax1x.com/2022/03/07/by01BT.png\" alt=\"by01BT.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>DexPathList的loadClass会去遍历DexFile直到找到需要加载的类。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ddf43519948c3b9ab3f15ff19cf77dfe_720w.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>腾讯的qq空间热修复技术正是利用了DexClassLoader的加载机制，将需要替换的类添加到dexElements的前面，这样系统会使用先找到的修复过的类。</p>\n<h3 id=\"资源加载\">资源加载<a title=\"#资源加载\" href=\"#资源加载\"></a></h3>\n<p>Android系统通过Resource对象加载资源，下面代码展示了该对象的生成过程。</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-ab6ea5aad79904422d2fa7d8bc87a64c_720w.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>因此，只要将插件apk的路径加入到AssetManager中，便能够实现对插件资源的访问。</p>\n<p>具体实现时，由于AssetManager并不是一个public的类，需要通过反射去创建，并且部分Rom对创建的Resource类进行了修改，所以需要考虑不同Rom的兼容性。</p>\n<h3 id=\"refer-1\">Refer<a title=\"#refer-1\" href=\"#refer-1\"></a></h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33017826\" target=\"_blank\">深入理解Android插件化技术 </a></p>\n",
            "tags": [
                "黑科技"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/03/p2ie22dC9NcVwpEH/",
            "url": "https://onion99.github.io/2022/03/03/p2ie22dC9NcVwpEH/",
            "title": "源码学习 - LiveData",
            "date_published": "2022-03-02T17:47:39.000Z",
            "content_html": "<blockquote>\n<p><a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\" target=\"_blank\"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"优点\">优点<a title=\"#优点\" href=\"#优点\"></a></h3>\n<ul>\n<li>确保界面符合数据状态\n<ul>\n<li>LiveData 遵循观察者模式。当底层数据发生变化时，LiveData 会通知 Observer 对象。您可以整合代码以在这些 Observer 对象中更新界面。这样一来，您无需在每次应用数据发生变化时更新界面，因为观察者会替您完成更新。</li>\n</ul>\n</li>\n<li>不会发生内存泄漏\n<ul>\n<li>观察者会绑定到 Lifecycle 对象，并在其关联的生命周期遭到销毁后进行自我清理。</li>\n</ul>\n</li>\n<li>不会因 Activity 停止而导致崩溃\n<ul>\n<li>如果观察者的生命周期处于非活跃状态（如返回栈中的 Activity），则它不会接收任何 LiveData 事件。</li>\n</ul>\n</li>\n<li>不再需要手动处理生命周期\n<ul>\n<li>界面组件只是观察相关数据，不会停止或恢复观察。LiveData 将自动管理所有这些操作，因为它在观察时可以感知相关的生命周期状态变化。</li>\n</ul>\n</li>\n<li>数据始终保持最新状态\n<ul>\n<li>如果生命周期变为非活跃状态，它会在再次变为活跃状态时接收最新的数据。例如，曾经在后台的 Activity 会在返回前台后立即接收最新的数据。</li>\n</ul>\n</li>\n<li>适当的配置更改\n<ul>\n<li>如果由于配置更改（如设备旋转）而重新创建了 Activity 或 Fragment，它会立即接收最新的可用数据。</li>\n</ul>\n</li>\n<li>共享资源\n<ul>\n<li>您可以使用单例模式扩展 LiveData 对象以封装系统服务，以便在应用中共享它们。LiveData 对象连接到系统服务一次，然后需要相应资源的任何观察者只需观察 LiveData 对象。如需了解详情，请参阅扩展 LiveData。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h3>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailVideModel</span> : <span class=\"type\">ViewModel &#123;</span></span></span><br><span class=\"line\">\t  <span class=\"keyword\">val</span> getTopTabLiveData <span class=\"keyword\">by</span> lazy &#123;  MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaDetailsActivity</span> : <span class=\"type\">BaseActivity</span></span>()&#123;</span><br><span class=\"line\">\t  viewModel.getTopTabLiveData.observe(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">\t       <span class=\"comment\">// do some thing    </span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>![I8k2xH.png](<a href=\"https://z3.ax1x.com/2021/11/08/I8k2xH.png\">https://z3.ax1x.com/2021/11/08/I8k2xH.png</a> =100x100)</p>\n<h3 id=\"observer()做了什么\">observer()做了什么<a title=\"#observer()做了什么\" href=\"#observer()做了什么\"></a></h3>\n<blockquote>\n<p>将指定事件跟生命周期绑定</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 在给定所有者的生命周期内将给定的观察者添加到观察者列表中。 */</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, <span class=\"meta\">@NonNull</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">&quot;observe&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断生命周期为销毁,则忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 实例一个新的生命周期绑定观察者</span></span><br><span class=\"line\">        LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否之前已经赋值,来防止有煞笔重复调用,专治代码水土不服</span></span><br><span class=\"line\">        ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 注意看LifecycleBoundObserver.isAttachedTo()</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果之前已经赋值但又有煞笔在不同LifecycleOwner(生命周期管理者)中调用,话不多说,直接给crash,google就是牛逼</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot add the same observer&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; with different lifecycles&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已经赋值且上面煞笔处理没问题,就不再做处理了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 看到了没有,核心啊,精髓啊,给当前LifecycleOwner加入Observer(观察者),在生命周期各个阶段响应事件</span></span><br><span class=\"line\">        owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;   </span><br></pre></td></tr></table></figure>\n<p>看看mObservers.putIfAbsent:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* LinkedList，它伪装成一个Map并支持在迭代期间进行修改。它不是线程安全的 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeIterableMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果指定的键尚未与值关联，则将其与给定值关联,返回与指定键关联的前一个值，如果该键没有映射，则null */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">putIfAbsent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> K key, <span class=\"meta\">@NonNull</span> V v)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;K, V&gt; entry = get(key);</span><br><span class=\"line\">        <span class=\"comment\">// 如果给定的值已经存在,则返回值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> entry.mValue;</span><br><span class=\"line\">        <span class=\"comment\">// 否则存进去,真似厉害啊</span></span><br><span class=\"line\">        put(key, v);</span><br><span class=\"line\">        <span class=\"comment\">// 返回代表之前不存在的null值,这就是理解有木有 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;   </span><br></pre></td></tr></table></figure>\n<p>看看LifecycleBoundObserver :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ObserverWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">LifecycleEventObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"comment\">// 生命周期管理者</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> LifecycleOwner mOwner;</span><br><span class=\"line\">    <span class=\"comment\">// 看到这里没,直接赋值了,有什么好说的</span></span><br><span class=\"line\">    LifecycleBoundObserver(<span class=\"meta\">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(observer);</span><br><span class=\"line\">        mOwner = owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有点意思,这里判断是否处在活跃状态,就可以他妈的做正确的生命周期回调响应</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">        <span class=\"comment\">// 若生命周期已为销毁状态, 则移除 observer, 避免内存泄露</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentState == DESTROYED) &#123;</span><br><span class=\"line\">            removeObserver(mObserver);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Lifecycle.State prevState = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (prevState != currentState) &#123;</span><br><span class=\"line\">            prevState = currentState;</span><br><span class=\"line\">            activeStateChanged(shouldBeActive());</span><br><span class=\"line\">            currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断两个生命周期管理者是否为同一个</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAttachedTo</span><span class=\"params\">(LifecycleOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mOwner == owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">detachObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOwner.getLifecycle().removeObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了到这LiveData.observe()已经观察完毕了,到看看LiveData.postValue()了,<br>\n别说,google还是有点讲究的,看看这个官方提示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liveData.postValue(<span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">// 异步传值</span></span><br><span class=\"line\">liveData.setValue(<span class=\"string\">&quot;b&quot;</span>); <span class=\"comment\">//同步传值</span></span><br><span class=\"line\"><span class=\"comment\">// 结果: 值“b”将首先设置，然后主线程将用值“a”覆盖它。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在此主线程执行postValue()之前多次调用postValue()，则只会调度最后一个值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"postvalue()做了什么\">postValue()做了什么<a title=\"#postvalue()做了什么\" href=\"#postvalue()做了什么\"></a></h3>\n<blockquote>\n<p>他妈的,还能做什么,就是传值啊,这还用说的文章到此结束了,不会吧,不会吧,异步传值得注意处理多线程下的共享变量问题呢</p>\n</blockquote>\n<p>![I8mrdA.png](<a href=\"https://z3.ax1x.com/2021/11/08/I8mrdA.png\">https://z3.ax1x.com/2021/11/08/I8mrdA.png</a> =100x100)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">   <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 判断之前是否已经赋值过了</span></span><br><span class=\"line\">     postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">     <span class=\"comment\">// 给mPendingData赋值 </span></span><br><span class=\"line\">     mPendingData = value;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 看到没有,他妈的,之前已经赋值就return了,好气哦,干嘛这样呢</span></span><br><span class=\"line\">   <span class=\"comment\">// 嘿,看下mPostValueRunnable没有,他就是防止煞笔多线程下多次赋相同值做的</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!postTask) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 把传值线程放到主线程执行</span></span><br><span class=\"line\">   ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 未赋值状态</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NOT_SET = <span class=\"keyword\">new</span> Object()</span><br><span class=\"line\"><span class=\"comment\">// 默认就是未赋值状态</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> Object mPendingData = NOT_SET</span><br><span class=\"line\"><span class=\"comment\">// 传值线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 看到没有,真正传值都是通过newValue来传的好不好</span></span><br><span class=\"line\">    Object newValue;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">      newValue = mPendingData;</span><br><span class=\"line\">      <span class=\"comment\">// 嘿嘿,这里回归默认未赋值状态了</span></span><br><span class=\"line\">      mPendingData = NOT_SET;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最终还是调到setValue啊,果然啊,条条道路通setValue啊</span></span><br><span class=\"line\">    setValue((T) newValue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"setvalue()\">setValue()<a title=\"#setvalue()\" href=\"#setvalue()\"></a></h3>\n<blockquote>\n<blockquote>\n<p>有什么好说的,其他的一枪秒了,我才是传输数据的核心代码好不好,屁,dispatchingValue才是</p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置传输数据。 如果有活跃的ObserverWrapper(观察者)，值将被分发给他们。    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  assertMainThread(<span class=\"string\">&quot;setValue&quot;</span>);</span><br><span class=\"line\">  mVersion++;</span><br><span class=\"line\">  mData = value;</span><br><span class=\"line\">  dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class=\"comment\">/* synthetic access */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断事件分发是否已经在执行,是则打断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 事件分发开始</span></span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        <span class=\"comment\">// 事件分发结束</span></span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果生命周期管理者已经销毁,则忽略</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.mActive) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在分发之前检查下最先状态,如果不在活跃阶段,则不改变状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断version , 因为从上面来看,每次赋值version都会变得</span></span><br><span class=\"line\">        <span class=\"comment\">// 他妈的的,这样就不会陷入多次分发,保证只取最先的传值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.mLastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">// 执行每个生命周期管理者的观察者的事件分发</span></span><br><span class=\"line\">        observer.mObserver.onChanged((T) mData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>get到没有?<br>\n<img src=\"https://z3.ax1x.com/2021/11/08/I8YNWQ.png\" alt=\"I8YNWQ.png\" loading=\"lazy\">]</p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2022/03/02/uVaapTCHAYrYDaHP/",
            "url": "https://onion99.github.io/2022/03/02/uVaapTCHAYrYDaHP/",
            "title": "源码学习 - Lifecycle",
            "date_published": "2022-03-01T17:33:23.000Z",
            "content_html": "<blockquote>\n<p>Jetpack Lifecycle 提供了可用于构建生命周期感知型组件的类和接口,从而根据 Activity 或 Fragment 的当前生命周期状态自动调整其行为,记住我们要解析的是Jet Pack Lifecycle ,而不是 原有Activity/Fragment的生命周期流程</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><img src=\"https://s4.ax1x.com/2022/03/01/blNKTx.png\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h3>\n<h4 id=\"通过-defaultlifecycleobserver-实现\">通过 DefaultLifecycleObserver 实现<a title=\"#通过-defaultlifecycleobserver-实现\" href=\"#通过-defaultlifecycleobserver-实现\"></a></h4>\n<blockquote>\n<p>类可以通过实现 DefaultLifecycleObserver 并替换相应的方法（如 onCreate 和 onStart 等）来监控组件的生命周期状态。然后，您可以通过调用 Lifecycle 类的 addObserver() 方法并传递观察器的实例来添加观察器</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建生命周期感知型组件</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver</span> : <span class=\"type\">DefaultLifecycleObserver &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        connect() <span class=\"comment\">// 在页面 onResume 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        disconnect() <span class=\"comment\">// 在页面 onStop 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 添加生命周期观察器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(...)</span></span> &#123;</span><br><span class=\"line\">\t    myLifecycleOwner.getLifecycle().addObserver(MyObserver())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过注解实现licecycle-observer\">通过注解实现Licecycle Observer<a title=\"#通过注解实现licecycle-observer\" href=\"#通过注解实现licecycle-observer\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILifecycleObserver</span> : <span class=\"type\">LifecycleObserver &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_ANY)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObserver</span> : <span class=\"type\">ILifecycleObserver &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStart</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onResume</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        connect() <span class=\"comment\">// 在页面 onResume 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPause</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;</span><br><span class=\"line\">        disconnect() <span class=\"comment\">// 在页面 onStop 时连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onStop</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>)</span></span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLifecycleChanged</span><span class=\"params\">(owner: <span class=\"type\">LifecycleOwner</span>, event: <span class=\"type\">Lifecycle</span>.<span class=\"type\">Event</span>)</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h3>\n<h4 id=\"class组成\">Class组成<a title=\"#class组成\" href=\"#class组成\"></a></h4>\n<ol>\n<li>首先我们得知道Activity/Fragment是如何实现LifecycleOwner的</li>\n</ol>\n<p>LifecycleOwner:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到Fragment 和Activity都实现了相关的LifecycleOwner接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComponentCallbacks</span>, <span class=\"title\">OnCreateContextMenuListener</span>, <span class=\"title\">LifecycleOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>, <span class=\"title\">HasDefaultViewModelProviderFactory</span>, <span class=\"title\">SavedStateRegistryOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ActivityResultCaller</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleRegistry mLifecycleRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ContextAware</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">LifecycleOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">SavedStateRegistryOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">OnBackPressedDispatcherOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ActivityResultRegistryOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ActivityResultCaller</span> </span>&#123;&#125; </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>明确LifecycleRegistry主要作用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义一个具有 Android 生命周期的对象 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleObserver observer)</span></span>;</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleObserver observer)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期事件,表明已被分发的生命周期事件,映射到Activity和Fragment中的回调事件 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Event</span> </span>&#123;</span><br><span class=\"line\">        ON_CREATE,ON_START,ON_RESUME,ON_PAUSE,ON_STOP,ON_DESTROY,ON_ANY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期状态,表明组件的当前状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">        DESTROYED,INITIALIZED,CREATED,STARTED,RESUMED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可以处理多个Observer的Lifecycle实现,Fragment和Activity使用 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> LifecycleOwner provider, <span class=\"keyword\">boolean</span> enforceMainThread)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">        mEnforceMainThread = enforceMainThread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>到这里我们就可以大致这么认为了, LifecycleOwner 通过获取当前对应的 LifecycleRegistry  管理多个LicecycleObserver,然后在生命周期状态发生变化时,处理不同状态事件的分放</li>\n</ol>\n<h4 id=\"activity-是如何实现jetpack-lifecycle事件分放的?\">Activity 是如何实现Jetpack Lifecycle事件分放的?<a title=\"#activity-是如何实现jetpack-lifecycle事件分放的?\" href=\"#activity-是如何实现jetpack-lifecycle事件分放的?\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> androidx.core.app;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"title\">extends</span> <span class=\"title\">Activity</span> <span class=\"title\">implements</span> <span class=\"title\">LifecycleOwner</span>,<span class=\"type\">KeyEventDispatcher.Component &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(<span class=\"keyword\">this</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> void onCreate(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ReportFragment.injectIfNeededIn(<span class=\"keyword\">this</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Lifecycle getLifecycle() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry; <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意看ReportFragment:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String REPORT_FRAGMENT_TAG = <span class=\"string\">&quot;androidx.lifecycle&quot;</span></span><br><span class=\"line\">            + <span class=\"string\">&quot;.LifecycleDispatcher.report_fragment_tag&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectIfNeededIn</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">29</span>) &#123;</span><br><span class=\"line\">         activity.registerActivityLifecycleCallbacks(<span class=\"keyword\">new</span> LifecycleCallbacks());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            manager.beginTransaction().add(<span class=\"keyword\">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class=\"line\">            <span class=\"comment\">// Hopefully, we are the first to make a transaction.</span></span><br><span class=\"line\">            manager.executePendingTransactions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity, <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//已经被标注为@Deprecated</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> ReportFragment <span class=\"title\">get</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (ReportFragment) activity.getFragmentManager().findFragmentByTag(</span><br><span class=\"line\">                REPORT_FRAGMENT_TAG);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        dispatchCreate(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">        dispatchStart(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">        dispatchResume(mProcessListener);</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        <span class=\"comment\">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class=\"line\">        mProcessListener = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &lt; <span class=\"number\">29</span>) &#123;</span><br><span class=\"line\">            dispatch(getActivity(), event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//API29及以上直接使用Application.ActivityLifecycleCallbacks来监听生命周期</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleCallbacks</span> <span class=\"keyword\">implements</span> <span class=\"title\">Application</span>.<span class=\"title\">ActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@Nullable</span> Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPostCreated</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_CREATE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStarted</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPostStarted</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_START);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResumed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPostResumed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_RESUME);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPrePaused</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_PAUSE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPreStopped</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_STOP);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"meta\">@NonNull</span> Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPreDestroyed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">            dispatch(activity, Lifecycle.Event.ON_DESTROY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过一个透明的Fragment来分发生命周期事件，这样对于Activity来说是无侵入的。分成两部分逻辑：</p>\n<ul>\n<li>当API&gt;=29时，直接使用Application.ActivityLifecycleCallbacks来分发生命周期事件</li>\n<li>而当API&lt;29时，在Fragment的生命周期回调中进行了事件分发。<br>\n但殊途同归，两者最终都会走到<code>dispatch(Activity activity, Lifecycle.Event event)</code>方法</li>\n</ul>\n<h4 id=\"lifecycleobserver-是如何被响应的?\">LifecycleObserver 是如何被响应的?<a title=\"#lifecycleobserver-是如何被响应的?\" href=\"#lifecycleobserver-是如何被响应的?\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReportFragment</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 事件分发</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatch</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity, <span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class=\"line\">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lifecycle <span class=\"keyword\">instanceof</span> LifecycleRegistry) &#123;</span><br><span class=\"line\">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2.1-处理生命周期事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        enforceMainThreadIfNeeded(<span class=\"string\">&quot;handleLifecycleEvent&quot;</span>);</span><br><span class=\"line\">        moveToState(event.getTargetState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.2-判断生命周期状态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mHandlingEvent || mAddingObserverCounter != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// we will figure out what to do on upper level.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2-3 同步状态至LifecycleObserver</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;LifecycleOwner of this LifecycleRegistry is already&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;garbage collected. It is too late to change lifecycle state.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Event event = Event.upFrom(observer.mState);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (event == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;no event up from &quot;</span> + observer.mState);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = Event.downFrom(observer.mState);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (event == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;no event down from &quot;</span> + observer.mState);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                pushParentState(event.getTargetState());</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.mo4tech.com/analysis-of-the-basic-use-and-rationale-of-android-jetpack-component-lifecycle.html\" target=\"_blank\">Analysis of the basic use and rationale of Android Jetpack component Lifecycle - Moment For Technology (mo4tech.com)</a></p>\n<p><a href=\"https://blog.csdn.net/u013700502/article/details/118469311\" target=\"_blank\">Android Jetpack系列之Lifecycle_小马快跑的博客-CSDN博客_android中lifecycle</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/30/9S5c1rplpdSAbIxR/",
            "url": "https://onion99.github.io/2021/11/30/9S5c1rplpdSAbIxR/",
            "title": "源码学习 - ViewModel",
            "date_published": "2021-11-29T23:30:53.000Z",
            "content_html": "<blockquote>\n<p>ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存,将视图和数据进行了分离解耦，为视图层提供数据</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"配置变更保存数据的方式\">配置变更保存数据的方式<a title=\"#配置变更保存数据的方式\" href=\"#配置变更保存数据的方式\"></a></h3>\n<ul>\n<li>onSaveInstance(Bundle)</li>\n<li>ViewModel</li>\n</ul>\n<h3 id=\"viewmodel优势\">ViewModel优势<a title=\"#viewmodel优势\" href=\"#viewmodel优势\"></a></h3>\n<ul>\n<li>ViewModel是将数据存到内存中，而onSaveInstance()是通过Bundle将序列化数据存在磁盘中</li>\n<li>ViewModel可以存储任何形式的数据，且大小不限制(不超过App分配的内存即可)，onSaveInstance()中只能存储可序列化的数据，且大小一般不超过1M（IPC通信数据限制）</li>\n</ul>\n<h3 id=\"viewmodel生命周期\">ViewModel生命周期<a title=\"#viewmodel生命周期\" href=\"#viewmodel生命周期\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8L0jU.png\" alt=\"I8L0jU.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>ViewModel对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的Lifecycle。ViewModel将一直留在内存中，直到限定其存在时间范围的Lifecycle永久消失：<br>\n对于activity，是在activity销毁时；<br>\n对于fragment，是在 fragment分离时</p>\n<h3 id=\"解析\">解析<a title=\"#解析\" href=\"#解析\"></a></h3>\n<h4 id=\"viewmodel是怎么样实例化的?\">ViewModel是怎么样实例化的?<a title=\"#viewmodel是怎么样实例化的?\" href=\"#viewmodel是怎么样实例化的?\"></a></h4>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BindingActivity</span>&lt;<span class=\"type\">T : ViewDataBinding</span>&gt; <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    <span class=\"meta\">@LayoutRes</span> <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> layoutId: <span class=\"built_in\">Int</span></span><br><span class=\"line\">) : AppCompatActivity(), HasAndroidInjector &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel?&gt;</span> <span class=\"title\">getActivityScopeViewModel</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span>: T &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化对应Scope的ViewModelProvider</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!::activityProvider.isInitialized) &#123;</span><br><span class=\"line\">            activityProvider = ViewModelProvider(requireActivity())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取ViewModelProvider获取Viewmodel</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> activityProvider.<span class=\"keyword\">get</span>(modelClass)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelprovider又是啥?\">ViewModelProvider又是啥?<a title=\"#viewmodelprovider又是啥?\" href=\"#viewmodelprovider又是啥?\"></a></h4>\n<blockquote>\n<p>ViewModel的辅助程序类，该类负责为界面准备数据。在配置更改期间会自动保留 ViewModel 对象，以便它们存储的数据立即可供下一个 activity 或 fragment 实例使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 为Fragment/Activity提供ViewModels的实用程序类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.创建用来存储ViewModel的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 创建用于实例化新ViewModel的Factory</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), owner <span class=\"keyword\">instanceof</span> HasDefaultViewModelProviderFactory</span><br><span class=\"line\">                ? ((HasDefaultViewModelProviderFactory) owner).getDefaultViewModelProviderFactory()</span><br><span class=\"line\">                : NewInstanceFactory.getInstance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStoreOwner owner, <span class=\"meta\">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(owner.getViewModelStore(), factory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewModelProvider</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewModelStore store, <span class=\"meta\">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class=\"line\">        mFactory = factory;</span><br><span class=\"line\">        mViewModelStore = store;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewModelProvider 关键参数组成:</p>\n<ul>\n<li>ViewModelStoreOwner：ViewModel存储器拥有者，用来提供ViewModelStore</li>\n<li>ViewModelStore：ViewModel存储器，用来存储ViewModel</li>\n<li>ViewModelProviderFactory：创建ViewModel的工厂</li>\n</ul>\n<p>首先尝试通过ViewModelStore.get(key)获取ViewModel，如果不为空直接返回该实例；如果为空，通过Factory.create创建ViewModel并保存到ViewModelStore中。先来看Factory是如何创建ViewModel的，ViewModelProvider构造函数中，如果没有传入Factory，那么会使用NewInstanceFactory</p>\n<h4 id=\"viewmodelprovider中的owner和factory怎么来的?\">ViewModelProvider中的Owner和Factory怎么来的?<a title=\"#viewmodelprovider中的owner和factory怎么来的?\" href=\"#viewmodelprovider中的owner和factory怎么来的?\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span></span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"viewmodelproviderfactory\">ViewModelProviderFactory<a title=\"#viewmodelproviderfactory\" href=\"#viewmodelproviderfactory\"></a></h5>\n<blockquote>\n<p>Activity,Fragment默认实现了HasDefaultViewModelProviderFactory接口,实现自己创建ViewModel的ViewModelProviderFactory</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGEOT1.png\" alt=\"IGEOT1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>再来看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">androidx</span>.<span class=\"title\">core</span>.<span class=\"title\">app</span>.<span class=\"title\">ComponentActivity</span> <span class=\"keyword\">implements</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">ViewModelStoreOwner</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">HasDefaultViewModelProviderFactory</span></span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"comment\">/* 返回未向ViewModelProvider构造函数提供自定义Factory时应使用的默认ViewModelProvider.Factory  */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewModelProvider.<span class=\"function\">Factory <span class=\"title\">getDefaultViewModelProviderFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 妈的,就是这么简单,直接实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDefaultFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mDefaultFactory = <span class=\"keyword\">new</span> SavedStateViewModelFactory(</span><br><span class=\"line\">                    getApplication(),</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                    getIntent() != <span class=\"keyword\">null</span> ? getIntent().getExtras() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mDefaultFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<h5 id=\"viewmodelstore\">ViewModelStore<a title=\"#viewmodelstore\" href=\"#viewmodelstore\"></a></h5>\n<blockquote>\n<p>Activity,Fragment也默认实现了这个接口,以来获取跟当前生命周期相关的ViewModelStore,看到没有,有图有真相</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/I8xIk4.png\" alt=\"I8xIk4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>看看<code>ComponentActivity.getViewModelStore()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewModelStore <span class=\"title\">getViewModelStore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getApplication() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 叉,这里照我猜想肯定是实现ViewModelStore的单例</span></span><br><span class=\"line\">    ensureViewModelStore();</span><br><span class=\"line\">    <span class=\"comment\">// 返回与此Activity关联的ViewModelStore</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mViewModelStore;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>void ensureViewModelStore() &#123;\n    if (mViewModelStore == null) &#123;\n        // 检索先前由onRetainNonConfigurationInstance()返回的配置变更后的缓存配置\n        NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance();\n        // 如果缓存配置不为空,则取缓存配置的viewModelStore\n        if (nc != null) &#123;\n            mViewModelStore = nc.viewModelStore;\n        &#125;\n        // 否则自己实例一个\n        if (mViewModelStore == null) &#123;\n            mViewModelStore = new ViewModelStore();\n        &#125;\n    &#125;\n&#125;    \n</code></pre>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">**通过getLastNonConfigurationInstance()我们可以在知道 **</span><br><span class=\"line\">ViewModelStore的存取都是间接在ActivityThread中进行并保存在ActivityClientRecord中。在Activity配置变化时，ViewModelStore可以在Activity销毁时得以保存并在重建时重新从lastNonConfigurationInstances中获取，又因为ViewModelStore提供了ViewModel，所以ViewModel也可以在Activity配置变化时得以保存，这也是为什么ViewModel的生命周期比Activity生命周期长的原因了。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 最后ViewModelProvider是如何<span class=\"keyword\">get</span>到 Viewmodel的?</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">    <span class=\"comment\">// 第一步:小get</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        String canonicalName = modelClass.getCanonicalName();</span><br><span class=\"line\">        <span class=\"comment\">// 好家伙,看到没有,如果这里判断是局部类或者匿名类,就直接给crash了,谷歌就是牛逼</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canonicalName == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalArgumentException(<span class=\"string\">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 首先构造了一个key，直接调用下面的get(key,modelClass)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(DEFAULT_KEY + <span class=\"string\">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第二步:大get</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        ViewModel viewModel = mViewModelStore.<span class=\"keyword\">get</span>(key);</span><br><span class=\"line\">        <span class=\"comment\">// 尝试从ViewModelStore中获取ViewModel</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mFactory instanceof OnRequeryFactory) &#123;</span><br><span class=\"line\">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// viewModel不为空直接返回该实例</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 然后如果为null,则通过具体工厂类去实例化ViewModel</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFactory instanceof KeyedFactory) &#123;</span><br><span class=\"line\">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            viewModel = mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 嘿嘿,放进缓存</span></span><br><span class=\"line\">        mViewModelStore.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) viewModel;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// ViewModel的实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T extends ViewModel&gt; T create(<span class=\"meta\">@NonNull</span> String key, <span class=\"meta\">@NonNull</span> Class&lt;T&gt; modelClass) &#123;</span><br><span class=\"line\">        boolean isAndroidViewModel = AndroidViewModel.<span class=\"keyword\">class</span>.isAssignableFrom(modelClass);</span><br><span class=\"line\">        Constructor&lt;T&gt; <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射,去找到当前ViewModel的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">constructor</span> = findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">constructor</span> = findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">constructor</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mFactory.create(modelClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SavedStateHandleController controller = SavedStateHandleController.create(</span><br><span class=\"line\">                mSavedStateRegistry, mLifecycle, key, mDefaultArgs);</span><br><span class=\"line\">        <span class=\"comment\">// 嘿嘿,调用构造函数,实例化        </span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T viewmodel;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isAndroidViewModel &amp;&amp; mApplication != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                viewmodel = <span class=\"keyword\">constructor</span>.newInstance(mApplication, controller.getHandle());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                viewmodel = <span class=\"keyword\">constructor</span>.newInstance(controller.getHandle());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            viewmodel.setTagIfAbsent(TAG_SAVED_STATE_HANDLE_CONTROLLER, controller);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> viewmodel;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;Failed to access &quot;</span> + modelClass, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;A &quot;</span> + modelClass + <span class=\"string\">&quot; cannot be instantiated.&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new RuntimeException(<span class=\"string\">&quot;An exception happened in constructor of &quot;</span></span><br><span class=\"line\">                    + modelClass, e.getCause());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br></pre></td></tr></table></figure>\n<h4 id=\"viewmodelstore-是是如何存储viewmodel的?\">ViewModelStore 是是如何存储ViewModel的?<a title=\"#viewmodelstore-是是如何存储viewmodel的?\" href=\"#viewmodelstore-是是如何存储viewmodel的?\"></a></h4>\n<p>嘿嘿,存储ViewModel的ViewModelStore,牛逼啊,用一个HashMap来缓存看到有木有:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/61bfe8240cd5d1648037da8bdc77ea8e.png\" alt=\"viewmodelcreate.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelStore</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class=\"line\">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldViewModel != <span class=\"keyword\">null</span>) oldViewModel.onCleared();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> ViewModel <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMap.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">keys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class=\"line\">            vm.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mMap.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IG8UgA.png\" alt=\"IG8UgA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"viewmodel意义\">ViewModel意义<a title=\"#viewmodel意义\" href=\"#viewmodel意义\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGd3ff.png\" alt=\"IGd3ff.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://z3.ax1x.com/2021/11/08/IGwfKg.png\" alt=\"IGwfKg.png\" loading=\"lazy\" class=\"φbp\"></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/30/hu0861X6Ltf32fYt/",
            "url": "https://onion99.github.io/2021/11/30/hu0861X6Ltf32fYt/",
            "title": "源码学习 - DataBinding",
            "date_published": "2021-11-29T23:27:07.000Z",
            "content_html": "<h3 id=\"sameple\">Sameple<a title=\"#sameple\" href=\"#sameple\"></a></h3>\n<p>首先,我们来看看DataBinding使用:</p>\n<ol>\n<li>给layout文件套娃:</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.viewpager.widget.ViewPager</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/home_pager&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.flyco.tablayout.SlidingTabLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/home_tab&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在Fragment或者View中获取binding对象</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding = DataBindingUtil.inflate(inflater,layoutRes,container,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>超,就是这么简单,来从<code>inflate</code>开始解析</p>\n<span id=\"more\"></span>\n<h3 id=\"databindingutil.inflate梳理\">DataBindingUtil.inflate梳理<a title=\"#databindingutil.inflate梳理\" href=\"#databindingutil.inflate梳理\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ViewDataBinding&gt; <span class=\"function\">T <span class=\"title\">inflate</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"meta\">@NonNull</span> LayoutInflater inflater, <span class=\"keyword\">int</span> layoutId, <span class=\"meta\">@Nullable</span> ViewGroup parent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">boolean</span> attachToParent, <span class=\"meta\">@Nullable</span> DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查康康是不是子layout附加到父layout,一般是false,因为如果为ture会导致子layout的layoutparams 失效</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> useChildren = parent != <span class=\"keyword\">null</span> &amp;&amp; attachToParent;</span><br><span class=\"line\">    <span class=\"comment\">// 上面一般为false,那这里一般也是零蛋啊</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> startChildren = useChildren ? parent.getChildCount() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 解析xml生成View,放空大脑就是这样,深究的话,我只能甩一篇郭神的文章了:https://blog.csdn.net/guolin_blog/article/details/12921889</span></span><br><span class=\"line\">    <span class=\"comment\">// 什么具体inflate是怎么样,不听不听王八念经</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> View view = inflater.inflate(layoutId, parent, attachToParent);</span><br><span class=\"line\">    <span class=\"comment\">// 嘿嘿,这里开始binding</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useChildren) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bindToAddedViews(bindingComponent, parent, startChildren, layoutId);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bind(bindingComponent, view, layoutId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBinderMapper sMapper = <span class=\"keyword\">new</span> DataBinderMapperImpl();</span><br><span class=\"line\"><span class=\"keyword\">static</span> &lt;T extends ViewDataBinding&gt; <span class=\"function\">T <span class=\"title\">bind</span><span class=\"params\">(DataBindingComponent bindingComponent, View root,<span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不理了,这里就拿到binding了,可以直接引用View了,停止思考</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) sMapper.getDataBinder(bindingComponent, root, layoutId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题来了,它是怎么取得我要的DataBinding对象且又是怎么实现View绑定的?</p>\n<ol>\n<li>好,来康康,这个<code>DataBinderMapperImpl</code>,这是编译阶段下kapt自动生成的:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> androidx.databinding;</span><br><span class=\"line\"><span class=\"comment\">// 好家伙,这里直接继承MergedDataBinderMapper </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBinderMapperImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">MergedDataBinderMapper</span> </span>&#123;</span><br><span class=\"line\">  DataBinderMapperImpl() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加kapt下生成当前Module的DataBinderMapperImpl</span></span><br><span class=\"line\">    addMapper(<span class=\"keyword\">new</span> com.xxx.xxx.DataBinderMapperImpl());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 合并其他Mapper的DataBindingMapper </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergedDataBinderMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">DataBinderMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Class&lt;? extends DataBinderMapper&gt;&gt; mExistingMappers = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 添加Mapper,如果已经存在则忽略</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMapper</span><span class=\"params\">(DataBinderMapper mapper)</span> </span>&#123;</span><br><span class=\"line\">        Class&lt;? extends DataBinderMapper&gt; mapperClass = mapper.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mExistingMappers.add(mapperClass)) &#123;</span><br><span class=\"line\">            mMappers.add(mapper);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> List&lt;DataBinderMapper&gt; dependencies = mapper.collectDependencies();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(DataBinderMapper dependency : dependencies) &#123;</span><br><span class=\"line\">                addMapper(dependency);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>MergedDataBinderMapper.getDataBinder</code>:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewDataBinding <span class=\"title\">getDataBinder</span><span class=\"params\">(DataBindingComponent bindingComponent, View view,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历之前添加的mMappers    </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(DataBinderMapper mapper : mMappers) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 好了,这里获取对应的Mapper的DataBinder,超,想想之前添加了哪个Mapper</span></span><br><span class=\"line\">        <span class=\"comment\">// 没错,不正好对上tmd的上面1的com.xxx.xxx.DataBinderMapperImpl()</span></span><br><span class=\"line\">        ViewDataBinding result = mapper.getDataBinder(bindingComponent, view, layoutId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFeatures()) <span class=\"keyword\">return</span> getDataBinder(bindingComponent, view, layoutId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>让我们来康康kapt生成的<code>com.xxx.xxx.DataBinderMapperImpl()</code>到底有什么</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBinderMapperImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">DataBinderMapper</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// layout id 索引</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LAYOUT_FRAGMENTHOME = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SparseIntArray INTERNAL_LAYOUT_ID_LOOKUP = <span class=\"keyword\">new</span> SparseIntArray(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    INTERNAL_LAYOUT_ID_LOOKUP.put(com.xmiles.callshow.R.layout.fragment_home, LAYOUT_FRAGMENTHOME);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ViewDataBinding <span class=\"title\">getDataBinder</span><span class=\"params\">(DataBindingComponent component, View view, <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到索引的id</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localizedLayoutId &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Object tag = view.getTag();</span><br><span class=\"line\">      <span class=\"comment\">// 判断tag</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(tag == <span class=\"keyword\">null</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;view must have a tag&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 这里如果布局数量超50,为避免一个方法体过大,会额外新建另外一个函数去处理,这里为好展示,整个类我就删除了很多其他布局参数</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> methodIndex = (localizedLayoutId - <span class=\"number\">1</span>) / <span class=\"number\">50</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 跟据对应componet生成对应的ViewDetaBinding</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(methodIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> internalGetViewDataBinding0(component, view, localizedLayoutId, tag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> internalGetViewDataBinding1(component, view, localizedLayoutId, tag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// GetViewDataBinding</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ViewDataBinding <span class=\"title\">internalGetViewDataBinding0</span><span class=\"params\">(DataBindingComponent component,View view, <span class=\"keyword\">int</span> internalId, Object tag)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(internalId) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span>  LAYOUT_FRAGMENTHOME: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;layout/fragment_home_0&quot;</span>.equals(tag)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FragmentHomeBindingImpl(component, view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;The tag for fragment_home is invalid. Received: &quot;</span> + tag);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/4be20cc58f17\" target=\"_blank\">Android架构组件之DataBinding源码解析 - 简书 (jianshu.com)</a><br>\n<a href=\"https://www.jianshu.com/p/4e9a1ab05bb5\" target=\"_blank\">DataBinding源码分析 - 简书 (jianshu.com)</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/08/qX2v7eB61IheaBrH/",
            "url": "https://onion99.github.io/2021/11/08/qX2v7eB61IheaBrH/",
            "title": "Java并发(4) - CAS",
            "date_published": "2021-11-07T18:59:57.000Z",
            "content_html": "<p>锁机制问题:</p>\n<ul>\n<li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li>\n<li>一个线程持有锁会导致其它所有需要此锁的线程挂起</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险</li>\n</ul>\n<p>volatile 是不错的机制，但是 volatile 不能保证原子性，因此对于同步最终还是要回到锁机制上来。独占锁是一种悲观锁，synchronized 就是一种独占锁，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。而另一个更加有效的锁就是乐观锁</p>\n<blockquote>\n<p>乐观锁即总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"原子操作\">原子操作<a title=\"#原子操作\" href=\"#原子操作\"></a></h3>\n<blockquote>\n<p>所谓“原子”操作，是指一组不可分割的操作：操作者对目标对象进行操作时，要么完成所有操作后其他操作者才能操作；要么这个操作者不能进行任何操作</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/04/Ie5YA1.png\" alt=\"Ie5YA1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestAtomic</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化了一个AtomicInteger类的对象atomic并定义初始值为1</span></span><br><span class=\"line\">        AtomicInteger atomic = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 进行atomic的原子化操作：增加1并且获取这个增加后的新值</span></span><br><span class=\"line\">        atomic.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"cas-原理\">CAS 原理<a title=\"#cas-原理\" href=\"#cas-原理\"></a></h3>\n<blockquote>\n<p>CAS 的思想很简单，三个参数：当前内存值 V、旧的预期值 A、即将更新的值 B，当且仅当预期值 A 和内存值 V 相同时，将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。我们拿 AtomicInteger 类来分析，先来看看 AtomicInteger 静态代码块片段</p>\n</blockquote>\n<h3 id=\"cas缺点\">CAS缺点<a title=\"#cas缺点\" href=\"#cas缺点\"></a></h3>\n<ul>\n<li>循环时间长开销很大</li>\n<li>只能保证一个共享变量的原子操作</li>\n<li>ABA问题</li>\n</ul>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/cNDSpE5p4avS2tOi/",
            "url": "https://onion99.github.io/2021/11/04/cNDSpE5p4avS2tOi/",
            "title": "自定义View(11) - 滚动速度和滚动计算",
            "date_published": "2021-11-03T22:09:36.000Z",
            "content_html": "<h3 id=\"velocitytracker\">VelocityTracker<a title=\"#velocitytracker\" href=\"#velocitytracker\"></a></h3>\n<blockquote>\n<p>跟踪手指在滑动过程中的速度，包括水平和竖直方向的速度</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VelocityTrackerTestView</span>(<span class=\"title\">context</span>: <span class=\"title\">Context</span>?, <span class=\"title\">attrs</span>: <span class=\"title\">AttributeSet</span>?) : <span class=\"title\">View</span>(<span class=\"title\">context</span>, <span class=\"title\">attrs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、创建实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mVelocityTracker = VelocityTracker.obtain()</span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint(&quot;ClickableViewAccessibility&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">onTouchEvent</span><span class=\"params\">(event: MotionEvent)</span>: Boolean </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//2、重置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (event.actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            mVelocityTracker.clear()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//3、开始追踪</span></span><br><span class=\"line\">        mVelocityTracker.addMovement(event)</span><br><span class=\"line\"> </span><br><span class=\"line\">        when (event.actionMasked) &#123;</span><br><span class=\"line\">            MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            MotionEvent.ACTION_MOVE -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//o...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            MotionEvent.ACTION_UP -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//速度 = （ 终点位置(px) - 起点位置(px) ）/ 时间段(ms)</span></span><br><span class=\"line\">                <span class=\"comment\">//4、设置时间段</span></span><br><span class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>)</span><br><span class=\"line\">                <span class=\"comment\">//5、获取x方向、y方向的速度</span></span><br><span class=\"line\">                <span class=\"comment\">//其中getXVelocity、getYVelocity方法的参数是pointerId，用于多指触控。不考虑多指时，可以不用传参数</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> xVelocity = mVelocityTracker.getXVelocity(<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">var</span> yVelocity = mVelocityTracker.getYVelocity(<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"comment\">//...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//6、当不需要使用时，重置并回收内存</span></span><br><span class=\"line\">        mVelocityTracker.clear()</span><br><span class=\"line\">        mVelocityTracker.recycle()</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>VelocityTracker 一般用来判断当前是否达到一定的滑动速度来触发 Fling 的效果，这个滑动速度我们可以自己设置，也可以通过系统提供的来获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mViewConfiguration : ViewConfiguration = ViewConfiguration.get(context)</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mMaxFlingVelocity = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">//触发fling的速度</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mMinFlingVelocity = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">init &#123;</span><br><span class=\"line\">    mMaxFlingVelocity = mViewConfiguration.scaledMaximumFlingVelocity</span><br><span class=\"line\">    mMinFlingVelocity = mViewConfiguration.scaledMinimumFlingVelocity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scroller\">Scroller<a title=\"#scroller\" href=\"#scroller\"></a></h3>\n<p>在 View 类里面，有两个和滚动相关的类 scrollTo() 和 scrollBy。这两个方法可以实现 View 内容的移动，比如说一个 TextView，如果使用 scrollTo()，那么移动的是里面的文字而不是位置，scrollBy() 也是一样的。那么为什么是移动，不是滚动呢？这是因为这两个方法都是瞬间完成，而不是带有滚动过程的滚动，所以说如果要实现效果比较好的滚动还是需要 Scroller</p>\n<p>常用API:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">computeScrollOffset()</td>\n<td style=\"text-align:center\">判断当前的滑动动作是否完成的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getCurrX()、getCurrY()</td>\n<td style=\"text-align:center\">获取当前滑动的坐标值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getFinalX()、getFinalY()</td>\n<td style=\"text-align:center\">获取最终滑动停止时的坐标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isFinished()</td>\n<td style=\"text-align:center\">用来判断当前滚动是否结束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">startScroll(int startX, int startY, int dx, int dy)</td>\n<td style=\"text-align:center\">用来开始滚动，这个是很重要的一个触发computeScroll()的方法，调用这个方法之后，我们就可以在computeScroll里面获取滚动的信息，然后完成我们的需要。这个还有一个带有滚动持续时间的重载函数，可以根据需求自由使用。特别要注意这四个参数，startX和startY是开始的坐标位置，正数左上，负数右下，dx、dy同理，当在computeScroll()获取getCurrX()的时候，变化范围就与这里地设置有关。</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"overscroller\">OverScroller<a title=\"#overscroller\" href=\"#overscroller\"></a></h3>\n<blockquote>\n<p>对超出滑动边界的情况的处理</p>\n</blockquote>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/dY7a31QepeVitGkX/",
            "url": "https://onion99.github.io/2021/11/04/dY7a31QepeVitGkX/",
            "title": "自定义View(10) - GestureDetector",
            "date_published": "2021-11-03T22:08:39.000Z",
            "content_html": "<h3 id=\"gesturedetector\">GestureDetector<a title=\"#gesturedetector\" href=\"#gesturedetector\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>监听器</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OnContextClickListener</td>\n<td>这个很容易让人联想到ContextMenu，然而它和ContextMenu并没有什么关系，它是在Android6.0(API 23)才添加的一个选项，是用于检测外部设备上的按钮是否按下的，例如蓝牙触控笔上的按钮，一般情况下，忽略即可。</td>\n</tr>\n<tr>\n<td>OnDoubleTapListener</td>\n<td>双击事件，有三个回调类型：双击(DoubleTap)、单击确认(SingleTapConfirmed) 和 双击事件回调(DoubleTapEvent)</td>\n</tr>\n<tr>\n<td>OnGestureListener</td>\n<td>手势检测，主要有以下类型事件：按下(Down)、 一扔(Fling)、长按(LongPress)、滚动(Scroll)、触摸反馈(ShowPress) 和 单击抬起(SingleTapUp)</td>\n</tr>\n<tr>\n<td>SimpleOnGestureListener</td>\n<td>这个是上述三个接口的空实现，一般情况下使用这个比较多，也比较方便</td>\n</tr>\n</tbody>\n</table></div></div><span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建一个监听回调</span></span><br><span class=\"line\">SimpleOnGestureListener listener = <span class=\"keyword\">new</span> SimpleOnGestureListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDoubleTap</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;双击666&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onDoubleTap(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 2.创建一个检测器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> GestureDetector detector = <span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>, listener);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 3.给监听器设置数据源</span></span><br><span class=\"line\">view.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> detector.onTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"scalegesturedetector\">ScaleGestureDetector<a title=\"#scalegesturedetector\" href=\"#scalegesturedetector\"></a></h3>\n<blockquote>\n<p>Android 缩放手势检测 ScaleGestureDetector，在大多数的情况下缩放手势都不是单独存在的，需要配合其它的手势来使用</p>\n</blockquote>\n<h4 id=\"sample\">sample<a title=\"#sample\" href=\"#sample\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScaleGestureDemoView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;ScaleGestureDemoView&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> ScaleGestureDetector mScaleGestureDetector;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaleGestureDemoView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScaleGestureDemoView</span><span class=\"params\">(Context context, <span class=\"meta\">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        initScaleGestureDetector();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initScaleGestureDetector</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mScaleGestureDetector = <span class=\"keyword\">new</span> ScaleGestureDetector(getContext(), </span><br><span class=\"line\">                <span class=\"keyword\">new</span> ScaleGestureDetector.SimpleOnScaleGestureListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onScaleBegin</span><span class=\"params\">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onScale</span><span class=\"params\">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;focusX = &quot;</span> + detector.getFocusX());       <span class=\"comment\">// 缩放中心，x坐标</span></span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;focusY = &quot;</span> + detector.getFocusY());       <span class=\"comment\">// 缩放中心y坐标</span></span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">&quot;scale = &quot;</span> + detector.getScaleFactor());   <span class=\"comment\">// 缩放因子</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScaleEnd</span><span class=\"params\">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        mScaleGestureDetector.onTouchEvent(event);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/z3aQsRLVolBbFVsl/",
            "url": "https://onion99.github.io/2021/11/04/z3aQsRLVolBbFVsl/",
            "title": "自定义View(9) - 事件分发",
            "date_published": "2021-11-03T22:07:31.000Z",
            "content_html": "<blockquote>\n<p>事件分发的过程其实也就是事件传递过程。事件传递的顺序由Acticity传递到根View，这个根View 通常是一个ViewGroup(ViewGroup本身也是View的子类)，然后再传递给ViewGroup下的子View, 若事件在自上而下的传递过程中一直没有被消费，则事件会反向向上传递，此时父ViewGroup可以对事件进行消费，若仍然没有被消费的话，最后会回到Activity的onTouchEvent</p>\n</blockquote>\n<p>所以很多时候如果有冲突的话,最先消费的是最底部的子View<br>\n<img src=\"https://z3.ax1x.com/2021/11/03/IE3gqf.png\" alt=\"IE3gqf.png\" loading=\"lazy\"></p>\n<span id=\"more\"></span>\n<h3 id=\"事件分发method\">事件分发Method<a title=\"#事件分发method\" href=\"#事件分发method\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">调用时刻</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">dispatchTouchEvent()</td>\n<td style=\"text-align:center\">用来进行事件传递</td>\n<td style=\"text-align:center\">如果事件能够传递给当前 View，那么此方法一定会被调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onInterceptTouchEvent()</td>\n<td style=\"text-align:center\">用来是否拦截事件</td>\n<td style=\"text-align:center\">如果当前 View 拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onTouchEvent()</td>\n<td style=\"text-align:center\">处理事件</td>\n<td style=\"text-align:center\">在 dispatchTouchEvent()方法中调用</td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"事件分发顺序\">事件分发顺序<a title=\"#事件分发顺序\" href=\"#事件分发顺序\"></a></h3>\n<p>Activity&amp;Window</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">        onUserInteraction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当事件没有被任何子View 消费时,即这里为false时,最终执行自己的nTouchEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DecorView(FrameLayout 的子类)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneWindow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Window</span> <span class=\"keyword\">implements</span> <span class=\"title\">MenuBuilder</span>.<span class=\"title\">Callback</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorView</span> <span class=\"keyword\">extends</span> <span class=\"title\">FrameLayout</span> <span class=\"keyword\">implements</span> <span class=\"title\">RootViewSurfaceTaker</span></span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//FrameLayout 并没有重写dispatchTouchEvent方法，所以事件开始交由 ViewGroup 的 dispatchTouchEvent 开始分发了</span></span><br><span class=\"line\">\t    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ViewGroup</p>\n<ul>\n<li>判断事件是够需要被 ViewGroup 拦截</li>\n<li>遍历所有子View，逐个分发事件</li>\n<li>将事件交给ViewGroup自己或者目标子View处理</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(ev)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 先检验事件是否需要被ViewGroup拦截</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 校验是否给mGroupFlags设置了FLAG_DISALLOW_INTERCEPT标志位</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 走onInterceptTouchEvent判断是否拦截事件</span></span><br><span class=\"line\">                intercepted = onInterceptTouchEvent(ev);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!canceled &amp;&amp; !intercepted) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 注意ACTION_DOWN等事件才会走遍历所有子View的流程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class=\"line\">                    || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</span><br><span class=\"line\">                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">                <span class=\"comment\">// 开始遍历所有子View开始逐个分发事件</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childrenCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 判断触摸点是否在这个View的内部</span></span><br><span class=\"line\">                        <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</span><br><span class=\"line\">                                || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                        <span class=\"comment\">// 事件被子View消费，退出循环，不再继续分发给其他子View</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                            <span class=\"comment\">// addTouchTarget内部将mFirstTouchTarget设置为child，即不为null</span></span><br><span class=\"line\">                            newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class=\"line\">                            alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 事件未被任何子View消费，自己处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mFirstTouchTarget == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No touch targets so treat this as an ordinary view.</span></span><br><span class=\"line\">            handled = dispatchTransformedTouchEvent(ev, canceled, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                    TouchTarget.ALL_POINTER_IDS);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将MotionEvent.ACTION_DOWN后续事件分发给mFirstTouchTarget指向的View</span></span><br><span class=\"line\">            TouchTarget predecessor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            TouchTarget target = mFirstTouchTarget;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (target != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> TouchTarget next = target.next;</span><br><span class=\"line\">                <span class=\"comment\">// 如果已经在上面的遍历过程中传递过事件，跳过本次传递</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</span><br><span class=\"line\">                    handled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> cancelChild = resetCancelNextUpFlag(target.child)</span><br><span class=\"line\">                            || intercepted;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, cancelChild,</span><br><span class=\"line\">                            target.child, target.pointerIdBits)) &#123;</span><br><span class=\"line\">                        handled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                predecessor = target;</span><br><span class=\"line\">                target = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Update list of touch targets for pointer up or cancel, if needed.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (canceled</span><br><span class=\"line\">                || actionMasked == MotionEvent.ACTION_UP</span><br><span class=\"line\">                || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class=\"line\">            resetTouchState();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> actionIndex = ev.getActionIndex();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> idBitsToRemove = <span class=\"number\">1</span> &lt;&lt; ev.getPointerId(actionIndex);</span><br><span class=\"line\">            removePointersFromTouchTargets(idBitsToRemove);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">resetTouchState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    clearTouchTargets();</span><br><span class=\"line\">    resetCancelNextUpFlag(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">clearTouchTargets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    TouchTarget target = mFirstTouchTarget;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            TouchTarget next = target.next;</span><br><span class=\"line\">            target.recycle();</span><br><span class=\"line\">            target = next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (target != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        mFirstTouchTarget = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TouchTarget <span class=\"title\">addTouchTarget</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> pointerIdBits)</span> </span>&#123;</span><br><span class=\"line\">    TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</span><br><span class=\"line\">    target.next = mFirstTouchTarget;</span><br><span class=\"line\">    mFirstTouchTarget = target;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTransformedTouchEvent</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">boolean</span> cancel,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                              View child, <span class=\"keyword\">int</span> desiredPointerIdBits)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> handled;</span><br><span class=\"line\">    <span class=\"comment\">// 注意传参child为null时，调用的是自己的dispatchTouchEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        handled = <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handled = child.dispatchTouchEvent(transformedEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认不拦截事件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>View:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 判断事件是否先交给ouTouch方法处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mOnTouchListener != <span class=\"keyword\">null</span> &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp;</span><br><span class=\"line\">                    mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// onTouch未消费事件，传给onTouchEvent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (onTouchEvent(event)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"综上\">综上<a title=\"#综上\" href=\"#综上\"></a></h3>\n<ul>\n<li>View 事件分发的本质是递归。</li>\n<li>递归的本质是，任务的下发和结果的上报。</li>\n<li>View 事件分发设计成递归，是为了配合 View 的排版规则，形成符合用户直觉的触控体验。</li>\n<li>View 事件分发的对象是一个 MotionEvent。</li>\n<li>一次用户触控操作包含多个 MotionEvent（例如从 ACTION_DOWN 到 ACTION_UP ），也即会走多次事件分发流程。</li>\n<li>一次 View 事件分发流程包含 “递” 流程和 “归” 流程，“递” 流程可以因 ViewGroup 的拦截而提前步入 “归” 流程。</li>\n<li>child 可以通过 getParent.requestDisallowInterceptTouchEvent 阻止父容器的拦截。因而需要差异化地配置阈值，来确保 child 执行 getParent.requestDisallowInterceptTouchEvent 优先于父容器 onInterceptTouchEvent 返回 true（不然都先被拦截了，child 哪有机会阻止？）</li>\n<li>在“归”流程中，唯有当前层级的 super.dispatchTouchEvent 返回了 true，才认定被消费，被消费前，下级都有干活，只是结果不 OK。被消费后，上级都不需要干活，直接向上传达消费者的功。</li>\n</ul>\n<h3 id=\"事件冲突解决\">事件冲突解决<a title=\"#事件冲突解决\" href=\"#事件冲突解决\"></a></h3>\n<ul>\n<li>从父View着手, 重写onInterceptTouchEvent方法，在父View需要拦截的时候拦截，不要的时候返回false</li>\n<li>从子View着手, 重写子 View的dispatchTouchEvent方法，在Action_down 动作中通过方法 requestDisallowInterceptTouchEvent（true） 先请求 父 View不要拦截事件，这样保证子 View 能够接受到 Action_move 事件，再在 Action_move 动作中根据自己的逻辑是否要拦截事件，不需要拦截事件的话再交给 父 View 处理</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://juejin.cn/post/6844903894103883789\" target=\"_blank\">学习 View 事件分发，就像外地人上了黑车！ - 掘金 (juejin.cn)</a><br>\n<a href=\"https://juejin.cn/post/6965649194744807461\" target=\"_blank\">View 事件分发机制，看这一篇就够了 - 掘金 (juejin.cn)</a><br>\n<a href=\"https://blog.csdn.net/u010289802/article/details/86169939\" target=\"_blank\">Android 手把手进阶自定义View（十）- 事件分发机制解析_lerendan的博客-CSDN博客</a></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/p4CRfuQemJ4TOlAs/",
            "url": "https://onion99.github.io/2021/11/04/p4CRfuQemJ4TOlAs/",
            "title": "自定义View(8) - draw 绘制过程",
            "date_published": "2021-11-03T22:03:38.000Z",
            "content_html": "<blockquote>\n<p>Android 里面的绘制都是按顺序的，先绘制的内容会被后绘制的盖住</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IES7KP.png\" alt=\"IES7KP.png\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"draw-过程解析\">draw 过程解析<a title=\"#draw-过程解析\" href=\"#draw-过程解析\"></a></h3>\n<p>一个完整的绘制过程会依次绘制以下几个内容：<br>\n<img src=\"https://z3.ax1x.com/2021/11/03/IEp3Ie.png\" alt=\"IEp3Ie.png\" loading=\"lazy\"></p>\n<ul>\n<li><code>drawBackground()</code>绘制背景\n<ul>\n<li>这个方法是 private 的，不能重写，你如果要设置背景，只能用自带的 API 去设置</li>\n</ul>\n</li>\n<li><code>onDraw()</code>绘制主体\n<ul>\n<li>这个方法在 View 和 ViewGroup 里都是空实现，因此自定义时需要复写</li>\n</ul>\n</li>\n<li><code>dispatchDraw()</code>绘制子 View\n<ul>\n<li>在于单一 View 中无子 View，故在 View 中此方法默认为空实</li>\n<li>在 ViewGroup中系统已经复写好此方法对其子视图进行绘制因此我们不需要复写</li>\n</ul>\n</li>\n<li><code>onDrawForeground()</code>滑动边缘渐变和滑动条以及前景</li>\n</ul>\n<p>ViewGroup中的<code>dispatchDraw()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childrenCount = mChildrenCount;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flags = mGroupFlags;</span><br><span class=\"line\">    <span class=\"comment\">// 动画处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((flags &amp; FLAG_RUN_ANIMATION) != <span class=\"number\">0</span> &amp;&amp; canAnimate()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> buildCache = !isHardwareAccelerated();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> LayoutParams params = child.getLayoutParams();</span><br><span class=\"line\">                attachLayoutAnimationParameters(child, params, i, childrenCount);</span><br><span class=\"line\">                bindLayoutAnimation(child);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// xxx</span></span><br><span class=\"line\">        controller.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 间距处理</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> clipSaveCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> clipToPadding = (flags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clipToPadding) &#123;</span><br><span class=\"line\">        clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);</span><br><span class=\"line\">        canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,</span><br><span class=\"line\">                mScrollX + mRight - mLeft - mPaddingRight,</span><br><span class=\"line\">                mScrollY + mBottom - mTop - mPaddingBottom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历子View</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||transientChild.getAnimation() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 2. 绘制子View视图    </span></span><br><span class=\"line\">                more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"draw顺序\">draw顺序<a title=\"#draw顺序\" href=\"#draw顺序\"></a></h3>\n<h4 id=\"ondraw()\">onDraw()<a title=\"#ondraw()\" href=\"#ondraw()\"></a></h4>\n<blockquote>\n<p>自定义绘制最基本的形态：继承 View 类，在 onDraw() 中完全自定义它的绘制</p>\n</blockquote>\n<p>定义 View 时，绘制代码写在 super.onDraw() 的上面还是下面都无所谓,但基于已有控件的自定义绘制，就不能不考虑 <code>super.onDraw()</code> 了，你需要根据自己的需求，判断出你绘制的内容需要盖住控件原有的内容还是需要被控件原有的内容盖住，从而确定你的绘制代码是应该写在 super.onDraw() 的上面还是下面。</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">上面</th>\n<th style=\"text-align:center\">下面</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IEFrgH.png\" alt=\"IEFrgH.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IEFHrn.png\" alt=\"IEFHrn.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"dispatchdraw()\">dispatchDraw()<a title=\"#dispatchdraw()\" href=\"#dispatchdraw()\"></a></h4>\n<blockquote>\n<p>如果想在一个ViewGroup中按上面的做法在下面添加绘制内容则是不行的,因为在绘制过程中每一个 ViewGroup 会先调用自己的 onDraw() 来绘制完自己的主体之后再去绘制它的子 View,会覆盖其主体</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEEpH1.png\" alt=\"IEEpH1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpottedLinearLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">LinearLayout</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 把 onDraw() 换成了 dispatchDraw()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.dispatchDraw(canvas);</span><br><span class=\"line\">       ... <span class=\"comment\">// 绘制斑点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然 View 和 ViewGroup 都有 dispatchDraw() 方法，不过由于 View 是没有子 View 的，所以一般来说 dispatchDraw() 这个方法只对 ViewGroup（以及它的子类）有意义。</p>\n<h4 id=\"ondrawforeground()\">onDrawForeground()<a title=\"#ondrawforeground()\" href=\"#ondrawforeground()\"></a></h4>\n<blockquote>\n<p>前景前后处理</p>\n</blockquote>\n<p>在 super.onDrawForeground() 的上面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawForeground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       ... <span class=\"comment\">// 绘制「New」标签</span></span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onDrawForeground(canvas);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEVgSS.png\" alt=\"IEVgSS.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在 super.onDrawForeground() 的下面:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawForeground</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onDrawForeground(canvas);</span><br><span class=\"line\">       ... <span class=\"comment\">// 绘制「New」标签</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEZV0A.png\" alt=\"IEZV0A.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"draw()\">draw()<a title=\"#draw()\" href=\"#draw()\"></a></h4>\n<h3 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IEZ1XQ.png\" alt=\"IEZ1XQ.png\" loading=\"lazy\" class=\"φbp\"></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/ZyOr4iLxJj7nAQxR/",
            "url": "https://onion99.github.io/2021/11/04/ZyOr4iLxJj7nAQxR/",
            "title": "自定义View(7) - layout 布局过程",
            "date_published": "2021-11-03T22:02:46.000Z",
            "content_html": "<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"viewasds\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"layout-类型\">layout 类型<a title=\"#layout-类型\" href=\"#layout-类型\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IA7tv4.png\" alt=\"IA7tv4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"view-的-layout-过程\">View 的 layout 过程<a title=\"#view-的-layout-过程\" href=\"#view-的-layout-过程\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定视图及其所有子视图的大小和位置 这是布局机制的第二阶段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否measure,没有的话再measure一遍</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class=\"line\">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前视图的四个顶点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;</span><br><span class=\"line\">    <span class=\"comment\">// 判断视图大小或者位置是否发生改变</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\">    <span class=\"comment\">// 发生改变        </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">        onLayout(changed, l, t, r, b);</span><br><span class=\"line\">        <span class=\"comment\">// 对于单一View的laytou过程：由于单一View是没有子View的，故onLayout（）是一个空实现-&gt;&gt;分析3</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于ViewGroup的laytou过程：由于确定位置与具体布局有关，所以onLayout（）在ViewGroup为1个抽象方法，需重写实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAqjZd.png\" alt=\"IAqjZd.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"viewgroup-的-layout-过程\">ViewGroup 的 layout 过程<a title=\"#viewgroup-的-layout-过程\" href=\"#viewgroup-的-layout-过程\"></a></h3>\n<blockquote>\n<p>ViewGroup 的 layout 过程确定位置与具体的布局有关，所以在 ViewGroup 中是一个抽象方法，需要重写实现</p>\n</blockquote>\n<p>复写<code> onLayout()</code>步骤:</p>\n<ol>\n<li>遍历所有子 View</li>\n<li>根据自身需求计算当前子 View 的四个位置值（需自身实现）</li>\n<li>根据上述 4 个位置的计算值，设置子 View 的 4 个顶点：调用子 View 的 layout 方法，即确定了子 View 在父容器里的位置</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewGroup的onLayout实现的大致思路</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 参数说明</span></span><br><span class=\"line\">   <span class=\"comment\">// changed 当前View的大小和位置改变了 </span></span><br><span class=\"line\">   <span class=\"comment\">// left 左部位置  top 顶部位置  right 右部位置  bottom 底部位置</span></span><br><span class=\"line\">   <span class=\"comment\">// 1. 遍历子View：循环所有子View</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;getChildCount(); i++) &#123;</span><br><span class=\"line\">         View child = getChildAt(i);   </span><br><span class=\"line\">         <span class=\"comment\">// 2. 计算当前子View的四个位置值</span></span><br><span class=\"line\">         <span class=\"comment\">// 2.1 位置的计算逻辑需自己实现，也是自定义View的关键</span></span><br><span class=\"line\">         calculate();</span><br><span class=\"line\">         <span class=\"comment\">// 2.2 对计算后的位置值进行赋值</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> mLeft  = Left</span><br><span class=\"line\">         <span class=\"keyword\">int</span> mTop  = Top</span><br><span class=\"line\">         <span class=\"keyword\">int</span> mRight = Right</span><br><span class=\"line\">         <span class=\"keyword\">int</span> mBottom = Bottom</span><br><span class=\"line\"> </span><br><span class=\"line\">       <span class=\"comment\">// 3. 根据上述4个位置的计算值设置子View的4个顶点：调用子view的layout() &amp; 传递计算过的参数</span></span><br><span class=\"line\">       <span class=\"comment\">// 即确定了子View在父容器的位置</span></span><br><span class=\"line\">       child.layout(mLeft, mTop, mRight, mBottom);</span><br><span class=\"line\">       <span class=\"comment\">// 该过程类似于单一View的layout过程中的layout()和onLayout()</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAL1L4.png\" alt=\"IAL1L4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"viewgroup-子类（linearlayout）的-layout-过程分析\">ViewGroup 子类（LinearLayout）的 layout 过程分析<a title=\"#viewgroup-子类（linearlayout）的-layout-过程分析\" href=\"#viewgroup-子类（linearlayout）的-layout-过程分析\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据自身方向属性，而选择不同的处理方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        layoutVertical(l, t, r, b);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        layoutHorizontal(l, t, r, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据 LinearLayout 的方向（vertical、horizontal）进入不同的布局过程，这里我们只选垂直方向的布局过程，即layoutVertical()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">layoutVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 子View的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\">    <span class=\"comment\">// 1. 遍历子View</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            childTop += measureNullChild(i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 计算子View的测量宽 / 高值</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = child.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 3. 确定自身子View的位置</span></span><br><span class=\"line\">            <span class=\"comment\">// 即：递归调用子View的setChildFrame()，实际上是调用了子View的layout() -&gt;&gt;分析2</span></span><br><span class=\"line\">            setChildFrame(child, childLeft, childTop + getLocationOffset(child), childWidth, childHeight);</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// childTop逐渐增大，即后面的子元素会被放置在靠下的位置</span></span><br><span class=\"line\">            <span class=\"comment\">// 这符合垂直方向的LinearLayout的特性</span></span><br><span class=\"line\">            childTop += childHeight + lp.bottomMargin + getNextLocationOffset(child);</span><br><span class=\"line\"> </span><br><span class=\"line\">            i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setChildFrame</span><span class=\"params\">( View child, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// setChildFrame（）仅仅只是调用了子View的layout（）而已</span></span><br><span class=\"line\">    child.layout(left, top, left ++ width, top + height);</span><br><span class=\"line\">    <span class=\"comment\">// 在子View的layout（）又通过调用setFrame（）确定View的四个顶点</span></span><br><span class=\"line\">    <span class=\"comment\">// 即确定了子View的位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 如此不断循环确定所有子View的位置，最终确定ViewGroup的位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getmeasurewidth-和-getwidth-区别\">getMeasureWidth 和 getWidth 区别<a title=\"#getmeasurewidth-和-getwidth-区别\" href=\"#getmeasurewidth-和-getwidth-区别\"></a></h3>\n<blockquote>\n<p>某些情况下，View 需要多次 measure 才能确定自己的测量宽高，在前几次的测量过程中，其得出的测量宽高有可能和最终宽高不一致.，但最终来说，测量宽高还是和最终宽高相同。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAjrmF.png\" alt=\"IAjrmF.png\" loading=\"lazy\" class=\"φbp\"></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/Qj9f1VMJJowv5Lfb/",
            "url": "https://onion99.github.io/2021/11/04/Qj9f1VMJJowv5Lfb/",
            "title": "自定义View(6) - measure 测量过程",
            "date_published": "2021-11-03T22:00:58.000Z",
            "content_html": "<p><img src=\"https://s2.ax1x.com/2019/12/06/QJQEcR.jpg\" alt=\"QJQEcR.jpg\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"measurespec\">MeasureSpec<a title=\"#measurespec\" href=\"#measurespec\"></a></h3>\n<blockquote>\n<p>MeasureSpec 代表测量规格，是一个 32 位的 int 值，高 2 位代表 SpecMode（测量模式），低 30 位代表 SpecSize（测量大小）</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IF7OM9.png\" alt=\"IF7OM9.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>MeasureSpec 通过将 SpecMode 和 SpecSize 打包成一个 int 值来避免过多的内存分配，并提供了打包和解包的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"specmode\">SpecMode<a title=\"#specmode\" href=\"#specmode\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFbTc4.png\" alt=\"IFbTc4.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"measurespec值计算\">MeasureSpec值计算<a title=\"#measurespec值计算\" href=\"#measurespec值计算\"></a></h3>\n<blockquote>\n<p>View 的 MeasureSpec 值是由 View 的布局参数和父容器 的 MeasureSpec 值计算</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAVp1e.png\" alt=\"IAVp1e.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 源码分析：getChildMeasureSpec（）</span></span><br><span class=\"line\"><span class=\"comment\"> * 作用：根据父视图的MeasureSpec &amp; 布局参数LayoutParams，计算单个子View的MeasureSpec</span></span><br><span class=\"line\"><span class=\"comment\"> * 注：子view的大小由父view的MeasureSpec值 和 子view的LayoutParams属性 共同决定</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> spec           父view的详细测量值 (MeasureSpec)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> padding        view当前尺寸的的内边距和外边距(padding, margin)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> childDimension 子视图的布局参数（宽 / 高）</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//父view的测量模式</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">    <span class=\"comment\">//父view的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\">    <span class=\"comment\">//通过父view计算出的子view大小 = 父大小-边距（父要求的大小，但子view不一定用这个值）   </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//子view想要的实际大小和模式（需要计算）  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//通过父view的MeasureSpec和子view的LayoutParams确定子view的大小  </span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当父view的模式为EXACITY时，父view强加给子view确切的值</span></span><br><span class=\"line\">        <span class=\"comment\">//一般是父view设置为match_parent或者固定值的ViewGroup </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">            <span class=\"comment\">// 当子view的LayoutParams&gt;0，即有确切的值  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子view大小为子自身所赋的值，模式大小为EXACTLY  </span></span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//当子view的LayoutParams为MATCH_PARENT时(-1)  </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子view大小为父view大小，模式为EXACTLY  </span></span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 当子view的LayoutParams为WRAP_CONTENT时(-2)      </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//子view决定自己的大小，但最大不能超过父view，模式为AT_MOST  </span></span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 当父view的模式为AT_MOST时，父view强加给子view一个最大的值。（一般是父view设置为wrap_content）  </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">            <span class=\"comment\">// 道理同上  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 当父view的模式为UNSPECIFIED时，父容器不对view有任何限制，要多大给多大</span></span><br><span class=\"line\">        <span class=\"comment\">// 多见于ListView、GridView  </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 子view大小为子自身所赋的值  </span></span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为父view为UNSPECIFIED，所以MATCH_PARENT的话子类大小为0  </span></span><br><span class=\"line\">                resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为父view为UNSPECIFIED，所以WRAP_CONTENT的话子类大小为0  </span></span><br><span class=\"line\">                resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAemLj.png\" alt=\"IAemLj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"measure-过程\">Measure 过程<a title=\"#measure-过程\" href=\"#measure-过程\"></a></h3>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAuMTA.png\" alt=\"IAuMTA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>布局过程自定义的方式</p>\n<ol>\n<li>重写  <code>onMeasure()</code>  来修改已有的  <code>View</code>  的尺寸；</li>\n<li>重写  <code>onMeasure()</code>  来全新定制自定义  <code>View</code>  的尺寸；</li>\n<li>重写  <code>onMeasure()</code>  和  <code>onLayout()</code>  来全新定制自定义  <code>ViewGroup</code>  的内部布局。</li>\n</ol>\n<h4 id=\"view的measure\">View的measure<a title=\"#view的measure\" href=\"#view的measure\"></a></h4>\n<p>View 的 measure 过程由其<code>measure()</code> 方法完成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 源码分析：measure（）</span></span><br><span class=\"line\"><span class=\"comment\">* 定义：Measure过程的入口；属于View.java类 &amp; final类型，即子类不能重写此方法</span></span><br><span class=\"line\"><span class=\"comment\">* 作用：基本测量逻辑的判断</span></span><br><span class=\"line\"><span class=\"comment\">**/</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要重新测量           </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (forceLayout || needsLayout) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否有缓存</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cacheIndex = forceLayout ? -<span class=\"number\">1</span> : mMeasureCache.indexOfKey(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cacheIndex &lt; <span class=\"number\">0</span> || sIgnoreMeasureCache) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 开始测量</span></span><br><span class=\"line\">            onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> value = mMeasureCache.valueAt(cacheIndex);</span><br><span class=\"line\">            <span class=\"comment\">// Casting a long to int drops the high 32 bits, no mask needed</span></span><br><span class=\"line\">            setMeasuredDimensionRaw((<span class=\"keyword\">int</span>) (value &gt;&gt; <span class=\"number\">32</span>), (<span class=\"keyword\">int</span>) value);</span><br><span class=\"line\">            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>setMeasuredDimension()</code>方法会设置 View 的宽/高的测量值，因此我们只需要看<code>getDefaultSize()</code> 方法即可</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/03/IAGYZT.png\" alt=\"IAGYZT.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * onMeasure（）要的做是事情</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 根据View宽/高的测量规格计算View的宽/高值：getDefaultSize()</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 存储测量后的View宽 / 高：setMeasuredDimension()</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">     setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">             getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> size        提供的默认大小</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> measureSpec 宽/高的测量规格</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 设置默认大小</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">     <span class=\"comment\">// 获取宽/高测量规格的模式 &amp; 测量大小</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">     <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">     <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 模式为UNSPECIFIED时，使用提供的默认大小 = 参数Size</span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">         result = size;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       <span class=\"comment\">// 模式为AT_MOST,EXACTLY时，使用View测量后的宽/高值 = measureSpec中的Size  </span></span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">         result = specSize;</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 返回View的宽/高值</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"> &#125;  </span><br></pre></td></tr></table></figure>\n<p>当模式是 UNSPECIFIED 时，使用的是提供的默认大小:</p>\n<ul>\n<li>若 View 无设置背景，那么 View 的宽度 = mMinWidth。mMinWidth为 android:minWidth属性所指定的值，默认为 0</li>\n<li>若 View设置了背景，View 的宽度为 mMinWidth 和 mBackground.getMinimumWidth()中的最大值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getSuggestedMinimumWidth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mBackground == <span class=\"keyword\">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ9mV.png\" alt=\"IAJ9mV.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAJ1te.png\" alt=\"IAJ1te.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"viewgroup的measure\">ViewGroup的measure<a title=\"#viewgroup的measure\" href=\"#viewgroup的measure\"></a></h4>\n<blockquote>\n<p>ViewGroup是个抽象类,不同ViewGroup的onMeasure的实现都个不相同,除了完成自己的 measure 过程以外，还会遍历去调用所有子元素的 measure 方法，各个子元素再递归去执行这个过程</p>\n</blockquote>\n<ol>\n<li>遍历所有子 View &amp; 测量：measureChildren()</li>\n<li>合并所有子 View 的尺寸大小，最终得到 ViewGroup 的测量值（需自身实现）</li>\n<li>存储测量后 View 宽/高的值：调用 setMeasuredDimension()</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义存放测量后的View宽/高的变量</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> widthMeasure ;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> heightMeasure ;</span><br><span class=\"line\">      <span class=\"comment\">// 1. 遍历所有子 View &amp; 测量(measureChildren())</span></span><br><span class=\"line\">      measureChildren(widthMeasureSpec, heightMeasureSpec)；</span><br><span class=\"line\">      <span class=\"comment\">// 2. 合并所有子View的尺寸大小，最终得到ViewGroup父视图的测量值</span></span><br><span class=\"line\">      <span class=\"comment\">// 需自身实现</span></span><br><span class=\"line\">      measureMerge();</span><br><span class=\"line\">      <span class=\"comment\">// 3. 存储测量后View宽/高的值：调用setMeasuredDimension()</span></span><br><span class=\"line\">      <span class=\"comment\">// 类似单一View的过程，此处不作过多描述</span></span><br><span class=\"line\">      setMeasuredDimension(widthMeasure,  heightMeasure);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>measureChildren()</code>遍历子 View 并且调用 measureChild() 进行下一步测量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 要求该视图的所有子视图度量自己，同时考虑该视图的MeasureSpec要求及其填充。我们跳过了处于GONE状态的子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size = mChildrenCount;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View[] children = mChildren;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = children[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</span><br><span class=\"line\">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">过程</th>\n<th style=\"text-align:center\">行为作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAokqI.png\" alt=\"IAokqI.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/03/IAo1Ln.png\" alt=\"IAo1Ln.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"linearlayout-measure分析\">LinearLayout measure分析<a title=\"#linearlayout-measure分析\" href=\"#linearlayout-measure分析\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据不同的布局属性进行不同的计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class=\"line\">        measureVertical(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        measureHorizontal(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">measureVertical</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取垂直方向上的子View个数</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = getVirtualChildCount();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 遍历子View获取其高度，并记录下子View中最高的高度数值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> View child = getVirtualChildAt(i);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 子View不可见，直接跳过该View的measure过程，getChildrenSkipCount()返回值恒为0</span></span><br><span class=\"line\">        <span class=\"comment\">// 注：若view的可见属性设置为VIEW.INVISIBLE，还是会计算该view大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child.getVisibility() == View.GONE) &#123;</span><br><span class=\"line\">           i += getChildrenSkipCount(child, i);</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 记录子View是否有weight属性设置，用于后面判断是否需要二次measure</span></span><br><span class=\"line\">        totalWeight += lp.weight;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class=\"number\">0</span> &amp;&amp; lp.weight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果LinearLayout的specMode为EXACTLY且子View设置了weight属性，在这里会跳过子View的measure过程</span></span><br><span class=\"line\">            <span class=\"comment\">// 同时标记skippedMeasure属性为true，后面会根据该属性决定是否进行第二次measure</span></span><br><span class=\"line\">            <span class=\"comment\">// 若LinearLayout的子View设置了weight，会进行两次measure计算，比较耗时</span></span><br><span class=\"line\">            <span class=\"comment\">// 这就是为什么LinearLayout的子View需要使用weight属性时候，最好替换成RelativeLayout布局</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\">            mTotalLength = Math.max(totalLength, totalLength + lp.topMargin + lp.bottomMargin);</span><br><span class=\"line\">            skippedMeasure = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> oldHeight = Integer.MIN_VALUE;</span><br><span class=\"line\">            <span class=\"comment\">// 步骤1：遍历所有子View &amp; 测量：measureChildren（）</span></span><br><span class=\"line\">            <span class=\"comment\">// 注：该方法内部，最终会调用measureChildren（），从而 遍历所有子View &amp; 测量</span></span><br><span class=\"line\">            measureChildBeforeLayout(child, i, widthMeasureSpec, <span class=\"number\">0</span>, heightMeasureSpec, totalWeight == <span class=\"number\">0</span> ? mTotalLength : <span class=\"number\">0</span>);</span><br><span class=\"line\">                   ...</span><br><span class=\"line\">            <span class=\"comment\">//步骤2：合并所有子View的尺寸大小,最终得到ViewGroup父视图的测量值（自身实现）</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeight = child.getMeasuredHeight();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 1. mTotalLength用于存储LinearLayout在竖直方向的高度</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> totalLength = mTotalLength;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 2. 每测量一个子View的高度， mTotalLength就会增加</span></span><br><span class=\"line\">            mTotalLength = Math.max(totalLength, totalLength + childHeight + lp.topMargin +</span><br><span class=\"line\">                           lp.bottomMargin + getNextLocationOffset(child));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 3. 记录LinearLayout占用的总高度</span></span><br><span class=\"line\">    <span class=\"comment\">// 即除了子View的高度，还有本身的padding属性值</span></span><br><span class=\"line\">    mTotalLength += mPaddingTop + mPaddingBottom;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightSize = mTotalLength;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heightSizeAndState = resolveSizeAndState(heightSize, heightMeasureSpec, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//步骤3：存储测量后View宽/高的值：调用setMeasuredDimension()</span></span><br><span class=\"line\">    setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState), heightSizeAndState);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取view的宽高\">获取View的宽高<a title=\"#获取view的宽高\" href=\"#获取view的宽高\"></a></h3>\n<blockquote>\n<p>Activity 启动时，在 onCreate()、onStart()、onResume() 中均无法正确的得到某个 View 的宽高信息，这是因为 View 的 measure 过程和 Activity 的生命周期方法不是同步执行的</p>\n</blockquote>\n<ul>\n<li>onWindowFocusChanged()\n<ul>\n<li>需要注意的是，onWindowFocusChanged() 会被调用多次，当 Activity 的窗口得到焦点和失去焦点时均会被调用一次。</li>\n</ul>\n</li>\n<li>View.post(runnable)</li>\n<li>ViewTreeObserver</li>\n<li>手动调用 View 的 measure 方法</li>\n</ul>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://blog.csdn.net/u010289802/article/details/80183142\" target=\"_blank\">Android 知识体系学习目录_lerendan的博客-CSDN博客</a></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/SA664RldODNgeCrz/",
            "url": "https://onion99.github.io/2021/11/04/SA664RldODNgeCrz/",
            "title": "自定义View(5) - 动画",
            "date_published": "2021-11-03T21:59:44.000Z",
            "content_html": "<blockquote>\n<p>三者性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，差别只是使用的便捷性以及功能的灵活性。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFf4h9.gif\" alt=\"IFf4h9.gif\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"viewpropertyanimator\">ViewPropertyAnimator<a title=\"#viewpropertyanimator\" href=\"#viewpropertyanimator\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.animate()</span><br><span class=\"line\">        .scaleX(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .scaleY(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .alpha(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"objectanimator\">ObjectAnimator<a title=\"#objectanimator\" href=\"#objectanimator\"></a></h3>\n<blockquote>\n<p>多个动画配合执行</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;scaleX&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;scaleY&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">PropertyValuesHolder holder3 = PropertyValuesHolder.ofFloat(<span class=\"string\">&quot;alpha&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder1, holder2, holder3)</span><br><span class=\"line\">animator.start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"valueanimator\">ValueAnimator<a title=\"#valueanimator\" href=\"#valueanimator\"></a></h3>\n<blockquote>\n<p>ValueAnimator 本身不作用于任何一个属性，也不提供任何一种动画。它就是一个数值发生器，可以产生想要的各种数值</p>\n</blockquote>\n<p>ValueAnimator 并不常用，因为它的功能太基础了。ValueAnimator 是 ObjectAnimator 的父类，实际上，ValueAnimator 就是一个不能指定目标对象版本的 ObjectAnimato</p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/ZOnr24kULe7cQgsc/",
            "url": "https://onion99.github.io/2021/11/04/ZOnr24kULe7cQgsc/",
            "title": "自定义View(4) - Canvas相关",
            "date_published": "2021-11-03T21:58:53.000Z",
            "content_html": "<h3 id=\"范围裁切\">范围裁切<a title=\"#范围裁切\" href=\"#范围裁切\"></a></h3>\n<h4 id=\"cliprect\">clipRect<a title=\"#cliprect\" href=\"#cliprect\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFKTER.png\" alt=\"IFKTER.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.clipRect(left, top, right, bottom);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, x, y, paint);</span><br><span class=\"line\"><span class=\"comment\">// 加上 Canvas.save() 和 Canvas.restore() 来及时恢复绘制范围</span></span><br><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.clipRect(left, top, right, bottom);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, x, y, paint);</span><br><span class=\"line\">canvas.restore();</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"clippath\">clipPath<a title=\"#clippath\" href=\"#clippath\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFM9UI.md.png\" alt=\"IFM9UI.md.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.clipPath(path1);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</span><br><span class=\"line\">canvas.restore();</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.clipPath(path2);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, point2.x, point2.y, paint);</span><br><span class=\"line\">canvas.restore();</span><br></pre></td></tr></table></figure>\n<h3 id=\"几何变换\">几何变换<a title=\"#几何变换\" href=\"#几何变换\"></a></h3>\n<h4 id=\"二维变换\">二维变换<a title=\"#二维变换\" href=\"#二维变换\"></a></h4>\n<blockquote>\n<p>处理常见的二维变换</p>\n</blockquote>\n<ul>\n<li><code>Canvas.translate()</code> 平移</li>\n<li><code>Canvas.rotate()</code> 旋转</li>\n<li><code>Canvas.scale()</code> 缩放</li>\n<li><code>Canvas.skew()</code> 错切</li>\n</ul>\n<h4 id=\"matrix变换\">Matrix变换<a title=\"#matrix变换\" href=\"#matrix变换\"></a></h4>\n<blockquote>\n<p>用来处理不常见的二维变换</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFn6qs.png\" alt=\"IFn6qs.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><code>Canvas.setMatrix(matrix)</code>\n<ul>\n<li>用 <code>Matrix</code> 直接替换 <code>Canvas</code> 当前的变换矩阵，即抛弃 <code>Canvas</code> 当前的变换</li>\n</ul>\n</li>\n<li><code>Canvas.concat(matrix)</code>\n<ul>\n<li>用 <code>Canvas</code> 当前的变换矩阵和 <code>Matrix</code> 相乘，即基于 <code>Canvas</code> 当前的变换，叠加上 <code>Matrix</code> 中的变换</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\"><span class=\"keyword\">float</span> pointsSrc = &#123;left, top, right, top, left, bottom, right, bottom&#125;;</span><br><span class=\"line\"><span class=\"keyword\">float</span> pointsDst = &#123;left - <span class=\"number\">10</span>, top + <span class=\"number\">50</span>, right + <span class=\"number\">120</span>, top - <span class=\"number\">90</span>, left + <span class=\"number\">20</span>, bottom + <span class=\"number\">30</span>, right + <span class=\"number\">20</span>, bottom + <span class=\"number\">60</span>&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\">matrix.reset();</span><br><span class=\"line\">matrix.setPolyToPoly(pointsSrc, <span class=\"number\">0</span>, pointsDst, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.concat(matrix);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, x, y, paint);</span><br><span class=\"line\">canvas.restore();</span><br></pre></td></tr></table></figure>\n<h4 id=\"camera\">Camera<a title=\"#camera\" href=\"#camera\"></a></h4>\n<blockquote>\n<p>处理三维旋转</p>\n</blockquote>\n<h5 id=\"camera.rotate*\">Camera.rotate*<a title=\"#camera.rotate*\" href=\"#camera.rotate*\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IFZoMd.md.png\" alt=\"IFZoMd.md.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Camera camera =  <span class=\"keyword\">new</span>  Camera();</span><br><span class=\"line\">Point point1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">200</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">Point point2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">600</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">   canvas.save();</span><br><span class=\"line\">   camera.save(); <span class=\"comment\">// 保存 Camera 的状态</span></span><br><span class=\"line\">   camera.rotateX(<span class=\"number\">30</span>); <span class=\"comment\">// 旋转 Camera 的三维空间</span></span><br><span class=\"line\">   camera.applyToCanvas(canvas); <span class=\"comment\">// 把旋转投影到 Canvas</span></span><br><span class=\"line\">   camera.restore(); <span class=\"comment\">// 恢复 Camera 的状态</span></span><br><span class=\"line\">   canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</span><br><span class=\"line\">   canvas.restore();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>居中处理:<br>\n<img src=\"https://z3.ax1x.com/2021/11/02/IFesfS.png\" alt=\"IFesfS.png\" loading=\"lazy\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> bitmapWidth = bitmap.getWidth();</span><br><span class=\"line\"><span class=\"keyword\">int</span> bitmapHeight = bitmap.getHeight();</span><br><span class=\"line\"><span class=\"keyword\">int</span> center1X = point1.x + bitmapWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> center1Y = point1.y + bitmapHeight / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> center2X = point2.x + bitmapWidth / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> center2Y = point2.y + bitmapHeight / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">camera.save();</span><br><span class=\"line\">matrix.reset();</span><br><span class=\"line\">camera.rotateX(<span class=\"number\">30</span>);</span><br><span class=\"line\">camera.getMatrix(matrix);</span><br><span class=\"line\">camera.restore();</span><br><span class=\"line\">matrix.preTranslate(-center1X, -center1Y);</span><br><span class=\"line\">matrix.postTranslate(center1X, center1Y);</span><br><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.concat(matrix);</span><br><span class=\"line\">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</span><br><span class=\"line\">canvas.restore();</span><br></pre></td></tr></table></figure>\n<h5 id=\"camera.translate\">Camera.translate<a title=\"#camera.translate\" href=\"#camera.translate\"></a></h5>\n<h5 id=\"camera.setlocation\">Camera.setLocation<a title=\"#camera.setlocation\" href=\"#camera.setlocation\"></a></h5>\n<blockquote>\n<p>设置虚拟相机的位置</p>\n</blockquote>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/04/VjI1fQxy8MSFqUqm/",
            "url": "https://onion99.github.io/2021/11/04/VjI1fQxy8MSFqUqm/",
            "title": "自定义View(3) - Text相关",
            "date_published": "2021-11-03T21:57:48.000Z",
            "content_html": "<h3 id=\"文字绘制(canvas)\">文字绘制(Canvas)<a title=\"#文字绘制(canvas)\" href=\"#文字绘制(canvas)\"></a></h3>\n<h4 id=\"绘制方式\">绘制方式<a title=\"#绘制方式\" href=\"#绘制方式\"></a></h4>\n<h5 id=\"drawtext\">drawText<a title=\"#drawtext\" href=\"#drawtext\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IiheJA.png\" alt=\"IiheJA.png\" loading=\"lazy\" class=\"φbp\"></p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String text = <span class=\"string\">&quot;Hello HenCoder&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">canvas.drawText(text, <span class=\"number\">200</span>, <span class=\"number\">100</span>, paint);</span><br></pre></td></tr></table></figure>\n<h5 id=\"drawtextrun\">drawTextRun<a title=\"#drawtextrun\" href=\"#drawtextrun\"></a></h5>\n<h5 id=\"drawtextonpath\">drawTextOnPath<a title=\"#drawtextonpath\" href=\"#drawtextonpath\"></a></h5>\n<blockquote>\n<p>沿着一条 Path 来绘制文字</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/IihNzq.png\" alt=\"IihNzq.png\" loading=\"lazy\"><br>\n<code>drawTextOnPath()</code> 使用的 <code>Path</code> ，拐弯处全用圆角，别用尖角</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas.drawPath(path, paint); <span class=\"comment\">// 把 Path 也绘制出来，理解起来更方便</span></span><br><span class=\"line\">canvas.drawTextOnPath(<span class=\"string\">&quot;Hello HeCoder&quot;</span>, path, <span class=\"number\">0</span>, <span class=\"number\">0</span>, paint);</span><br></pre></td></tr></table></figure>\n<h5 id=\"staticlayout\">StaticLayout<a title=\"#staticlayout\" href=\"#staticlayout\"></a></h5>\n<blockquote>\n<p>进行多行文字的绘制</p>\n</blockquote>\n<ul>\n<li>View 的边缘自动折行</li>\n<li>在换行符 <code>\\n</code> 处换行</li>\n</ul>\n<p><img src=\"https://z3.ax1x.com/2021/11/02/Iih7Yd.md.png\" alt=\"Iih7Yd.md.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String text1 = <span class=\"string\">&quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry.&quot;</span>;</span><br><span class=\"line\">StaticLayout staticLayout1 = <span class=\"keyword\">new</span> StaticLayout(text1, paint, <span class=\"number\">600</span>,</span><br><span class=\"line\">        Layout.Alignment.ALIGN_NORMAL, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">String text2 = <span class=\"string\">&quot;a\\nbc\\ndefghi\\njklm\\nnopqrst\\nuvwx\\nyz&quot;</span>;</span><br><span class=\"line\">StaticLayout staticLayout2 = <span class=\"keyword\">new</span> StaticLayout(text2, paint, <span class=\"number\">600</span>,</span><br><span class=\"line\">        Layout.Alignment.ALIGN_NORMAL, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.save();</span><br><span class=\"line\">canvas.translate(<span class=\"number\">50</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">staticLayout1.draw(canvas);</span><br><span class=\"line\">canvas.translate(<span class=\"number\">0</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">staticLayout2.draw(canvas);</span><br><span class=\"line\">canvas.restore();</span><br></pre></td></tr></table></figure>\n<h3 id=\"文字绘制辅助(paint)\">文字绘制辅助(Paint)<a title=\"#文字绘制辅助(paint)\" href=\"#文字绘制辅助(paint)\"></a></h3>\n<h4 id=\"样式设置\">样式设置<a title=\"#样式设置\" href=\"#样式设置\"></a></h4>\n<ul>\n<li><code>setTextSize(float textSize)</code></li>\n<li><code>setTypeface(Typeface typeface)</code></li>\n<li><code>setFakeBoldText(boolean fakeBoldText)</code>是否使用伪粗体</li>\n<li><code>setStrikeThruText(boolean strikeThruText)</code>是否加删除线</li>\n<li><code>setUnderlineText(boolean underlineText)</code></li>\n<li><code>setTextSkewX(float skewX)</code> 文字横切角度</li>\n<li><code>setTextScaleX(float scaleX)</code></li>\n<li><code>setLetterSpacing(float letterSpacing)</code> 字符间距</li>\n<li><code>setFontFeatureSettings(String settings)</code></li>\n<li><code>setTextAlign(Paint.Align align)</code></li>\n<li><code>setTextLocale(Locale locale)</code>语言区域</li>\n<li><code>setHinting(int mode)</code>字体微调</li>\n<li><code>setSubpixelText(boolean subpixelText)</code>是否开启像素级的抗锯齿</li>\n</ul>\n<h4 id=\"测量\">测量<a title=\"#测量\" href=\"#测量\"></a></h4>\n<ul>\n<li><code>getFontSpacing()</code> 获取推荐的行距\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IiboRg.png\" alt=\"IiboRg.png\" loading=\"lazy\" class=\"φbp\"></li>\n</ul>\n</li>\n<li><code>getFontMetrics()</code>\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IibtM9.png\" alt=\"IibtM9.png\" loading=\"lazy\" class=\"φbp\"></li>\n</ul>\n</li>\n<li><code>getTextBounds()</code> 获取文字范围</li>\n<li><code>measureText()</code>测量文字的宽度并返回</li>\n<li><code>getTextWidths()</code>获取字符串中每个字符的宽度</li>\n<li><code>breakText()</code> 和 <code>measureText()</code> 的区别是， breakText() 是在给出宽度上限的前提下测量文字的宽度。如果文字的宽度超出了上限，那么在临近超限的位置截断文字</li>\n<li>光标相关\n<ul>\n<li><code>getRunAdvance()</code>计算出某个字符处光标的 <code>x</code> 坐标\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/Iibnrn.png\" alt=\"Iibnrn.png\" loading=\"lazy\" class=\"φbp\"></li>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IibMV0.md.png\" alt=\"IibMV0.md.png\" loading=\"lazy\" class=\"φbp\"></li>\n</ul>\n</li>\n<li><code>getOffsetForAdvance</code> 计算第几个字符最接近这个坐标</li>\n</ul>\n</li>\n<li><code>hasGlyph()</code>检查指定的字符串中是否是一个单独的字形\n<ul>\n<li><img src=\"https://z3.ax1x.com/2021/11/02/IiH9tU.png\" alt=\"IiH9tU.png\" loading=\"lazy\" class=\"φbp\"></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/02/weRgrdLnBqIUWkcH/",
            "url": "https://onion99.github.io/2021/11/02/weRgrdLnBqIUWkcH/",
            "title": "自定义View(2) - Paint相关",
            "date_published": "2021-11-01T22:19:10.000Z",
            "content_html": "<h3 id=\"color\">Color<a title=\"#color\" href=\"#color\"></a></h3>\n<h4 id=\"基本颜色\">基本颜色<a title=\"#基本颜色\" href=\"#基本颜色\"></a></h4>\n<p>setColor(int color):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setColor(Color.parseColor(<span class=\"string\">&quot;#009688&quot;</span>));</span><br><span class=\"line\">canvas.drawRect(<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">230</span>, <span class=\"number\">180</span>, paint);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>setARGB(int a, int r, int g, int b)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setARGB(<span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">canvas.drawLine(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, paint);</span><br></pre></td></tr></table></figure>\n<h4 id=\"shader\">Shader<a title=\"#shader\" href=\"#shader\"></a></h4>\n<h5 id=\"lineargradient(线性渐变)\">LinearGradient(线性渐变)<a title=\"#lineargradient(线性渐变)\" href=\"#lineargradient(线性渐变)\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICK7e1.png\" alt=\"ICK7e1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader shader = <span class=\"keyword\">new</span> LinearGradient(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">500</span>, <span class=\"number\">500</span>, Color.parseColor(<span class=\"string\">&quot;#E91E63&quot;</span>),</span><br><span class=\"line\">        Color.parseColor(<span class=\"string\">&quot;#2196F3&quot;</span>), Shader.TileMode.CLAMP);</span><br><span class=\"line\">paint.setShader(shader);</span><br><span class=\"line\">...</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, paint);</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">CLAMP</th>\n<th style=\"text-align:center\">MIRROR</th>\n<th style=\"text-align:center\">REPEAT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICuIVP.png\" alt=\"ICuIVP.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICKWJU.png\" alt=\"ICKWJU.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICK5QJ.png\" alt=\"ICK5QJ.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"radialgradient(辐射渐变)\">RadialGradient(辐射渐变)<a title=\"#radialgradient(辐射渐变)\" href=\"#radialgradient(辐射渐变)\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IClQRU.png\" alt=\"IClQRU.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader shader = <span class=\"keyword\">new</span> RadialGradient(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, Color.parseColor(<span class=\"string\">&quot;#E91E63&quot;</span>),</span><br><span class=\"line\">        Color.parseColor(<span class=\"string\">&quot;#2196F3&quot;</span>), Shader.TileMode.CLAMP);</span><br><span class=\"line\">paint.setShader(shader);</span><br><span class=\"line\">...</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, paint);  </span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">CLAMP</th>\n<th style=\"text-align:center\">MIRROR</th>\n<th style=\"text-align:center\">REPEAT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IClfW8.png\" alt=\"IClfW8.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IC1SOJ.png\" alt=\"IC1SOJ.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IC1SOJ.png\" alt=\"IC1SOJ.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"sweepgradient(扫描渐变)\">SweepGradient(扫描渐变)<a title=\"#sweepgradient(扫描渐变)\" href=\"#sweepgradient(扫描渐变)\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC3N8K.png\" alt=\"IC3N8K.png\" loading=\"lazy\">]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader shader = <span class=\"keyword\">new</span> SweepGradient(<span class=\"number\">300</span>, <span class=\"number\">300</span>, Color.parseColor(<span class=\"string\">&quot;#E91E63&quot;</span>),</span><br><span class=\"line\">        Color.parseColor(<span class=\"string\">&quot;#2196F3&quot;</span>));</span><br><span class=\"line\">paint.setShader(shader);</span><br><span class=\"line\">...</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, paint);</span><br></pre></td></tr></table></figure>\n<h5 id=\"bitmapshader\">BitmapShader<a title=\"#bitmapshader\" href=\"#bitmapshader\"></a></h5>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC8dJ0.png\" alt=\"IC8dJ0.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.batman);</span><br><span class=\"line\">Shader shader = <span class=\"keyword\">new</span> BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class=\"line\">paint.setShader(shader);</span><br><span class=\"line\">...</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, paint);</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">CLAMP</th>\n<th style=\"text-align:center\">MIRROR</th>\n<th style=\"text-align:center\">REPEAT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICGhAs.png\" alt=\"ICGhAs.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICG7cT.png\" alt=\"ICG7cT.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICGLB4.png\" alt=\"ICGLB4.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"composeshader-混合着色器\">ComposeShader 混合着色器<a title=\"#composeshader-混合着色器\" href=\"#composeshader-混合着色器\"></a></h5>\n<blockquote>\n<p>所谓混合，就是把两个 Shader 一起使用。</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICUmdg.png\" alt=\"ICUmdg.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个 Shader：头像的 Bitmap</span></span><br><span class=\"line\">Bitmap bitmap1 = BitmapFactory.decodeResource(getResources(), R.drawable.batman);</span><br><span class=\"line\">Shader shader1 = <span class=\"keyword\">new</span> BitmapShader(bitmap1, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class=\"line\"><span class=\"comment\">// 第二个 Shader：从上到下的线性渐变（由透明到黑色）</span></span><br><span class=\"line\">Bitmap bitmap2 = BitmapFactory.decodeResource(getResources(), R.drawable.batman_logo);</span><br><span class=\"line\">Shader shader2 = <span class=\"keyword\">new</span> BitmapShader(bitmap2, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class=\"line\"><span class=\"comment\">// ComposeShader：结合两个 Shader</span></span><br><span class=\"line\">Shader shader = <span class=\"keyword\">new</span> ComposeShader(shader1, shader2, PorterDuff.Mode.SRC_OVER);</span><br><span class=\"line\">paint.setShader(shader);</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, paint);</span><br></pre></td></tr></table></figure>\n<h4 id=\"porterduff\">PorterDuff<a title=\"#porterduff\" href=\"#porterduff\"></a></h4>\n<h3 id=\"patheffect\">PathEffect<a title=\"#patheffect\" href=\"#patheffect\"></a></h3>\n<h4 id=\"style\">Style<a title=\"#style\" href=\"#style\"></a></h4>\n<p><code>Paint.setStrokeWidth</code>:线条宽度<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICvqQe.png\" alt=\"ICvqQe.png\" loading=\"lazy\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">paint.setStrokeWidth(<span class=\"number\">1</span>);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">150</span>, <span class=\"number\">125</span>, <span class=\"number\">100</span>, paint);</span><br><span class=\"line\">paint.setStrokeWidth(<span class=\"number\">5</span>);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">400</span>, <span class=\"number\">125</span>, <span class=\"number\">100</span>, paint);</span><br><span class=\"line\">paint.setStrokeWidth(<span class=\"number\">40</span>);</span><br><span class=\"line\">canvas.drawCircle(<span class=\"number\">650</span>, <span class=\"number\">125</span>, <span class=\"number\">100</span>, paint);</span><br></pre></td></tr></table></figure>\n<p><code>Paint.setStrokeCap</code>:线条形状</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICxkLj.png\" alt=\"ICxkLj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>Paint.setStrokeJoin</code>:拐角形状</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICxQlF.png\" alt=\"ICxQlF.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>Paint.setStrokeMiter</code>:拐角边缘</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICzenH.png\" alt=\"image\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"filter\">Filter<a title=\"#filter\" href=\"#filter\"></a></h4>\n<p><code>PathEffect.setDither()</code>:图像抖动<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICL31H.png\" alt=\"ICL31H.png\" loading=\"lazy\"></p>\n<p><code>PathEffect.setFilterBitmap()</code>:双线性过滤<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICvZ8O.png\" alt=\"ICvZ8O.png\" loading=\"lazy\"></p>\n<h4 id=\"effect\">Effect<a title=\"#effect\" href=\"#effect\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CornerPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICgRkq.png\" alt=\"ICgRkq.png\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DiscretePathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICgGOH.png\" alt=\"ICgGOH.png\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DashPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICcXQg.png\" alt=\"ICcXQg.png\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PathDashPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/IC6T8U.png\" alt=\"IC6T8U.png\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SumPathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICyBpF.png\" alt=\"ICyBpF.png\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ComposePathEffect</td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICy8yj.png\" alt=\"ICy8yj.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"shadowlayer\">ShadowLayer<a title=\"#shadowlayer\" href=\"#shadowlayer\"></a></h4>\n<blockquote>\n<p>绘制层下方的阴影效果</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICstPO.png\" alt=\"ICstPO.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setShadowLayer(<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, Color.RED);</span><br><span class=\"line\">canvas.drawText(text, <span class=\"number\">80</span>, <span class=\"number\">300</span>, paint);</span><br></pre></td></tr></table></figure>\n<h4 id=\"maskfilter\">MaskFilter<a title=\"#maskfilter\" href=\"#maskfilter\"></a></h4>\n<blockquote>\n<p>绘制层上方的附加效果</p>\n</blockquote>\n<p>BlurMaskFilter(模糊效果):</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICrhE6.md.png\" alt=\"ICrhE6.md.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setMaskFilter(<span class=\"keyword\">new</span> BlurMaskFilter(<span class=\"number\">50</span>, BlurMaskFilter.Blur.NORMAL));</span><br><span class=\"line\">canvas.drawBitmap(bitmap, <span class=\"number\">100</span>, <span class=\"number\">100</span>, paint);</span><br></pre></td></tr></table></figure>\n<p>EmbossMaskFilter(浮雕效果):<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICr0EV.png\" alt=\"ICr0EV.png\" loading=\"lazy\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组:光源方向,光强度,炫光系数,应用光线范围 </span></span><br><span class=\"line\">paint.setMaskFilter(<span class=\"keyword\">new</span> EmbossMaskFilter(<span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[]&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;, <span class=\"number\">0.2f</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">canvas.drawBitmap(bitmap, <span class=\"number\">100</span>, <span class=\"number\">100</span>, paint);</span><br></pre></td></tr></table></figure>\n<h4 id=\"getpath\">getPath<a title=\"#getpath\" href=\"#getpath\"></a></h4>\n<p><code>PathEffect.getFillPath()</code>获取图形Path</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICDOtU.md.png\" alt=\"ICDOtU.md.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><code>PathEffect.getTextPath()</code>获取图形Path</p>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICDAQs.png\" alt=\"ICDAQs.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"refer\">Refer<a title=\"#refer\" href=\"#refer\"></a></h3>\n<p><a href=\"https://rengwuxian.com/ui-1-2/\" target=\"_blank\">HenCoder Android 开发进阶: 自定义 View 1-2 Paint 详解 (rengwuxian.com)</a></p>\n",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/02/K0uh0dFU4QBtZ8Wm/",
            "url": "https://onion99.github.io/2021/11/02/K0uh0dFU4QBtZ8Wm/",
            "title": "自定义View(1) - 基本绘制",
            "date_published": "2021-11-01T22:17:37.000Z",
            "content_html": "<blockquote>\n<p>简单的绘制基本由<code>Canvas.drawxxx()</code>和Paint的配置组成</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/IC9uZj.png\" alt=\"IC9uZj.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PaintView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>) : View(context, attrs, defStyleAttr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mPaint <span class=\"keyword\">by</span> lazy &#123; Paint() &#125;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDraw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas)</span><br><span class=\"line\">    paint.setColor(Color.RED)<span class=\"comment\">// 设置为红色</span></span><br><span class=\"line\">    canvas.drawCircle(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, paint)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"canvas\">Canvas<a title=\"#canvas\" href=\"#canvas\"></a></h3>\n<ul>\n<li><code>Canvas.drawArc()</code> 绘制弧形或扇形<br>\n+ <code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code> 描述的是这个弧形所在的椭圆<br>\n+ <code>startAngle</code> 是弧形的起始角度<br>\n+ <code>sweepAngle</code> 是弧形划过的角度<br>\n+ <code>useCenter</code> 表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形</li>\n<li><code>Canvas.drawPath()</code> 组合图形</li>\n</ul>\n<h3 id=\"paint\">Paint<a title=\"#paint\" href=\"#paint\"></a></h3>\n<ul>\n<li><code>Paint.setStyle(Style style)</code>  设置绘制模式</li>\n<li><code>Paint.setColor(int color)</code>  设置颜色</li>\n<li><code>Paint.setStrokeWidth(float width)</code>  设置线条宽度</li>\n<li><code>Paint.setTextSize(float textSize)</code>  设置文字大小</li>\n<li><code>Paint.setAntiAlias(boolean aa)</code>  设置抗锯齿开关</li>\n</ul>\n<h3 id=\"path\">Path<a title=\"#path\" href=\"#path\"></a></h3>\n<blockquote>\n<p>如果只画一个圆，没必要用 Path，直接用 drawCircle() 就行了。drawPath() 一般是在绘制组合图形时才会用到的</p>\n</blockquote>\n<h4 id=\"path.addxxx\">Path.addXxx<a title=\"#path.addxxx\" href=\"#path.addxxx\"></a></h4>\n<blockquote>\n<p>添加子图形</p>\n</blockquote>\n<p><code>path.addCircle(300, 300, 200, Path.Direction.CW)</code></p>\n<h4 id=\"path.xxxto\">Path.xxxTo<a title=\"#path.xxxto\" href=\"#path.xxxto\"></a></h4>\n<blockquote>\n<p>用于画线（直线或曲线）</p>\n</blockquote>\n<p><code>lineTo(float x, float y) / rLineTo(float x, float y) </code>画直线:<br>\n<img src=\"https://z3.ax1x.com/2021/11/01/ICkWGR.png\" alt=\"ICkWGR.png\" loading=\"lazy\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setStyle(Style.STROKE);</span><br><span class=\"line\">path.lineTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>); <span class=\"comment\">// 由当前位置 (0, 0) 向 (100, 100) 画一条直线</span></span><br><span class=\"line\">path.rLineTo(<span class=\"number\">100</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 由当前位置 (100, 100) 向正右方 100 像素的位置画一条直线</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICASL8.png\" alt=\"ICASL8.png\" loading=\"lazy\">]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setStyle(Style.STROKE);</span><br><span class=\"line\">path.lineTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>); <span class=\"comment\">// 画斜线</span></span><br><span class=\"line\">path.moveTo(<span class=\"number\">200</span>, <span class=\"number\">100</span>); <span class=\"comment\">// 我移~~</span></span><br><span class=\"line\">path.lineTo(<span class=\"number\">200</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 画竖线</span></span><br></pre></td></tr></table></figure>\n<p><code>arcTo()</code> 和 <code>addArc()</code>画弧线:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">false</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICEuct.png\" alt=\"ICEuct.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICEinK.png\" alt=\"ICEinK.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setStyle(Style.STROKE);</span><br><span class=\"line\">path.lineTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">// true 直接连线连到弧形起点（有痕迹）</span></span><br><span class=\"line\"><span class=\"comment\">// false 强制移动到弧形起点（无痕迹）</span></span><br><span class=\"line\">path.arcTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, -<span class=\"number\">90</span>, <span class=\"number\">90</span>, <span class=\"keyword\">true</span>/<span class=\"keyword\">false</span>); </span><br><span class=\"line\"><span class=\"comment\">// 等同上面</span></span><br><span class=\"line\">paint.setStyle(Style.STROKE);</span><br><span class=\"line\">path.lineTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">path.addArc(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, -<span class=\"number\">90</span>, <span class=\"number\">90</span>); <span class=\"comment\">// addArc() 只是一个直接使用了 forceMoveTo = true 的简化版 arcTo()</span></span><br></pre></td></tr></table></figure>\n<p><code>close() </code>封闭当前子图形:</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">no close</th>\n<th style=\"text-align:center\">close</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICVaPH.png\" alt=\"ICVaPH.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICVgIg.png\" alt=\"ICVgIg.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paint.setStyle(Style.STROKE);</span><br><span class=\"line\">path.moveTo(<span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">path.lineTo(<span class=\"number\">200</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">path.lineTo(<span class=\"number\">150</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">path.close(); </span><br></pre></td></tr></table></figure>\n<h4 id=\"path.setfilltype\">Path.setFillType<a title=\"#path.setfilltype\" href=\"#path.setfilltype\"></a></h4>\n<blockquote>\n<p>设置填充方式</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/11/01/ICFucV.png\" alt=\"ICFucV.png\" loading=\"lazy\" class=\"φbp\"></p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:center\">EVEN_ODD:even-odd rule （奇偶原则）</th>\n<th style=\"text-align:center\">WINDING: non-zero winding rule （非零环绕数原则）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICFKXT.png\" alt=\"ICFKXT.png\" loading=\"lazy\"></td>\n<td style=\"text-align:center\"><img src=\"https://z3.ax1x.com/2021/11/01/ICFJhR.png\" alt=\"ICFJhR.png\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table></div></div>",
            "tags": [
                "图形绘制"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/15jfHwStpctgCeeA/",
            "url": "https://onion99.github.io/2021/11/01/15jfHwStpctgCeeA/",
            "title": "源码学习 - Glide",
            "date_published": "2021-10-31T21:29:17.000Z",
            "content_html": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(fragment)</span><br><span class=\"line\">    .load(myUrl)</span><br><span class=\"line\">    .into(imageView);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oUW5R.png\" alt=\"5oUW5R.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"with()\">with()<a title=\"#with()\" href=\"#with()\"></a></h3>\n<blockquote>\n<p>用Method初始化glide的一些必需的环境，然后调用Requestmanagerretriver的<code>get()</code>获取requestManager。如果传入的对象是全局Context，你就不需要处理生命周期;如果输入是具有生命周期的View(包含Frg或Act)则将添加一个隐藏的Fragment来感知生命周期</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestManager <span class=\"title\">with</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Context context)</span> </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> getRetriever(context).get(context);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"getretriever()\">getRetriever()<a title=\"#getretriever()\" href=\"#getretriever()\"></a></h4>\n<blockquote>\n<p>RequestManagerRetriever,用于创建新的RequestManager或从Activity和Fragment中检索现有的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RequestManagerRetriever <span class=\"title\">getRetriever</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Context context)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 由于其他原因，上下文可能为空（即用户传入空值），但实际上它只会由于 Fragment 生命周期的错误而发生。</span></span><br><span class=\"line\">  Preconditions.checkNotNull(</span><br><span class=\"line\">      context,<span class=\"string\">&quot;You cannot start a load on a not yet attached View or a Fragment where getActivity() &quot;</span></span><br><span class=\"line\">          + <span class=\"string\">&quot;returns null (which usually occurs when getActivity() is called before the Fragment &quot;</span></span><br><span class=\"line\">          + <span class=\"string\">&quot;is attached or after the Fragment is destroyed).&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取RequestManagerRetriever</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Glide.get(context).getRequestManagerRetriever();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"get()\">get()<a title=\"#get()\" href=\"#get()\"></a></h4>\n<blockquote>\n<p>单例实现Glide的初始化</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双重检查锁定在这里是安全的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> static Glide <span class=\"keyword\">get</span>(<span class=\"meta\">@NonNull</span> Context context) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (glide == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过反射GeneratedAppGlideModuleImpl实例化Glide</span></span><br><span class=\"line\">    GeneratedAppGlideModule annotationGeneratedModule =</span><br><span class=\"line\">        getAnnotationGeneratedGlideModules(context.getApplicationContext()); </span><br><span class=\"line\">    synchronized (Glide.<span class=\"keyword\">class</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (glide == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        checkAndInitializeGlide(context, annotationGeneratedModule);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> glide;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestmanagerretriever.get()\">RequestManagerRetriever.get()<a title=\"#requestmanagerretriever.get()\" href=\"#requestmanagerretriever.get()\"></a></h4>\n<blockquote>\n<p>创建对应生命周期的RequestManager</p>\n</blockquote>\n<ul>\n<li>首先判断是在子线程,则拿一个全Context然后在工厂模式创建下RequestManager,所以推荐不要在子线程执行此操作</li>\n<li>如为FragmentActivity,则通过FragmentManager,创建一个空Fragment放进当前<code>Fragment</code>或者<code>Activity</code>,这样就可以感知宿主的生命周期,然后在工厂模式创建下RequestManager</li>\n<li>如为Activity…</li>\n<li>如为ContextWrapper…</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (activity <span class=\"keyword\">instanceof</span> FragmentActivity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get((FragmentActivity) activity);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertNotDestroyed(activity);</span><br><span class=\"line\">    frameWaiter.registerSelf(activity);</span><br><span class=\"line\">    android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragmentGet(activity, fm, <span class=\"comment\">/*parentHint=*/</span> <span class=\"keyword\">null</span>, isActivityVisible(activity));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// FragmentActivity Simple </span></span><br><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestManager <span class=\"title\">get</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> FragmentActivity activity)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get(activity.getApplicationContext());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assertNotDestroyed(activity);</span><br><span class=\"line\">    frameWaiter.registerSelf(activity);</span><br><span class=\"line\">    FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> supportFragmentGet(activity, fm, <span class=\"comment\">/*parentHint=*/</span> <span class=\"keyword\">null</span>, isActivityVisible(activity));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过supportFragment感知创建</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RequestManager <span class=\"title\">supportFragmentGet</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@NonNull</span> Context context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@NonNull</span> FragmentManager fm,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"meta\">@Nullable</span> Fragment parentHint,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">boolean</span> isParentVisible)</span> </span>&#123;</span><br><span class=\"line\">  SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);</span><br><span class=\"line\">  RequestManager requestManager = current.getRequestManager();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (requestManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 工厂模式创建</span></span><br><span class=\"line\">    Glide glide = Glide.get(context);</span><br><span class=\"line\">    requestManager =</span><br><span class=\"line\">        factory.build(</span><br><span class=\"line\">            glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class=\"line\">    <span class=\"comment\">// 这是一个小技巧，我们将启动 RequestManager，而不是相应的 Lifecycle。启动 RequestManager 是安全的，但启动 Lifecycle 可能会引发内存泄漏</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isParentVisible) &#123;</span><br><span class=\"line\">      requestManager.onStart();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    current.setRequestManager(requestManager);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> requestManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"load()\">load()<a title=\"#load()\" href=\"#load()\"></a></h3>\n<blockquote>\n<p>对全局变量赋值,构建ReqeustBuilder</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Drawable Simple</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestBuilder&lt;Drawable&gt; <span class=\"title\">load</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Drawable drawable)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> asDrawable().load(drawable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"into()\">into()<a title=\"#into()\" href=\"#into()\"></a></h3>\n<p>设置资源到加载的ImageView中 ，取消任何现有的加载，并释放 Glide 之前可能加载到ImageView的任何资源，以便它们可以被重用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置资源配置到TargetView</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewTarget&lt;ImageView, TranscodeType&gt; <span class=\"title\">into</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ImageView view)</span> </span>&#123;</span><br><span class=\"line\">    Util.assertMainThread();</span><br><span class=\"line\">    ···</span><br><span class=\"line\">    <span class=\"keyword\">return</span> into(</span><br><span class=\"line\">        glideContext.buildImageViewTarget(view, transcodeClass),</span><br><span class=\"line\">        <span class=\"comment\">/*targetListener=*/</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        requestOptions,</span><br><span class=\"line\">        Executors.mainThreadExecutor());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建TargetView</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;X&gt; <span class=\"function\">ViewTarget&lt;ImageView, X&gt; <span class=\"title\">buildImageViewTarget</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@NonNull</span> ImageView imageView, <span class=\"meta\">@NonNull</span> Class&lt;X&gt; transcodeClass)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageViewTargetFactory.buildTarget(imageView, transcodeClass);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 负责为指定的android.view.View子类生成正确类型的Target工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageViewTargetFactory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;Z&gt; <span class=\"function\">ViewTarget&lt;ImageView, Z&gt; <span class=\"title\">buildTarget</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@NonNull</span> ImageView view, <span class=\"meta\">@NonNull</span> Class&lt;Z&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Bitmap.class.equals(clazz)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class=\"keyword\">new</span> BitmapImageViewTarget(view);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Drawable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class=\"keyword\">new</span> DrawableImageViewTarget(view);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">          <span class=\"string\">&quot;Unhandled class: &quot;</span> + clazz + <span class=\"string\">&quot;, try .as*(Class).transcode(ResourceTranscoder)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"into()-1\">into()<a title=\"#into()-1\" href=\"#into()-1\"></a></h4>\n<blockquote>\n<p>核心代码加载代码，看起来简单但实现起来复杂。<br>\n首先看看 buildRequest 如何初始化 request</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class=\"function\">Y <span class=\"title\">into</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Y target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; options, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  Preconditions.checkNotNull(target);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isModelSet) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;You must call #load() before calling #into()&quot;</span>); &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 现在的请求</span></span><br><span class=\"line\">  Request request = buildRequest(target, targetListener, options, callbackExecutor);</span><br><span class=\"line\">  <span class=\"comment\">// 之前的请求</span></span><br><span class=\"line\">  Request previous = target.getRequest();</span><br><span class=\"line\">  <span class=\"comment\">// 如果之前的请求完成，重新开始以重新传递结果，触发 RequestListeners 和 Targets。如果请求失败，将重新请求，</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (request.isEquivalentTo(previous) &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果之前的请求已经在运行，我们可以让它继续运行而不中断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Preconditions.checkNotNull(previous).isRunning()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用先前的请求而不是新的请求来优化，例如跳过设置占位符、跟踪和取消跟踪目标以及获取在单个请求中完成的视图维度</span></span><br><span class=\"line\">      previous.begin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  requestManager.clear(target);</span><br><span class=\"line\">  target.setRequest(request);</span><br><span class=\"line\">  requestManager.track(target, request);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestbuilder.buildrequest()\">RequestBuilder.buildRequest()<a title=\"#requestbuilder.buildrequest()\" href=\"#requestbuilder.buildrequest()\"></a></h4>\n<blockquote>\n<p>根据存在的场景建立不同Request</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildRequest</span><span class=\"params\">(Target&lt;TranscodeType&gt; target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buildRequestRecursive(<span class=\"comment\">/*requestLock=*/</span> <span class=\"keyword\">new</span> Object(), target, targetListener,<span class=\"comment\">/*parentCoordinator=*/</span> <span class=\"keyword\">null</span>, transitionOptions, requestOptions.getPriority(), requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight(), requestOptions, callbackExecutor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildRequestRecursive</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, <span class=\"meta\">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener, <span class=\"meta\">@Nullable</span> RequestCoordinator parentCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如有必要首先构建 ErrorRequestCoordinator，以便我们可以更新 parentCoordinator。</span></span><br><span class=\"line\">  ErrorRequestCoordinator errorRequestCoordinator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorBuilder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    errorRequestCoordinator = <span class=\"keyword\">new</span> ErrorRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    parentCoordinator = errorRequestCoordinator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Request mainRequest = buildThumbnailRequestRecursive(requestLock, target, targetListener, parentCoordinator, transitionOptions, priority, overrideWidth, overrideHeight, requestOptions, callbackExecutor);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorRequestCoordinator == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> mainRequest;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> errorOverrideWidth = errorBuilder.getOverrideWidth();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> errorOverrideHeight = errorBuilder.getOverrideHeight();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !errorBuilder.isValidOverride()) &#123;</span><br><span class=\"line\">    errorOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class=\"line\">    errorOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Request errorRequest = errorBuilder.buildRequestRecursive(requestLock, target, targetListener, errorRequestCoordinator, errorBuilder.transitionOptions, errorBuilder.getPriority(), errorOverrideWidth, errorOverrideHeight, errorBuilder, callbackExecutor);</span><br><span class=\"line\">  errorRequestCoordinator.setRequests(mainRequest, errorRequest);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errorRequestCoordinator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestbuilder.buildthumbnailrequestrecursive()\">RequestBuilder.buildThumbnailRequestRecursive()<a title=\"#requestbuilder.buildthumbnailrequestrecursive()\" href=\"#requestbuilder.buildthumbnailrequestrecursive()\"></a></h4>\n<blockquote>\n<p>根据是否需要缩略图,生成各种不同的Request</p>\n</blockquote>\n<p>这里经过一层又一层最终拿到一个<code>SingleRequest</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">buildThumbnailRequestRecursive</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, RequestListener&lt;TranscodeType&gt; targetListener, <span class=\"meta\">@Nullable</span> RequestCoordinator parentCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, BaseRequestOptions&lt;?&gt; requestOptions, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (thumbnailBuilder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归案例：包含一个潜在的递归缩略图Request Builder</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThumbnailBuilt) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">          <span class=\"string\">&quot;You cannot use a request as both the main request and a &quot;</span></span><br><span class=\"line\">              + <span class=\"string\">&quot;thumbnail, consider using clone() on the request(s) passed to thumbnail()&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; thumbTransitionOptions = thumbnailBuilder.transitionOptions;</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下我们的将过渡用在缩略图，但避免覆盖可能已明确应用于缩略图请求的自定义选项。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thumbnailBuilder.isDefaultTransitionOptionsSet) thumbTransitionOptions = transitionOptions;</span><br><span class=\"line\">    Priority thumbPriority = thumbnailBuilder.isPrioritySet() ? thumbnailBuilder.getPriority() : getThumbnailPriority(priority);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> thumbOverrideWidth = thumbnailBuilder.getOverrideWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> thumbOverrideHeight = thumbnailBuilder.getOverrideHeight();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight) &amp;&amp; !thumbnailBuilder.isValidOverride()) &#123;</span><br><span class=\"line\">      thumbOverrideWidth = requestOptions.getOverrideWidth();</span><br><span class=\"line\">      thumbOverrideHeight = requestOptions.getOverrideHeight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThumbnailRequestCoordinator coordinator = <span class=\"keyword\">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    Request fullRequest = obtainRequest(requestLock, target, targetListener, requestOptions, coordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    isThumbnailBuilt = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 递归生成缩略图请求</span></span><br><span class=\"line\">    Request thumbRequest = thumbnailBuilder.buildRequestRecursive(requestLock, target,targetListener, coordinator, thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight, thumbnailBuilder, callbackExecutor);</span><br><span class=\"line\">    isThumbnailBuilt = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    coordinator.setRequests(fullRequest, thumbRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (thumbSizeMultiplier != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本情况：缩略图Multiplier生成缩略图请求，但不能递归。</span></span><br><span class=\"line\">    ThumbnailRequestCoordinator coordinator = <span class=\"keyword\">new</span> ThumbnailRequestCoordinator(requestLock, parentCoordinator);</span><br><span class=\"line\">    Request fullRequest = obtainRequest(requestLock, target, targetListener, requestOptions, coordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    BaseRequestOptions&lt;?&gt; thumbnailOptions = requestOptions.clone().sizeMultiplier(thumbSizeMultiplier);</span><br><span class=\"line\">    Request thumbnailRequest = obtainRequest(requestLock, target, targetListener, thumbnailOptions, coordinator, transitionOptions, getThumbnailPriority(priority), overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">    coordinator.setRequests(fullRequest, thumbnailRequest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coordinator;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本情况：没有缩略图</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obtainRequest(requestLock, target, targetListener, requestOptions, parentCoordinator, transitionOptions, priority, overrideWidth, overrideHeight, callbackExecutor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Request <span class=\"title\">obtainRequest</span><span class=\"params\">(Object requestLock, Target&lt;TranscodeType&gt; target, RequestListener&lt;TranscodeType&gt; targetListener, BaseRequestOptions&lt;?&gt; requestOptions, RequestCoordinator requestCoordinator, TransitionOptions&lt;?, ? <span class=\"keyword\">super</span> TranscodeType&gt; transitionOptions, Priority priority, <span class=\"keyword\">int</span> overrideWidth, <span class=\"keyword\">int</span> overrideHeight, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> SingleRequest.obtain(context, glideContext, requestLock, model, transcodeClass, requestOptions, overrideWidth, overrideHeight, priority, target, targetListener, requestListeners, requestCoordinator, glideContext.getEngine(), transitionOptions.getTransitionFactory(), callbackExecutor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"requestmanager.track()\">RequestManager.track()<a title=\"#requestmanager.track()\" href=\"#requestmanager.track()\"></a></h4>\n<p>这里Glide将判断请求是否需要显示，如果它需要现在显示则开始执行，否则clear( )，并将请求放入队列。这种设计更精巧，省电</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">track</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Target&lt;?&gt; target, <span class=\"meta\">@NonNull</span> Request request)</span> </span>&#123;  </span><br><span class=\"line\">  targetTracker.track(target);  </span><br><span class=\"line\">  requestTracker.runRequest(request);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** 开始跟踪给定的请求 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runRequest</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Request request)</span> </span>&#123;</span><br><span class=\"line\">  requests.add(request);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isPaused) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 启动异步加载</span></span><br><span class=\"line\">    request.begin();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 防止从以前的请求加载任何位图，释放此请求持有的任何资源，显示当前占位符（如果提供），并将请求标记为已取消</span></span><br><span class=\"line\">    request.clear();</span><br><span class=\"line\">    pendingRequests.add(request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"singlerequest.begin()\">SingleRequest.begin()<a title=\"#singlerequest.begin()\" href=\"#singlerequest.begin()\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (requestLock) &#123;</span><br><span class=\"line\">    assertNotCallingCallbacks();</span><br><span class=\"line\">    stateVerifier.throwIfRecycled();</span><br><span class=\"line\">    startTime = LogTime.getLogTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (model == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class=\"line\">        width = overrideWidth;</span><br><span class=\"line\">        height = overrideHeight;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果用户设置可回调的Drawables,这里进行日志反馈</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> logLevel = getFallbackDrawable() == <span class=\"keyword\">null</span> ? Log.WARN : Log.DEBUG;</span><br><span class=\"line\">      onLoadFailed(<span class=\"keyword\">new</span> GlideException(<span class=\"string\">&quot;Received null model&quot;</span>), logLevel);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == Status.RUNNING) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">&quot;Cannot restart a running request&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们在完成后重新启动(通常是通过notifyDataSetChanged之类的方式，向相同的目标或视图启动相同的请求)，我们可以简单地使用上次检索到的资源和大小，而跳过获取一个新的大小，开始一个新的加载等(这意味着希望重新启动加载的用户需要在开始新的加载之前显式地清除view或Target，因为他们觉得视图大小已经改变。)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == Status.COMPLETE) &#123;</span><br><span class=\"line\">      onResourceReady(resource, DataSource.MEMORY_CACHE, <span class=\"comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于既未完成也未运行的请求，重新启动可以被视为新请求，并可以从头开始运行</span></span><br><span class=\"line\">    cookie = GlideTrace.beginSectionAsync(TAG);</span><br><span class=\"line\">    status = Status.WAITING_FOR_SIZE;</span><br><span class=\"line\">    <span class=\"comment\">// 如果宽高已指定,则回调onSizeReady ,否则再获取宽高</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class=\"line\">      onSizeReady(overrideWidth, overrideHeight);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target.getSize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE) &amp;&amp; canNotifyStatusChanged()) &#123;</span><br><span class=\"line\">      target.onLoadStarted(getPlaceholderDrawable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>onLoadFailed : 图片或者资源为空,报错回调</li>\n<li>onResourceReady: 最终通过<code>Engine.release( )</code>,释放资源</li>\n<li>onSizeReady: View大小已明确 , 执行<code>Engine.load()</code>加载资源</li>\n<li>getSize: 获取View大小</li>\n<li>onLoadStarted: 等待或运行中,占位图处理</li>\n</ul>\n<h4 id=\"singlerequest.onsizeready(-)\">SingleRequest.onSizeReady( )<a title=\"#singlerequest.onsizeready(-)\" href=\"#singlerequest.onsizeready(-)\"></a></h4>\n<blockquote>\n<p>启动给定参数进行图片的加载, 必须在主线程上调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeReady</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">  stateVerifier.throwIfRecycled();</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (requestLock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status != Status.WAITING_FOR_SIZE) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    status = Status.RUNNING;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> sizeMultiplier = requestOptions.getSizeMultiplier();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = maybeApplySizeMultiplier(width, sizeMultiplier);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = maybeApplySizeMultiplier(height, sizeMultiplier);</span><br><span class=\"line\">    loadStatus = engine.load(glideContext, model, requestOptions.getSignature(), <span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height, requestOptions.getResourceClass(), transcodeClass, priority, requestOptions.getDiskCacheStrategy(), requestOptions.getTransformations(), requestOptions.isTransformationRequired(), requestOptions.isScaleOnlyOrNoTransform(), requestOptions.getOptions(), requestOptions.isMemoryCacheable(), requestOptions.getUseUnlimitedSourceGeneratorsPool(), requestOptions.getUseAnimationPool(), requestOptions.getOnlyRetrieveFromCache(), <span class=\"keyword\">this</span>, callbackExecutor);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"engine.load(-)\">Engine.load( )<a title=\"#engine.load(-)\" href=\"#engine.load(-)\"></a></h4>\n<blockquote>\n<p>到这里想都不用想了,Engine才是真正加载图片的Class,<br>\nEngine负责执行图片加载和管理活动资源和缓存资源。</p>\n</blockquote>\n<p>活动资源是指那些至少提供一个请求但未释放的资源。一旦资源的所有使用者都释放了该资源，该资源就会进入缓存。如果资源从缓存中返回给新的使用者，它将被重新添加到活动资源中。<br>\n如果从缓存中移除资源，它的资源将被回收和重用(如果可能的话)，资源将被丢弃。没有严格要求消费者释放他们的资源，所以活跃的资源被弱持有。</p>\n<p>请求流程:</p>\n<ul>\n<li>检查当前使用的资源集，返回活动资源（如果存在），并将任何新的非活动资源移动到内存缓存中</li>\n<li>检查内存缓存并提供缓存资源（如果存在）</li>\n<li>检查当前的一组正在进行的加载并将 cb 添加到进行中的加载（如果存在）</li>\n<li>开始加载</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;R&gt; <span class=\"function\">LoadStatus <span class=\"title\">load</span><span class=\"params\">(GlideContext glideContext, Object model, Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Class&lt;?&gt; resourceClass, Class&lt;R&gt; transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations, <span class=\"keyword\">boolean</span> isTransformationRequired, <span class=\"keyword\">boolean</span> isScaleOnlyOrNoTransform, Options options, <span class=\"keyword\">boolean</span> isMemoryCacheable, <span class=\"keyword\">boolean</span> useUnlimitedSourceExecutorPool, <span class=\"keyword\">boolean</span> useAnimationPool, <span class=\"keyword\">boolean</span> onlyRetrieveFromCache, ResourceCallback cb, Executor callbackExecutor)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class=\"number\">0</span>;</span><br><span class=\"line\">  EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,resourceClass, transcodeClass, options);</span><br><span class=\"line\">  EngineResource&lt;?&gt; memoryResource;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有缓存,有则直接加载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memoryResource == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> waitForExistingOrStartNewJob(glideContext, model, signature, width, height, resourceClass, transcodeClass, priority, diskCacheStrategy, transformations, isTransformationRequired, isScaleOnlyOrNoTransform, options, isMemoryCacheable, useUnlimitedSourceExecutorPool, useAnimationPool, onlyRetrieveFromCache, cb, callbackExecutor, key, startTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 避免在保持Engine锁时回调，因为这样做会更容易死锁</span></span><br><span class=\"line\">  cb.onResourceReady(memoryResource, DataSource.MEMORY_CACHE, <span class=\"comment\">/* isLoadedFromAlternateCacheKey= */</span> <span class=\"keyword\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"engine.waitforexistingorstartnewjob(-)\">Engine.waitForExistingOrStartNewJob( )<a title=\"#engine.waitforexistingorstartnewjob(-)\" href=\"#engine.waitforexistingorstartnewjob(-)\"></a></h4>\n<blockquote>\n<p>等待或者执行任务</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;R&gt; <span class=\"function\">LoadStatus <span class=\"title\">waitForExistingOrStartNewJob</span><span class=\"params\">(GlideContext glideContext, Object model, Key signature, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, Class&lt;?&gt; resourceClass, Class&lt;R&gt; transcodeClass, Priority priority, DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations, <span class=\"keyword\">boolean</span> isTransformationRequired, <span class=\"keyword\">boolean</span> isScaleOnlyOrNoTransform, Options options, <span class=\"keyword\">boolean</span> isMemoryCacheable, <span class=\"keyword\">boolean</span> useUnlimitedSourceExecutorPool, <span class=\"keyword\">boolean</span> useAnimationPool, <span class=\"keyword\">boolean</span> onlyRetrieveFromCache, ResourceCallback cb, Executor callbackExecutor, EngineKey key, <span class=\"keyword\">long</span> startTime)</span> </span>&#123;</span><br><span class=\"line\">  EngineJob&lt;?&gt; current = jobs.get(key, onlyRetrieveFromCache);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    current.addCallback(cb, callbackExecutor);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, current);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  EngineJob&lt;R&gt; engineJob = engineJobFactory.build(key, isMemoryCacheable, useUnlimitedSourceExecutorPool, useAnimationPool, onlyRetrieveFromCache);</span><br><span class=\"line\">  DecodeJob&lt;R&gt; decodeJob = decodeJobFactory.build(glideContext, model, key, signature, width, height, resourceClass, transcodeClass, priority, diskCacheStrategy, transformations, isTransformationRequired, isScaleOnlyOrNoTransform, onlyRetrieveFromCache, options, engineJob);</span><br><span class=\"line\">  jobs.put(key, engineJob);</span><br><span class=\"line\">  engineJob.addCallback(cb, callbackExecutor);</span><br><span class=\"line\">  engineJob.start(decodeJob);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (VERBOSE_IS_LOGGABLE)  logWithTimeAndKey(<span class=\"string\">&quot;Started new load&quot;</span>, startTime, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LoadStatus(cb, engineJob);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"decodejob\">DecodeJob<a title=\"#decodejob\" href=\"#decodejob\"></a></h4>\n<blockquote>\n<p>负责从缓存数据或原始源中解码资源并应用转换和转码的类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCancelled) &#123;</span><br><span class=\"line\">      notifyFailed();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runWrapped();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runWrapped</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为了判断运行原因,这里做了三个判断</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (runReason) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INITIALIZE:</span><br><span class=\"line\">      <span class=\"comment\">// 获取当前解码数据的阶段</span></span><br><span class=\"line\">      stage = getNextStage(Stage.INITIALIZE);</span><br><span class=\"line\">      <span class=\"comment\">// 获取数据生成器</span></span><br><span class=\"line\">      currentGenerator = getNextGenerator();</span><br><span class=\"line\">      runGenerators();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SWITCH_TO_SOURCE_SERVICE:</span><br><span class=\"line\">      runGenerators();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DECODE_DATA:</span><br><span class=\"line\">      decodeFromRetrievedData();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Unrecognized run reason: &quot;</span> + runReason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"rungenerators(-)\">runGenerators( )<a title=\"#rungenerators(-)\" href=\"#rungenerators(-)\"></a></h5>\n<p>currentGenerator实现DataFetcherGenerator接口，这个接口主要用来生成一系列的modelLoader和model</p>\n<p>目前Glide有三种类生成器</p>\n<ul>\n<li>ResourceCacheGenerator</li>\n<li>DataCacheGenerator</li>\n<li>SourceGenerator</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runGenerators</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  currentThread = Thread.currentThread();</span><br><span class=\"line\">  startFetchTime = LogTime.getLogTime();</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> isStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// startNext -&gt; 尝试单个新的DataFetcher，如果DataFetcher已启动则返回true，否则返回false</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!isCancelled &amp;&amp; currentGenerator != <span class=\"keyword\">null</span> &amp;&amp; !(isStarted = currentGenerator.startNext())) &#123;</span><br><span class=\"line\">    stage = getNextStage(stage);</span><br><span class=\"line\">    currentGenerator = getNextGenerator();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stage == Stage.SOURCE) &#123;</span><br><span class=\"line\">      reschedule();</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We&#x27;ve run out of stages and generators, give up.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((stage == Stage.FINISHED || isCancelled) &amp;&amp; !isStarted) &#123;</span><br><span class=\"line\">    notifyFailed();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> DataFetcherGenerator <span class=\"title\">getNextGenerator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (stage) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> RESOURCE_CACHE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResourceCacheGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DATA_CACHE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataCacheGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SOURCE:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SourceGenerator(decodeHelper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FINISHED:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;Unrecognized stage: &quot;</span> + stage);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"sourcegenerator.startnext()\">SourceGenerator.startNext()<a title=\"#sourcegenerator.startnext()\" href=\"#sourcegenerator.startnext()\"></a></h6>\n<p>将首先判断，缓存如果它不是空的，调用 cacheData; 否则，获取 loadData，然后执行 startNextLoad ()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dataToCache != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    Object data = dataToCache;</span><br><span class=\"line\">    dataToCache = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> isDataInCache = cacheData(data);</span><br><span class=\"line\">      <span class=\"comment\">// 如果我们没有将数据写入缓存，cacheData方法将尝试直接解码原始数据，而不是通过磁盘缓存。因为此时cacheData已经调用了我们的回调函数，所以除了返回，没有其他事情可做了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isDataInCache) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果我们能够成功地将数据写入缓存，那么现在需要继续调用下面的sourceCacheGenerator来从缓存加载数据</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// IOException意味着我们无法将数据写入缓存，或者在磁盘缓存写入失败后无法倒带数据。无论哪种情况，我们都可以继续尝试下面的下一个取回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;Failed to properly rewind or write data to cache&quot;</span>, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sourceCacheGenerator != <span class=\"keyword\">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sourceCacheGenerator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadData = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> started = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class=\"line\">    loadData = helper.getLoadData().get(loadDataListIndex++);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadData != <span class=\"keyword\">null</span></span><br><span class=\"line\">        &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</span><br><span class=\"line\">            || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</span><br><span class=\"line\">      started = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      startNextLoad(loadData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> started;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"sourcegenerator.cachedata\">SourceGenerator.cacheData<a title=\"#sourcegenerator.cachedata\" href=\"#sourcegenerator.cachedata\"></a></h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果我们能够缓存数据，应该尝试直接从缓存解码数据，如果我们不能缓存数据，应该尝试从源解码，则返回false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cacheData</span><span class=\"params\">(Object dataToCache)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> isLoadingFromSourceData = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    DataRewinder&lt;Object&gt; rewinder = helper.getRewinder(dataToCache);</span><br><span class=\"line\">    Object data = rewinder.rewindAndGet();</span><br><span class=\"line\">    Encoder&lt;Object&gt; encoder = helper.getSourceEncoder(data);</span><br><span class=\"line\">    DataCacheWriter&lt;Object&gt; writer = <span class=\"keyword\">new</span> DataCacheWriter&lt;&gt;(encoder, data, helper.getOptions());</span><br><span class=\"line\">    DataCacheKey newOriginalKey = <span class=\"keyword\">new</span> DataCacheKey(loadData.sourceKey, helper.getSignature());</span><br><span class=\"line\">    DiskCache diskCache = helper.getDiskCache();</span><br><span class=\"line\">    diskCache.put(newOriginalKey, writer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diskCache.get(newOriginalKey) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      originalKey = newOriginalKey;</span><br><span class=\"line\">      sourceCacheGenerator = <span class=\"keyword\">new</span> DataCacheGenerator(Collections.singletonList(loadData.sourceKey), helper, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 我们能够将数据写入缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      isLoadingFromSourceData = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      cb.onDataFetcherReady(loadData.sourceKey, rewinder.rewindAndGet(), loadData.fetcher, loadData.fetcher.getDataSource(), loadData.sourceKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写入数据到缓存失败的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isLoadingFromSourceData) &#123;</span><br><span class=\"line\">      loadData.fetcher.cleanup();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"decodehelper.getsourceencoder()\">DecodeHelper.getSourceEncoder()<a title=\"#decodehelper.getsourceencoder()\" href=\"#decodehelper.getsourceencoder()\"></a></h6>\n<p>DecodeHelper.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;X&gt; <span class=\"function\">Encoder&lt;X&gt; <span class=\"title\">getSourceEncoder</span><span class=\"params\">(X data)</span> <span class=\"keyword\">throws</span> Registry.NoSourceEncoderAvailableException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> glideContext.getRegistry().getSourceEncoder(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Registry.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;X&gt; <span class=\"function\">Encoder&lt;X&gt; <span class=\"title\">getSourceEncoder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> X data)</span> <span class=\"keyword\">throws</span> NoSourceEncoderAvailableException </span>&#123;  </span><br><span class=\"line\">  Encoder&lt;X&gt; encoder = encoderRegistry.getEncoder((Class&lt;X&gt;) data.getClass());  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(encoder != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> encoder;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSourceEncoderAvailableException(data.getClass());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"register\">Register<a title=\"#register\" href=\"#register\"></a></h6>\n<blockquote>\n<p>每个数据类型对应一个编码器,Register就是用来记录这些的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry</span><br><span class=\"line\">        .append(ByteBuffer.class, <span class=\"keyword\">new</span> ByteBufferEncoder())</span><br><span class=\"line\">        .append(InputStream.class, <span class=\"keyword\">new</span> StreamEncoder(arrayPool))</span><br><span class=\"line\">        .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class, byteBufferBitmapDecoder)</span><br><span class=\"line\">        .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class, streamBitmapDecoder);</span><br></pre></td></tr></table></figure>\n<h5 id=\"decodefromretrieveddata()\">decodeFromRetrievedData()<a title=\"#decodefromretrieveddata()\" href=\"#decodefromretrieveddata()\"></a></h5>\n<blockquote>\n<p>处理返回的数据</p>\n</blockquote>\n<p><img src=\"https://z3.ax1x.com/2021/10/26/5oU7rD.png\" alt=\"5oU7rD.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;Data&gt; <span class=\"function\">Resource&lt;R&gt; <span class=\"title\">decodeFromData</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DataFetcher&lt;?&gt; fetcher, Data data, DataSource dataSource)</span> <span class=\"keyword\">throws</span> GlideException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> startTime = LogTime.getLogTime();</span><br><span class=\"line\">    Resource&lt;R&gt; result = decodeFromFetcher(data, dataSource);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class=\"line\">      logWithTimeAndKey(<span class=\"string\">&quot;Decoded result &quot;</span> + result, startTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    fetcher.cleanup();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;Data&gt; <span class=\"function\">Resource&lt;R&gt; <span class=\"title\">decodeFromFetcher</span><span class=\"params\">(Data data, DataSource dataSource)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> GlideException </span>&#123;</span><br><span class=\"line\">  LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> runLoadPath(data, dataSource, path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"enginejob\">EngineJob<a title=\"#enginejob\" href=\"#enginejob\"></a></h4>\n<blockquote>\n<p>通过添加和删除加载回调并在加载完成时通知回调来管理加载的类(管理加载过程中的一些回调)</p>\n</blockquote>\n<p>GlideExecutor是一个继承的Executorservice类，它显然是一个线程池。这里通过decodeJob来确定是否从缓存解析，如果是从缓存解析，调用diskCacheExecutor，否则，调用getActiveSourceExecutor</p>\n<ul>\n<li>willDecodeFromCache\n<ul>\n<li>如果此作业将尝试从磁盘缓存解码资源，则返回true</li>\n<li>如果始终从源解码，则返回false</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.decodeJob = decodeJob;</span><br><span class=\"line\">  GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : getActiveSourceExecutor();</span><br><span class=\"line\">  <span class=\"comment\">// 执行decodeJob线程任务</span></span><br><span class=\"line\">  executor.execute(decodeJob);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/4SVquTFcR8Wyv4GV/",
            "url": "https://onion99.github.io/2021/11/01/4SVquTFcR8Wyv4GV/",
            "title": "源码学习 - OkHttp",
            "date_published": "2021-10-31T21:28:18.000Z",
            "content_html": "<blockquote>\n<p>http的连接本质上是个socket，根据http协议，通过socket包装发送请求并获得返回结果</p>\n</blockquote>\n<p>网路连接库一开始的样子如下代码所示，其实只要符合Http协议的请求，就可以和网络进行交互，类似于OkHttp的网络请求库，帮助开发者方便和屏蔽了Http协议中类似于请求头，重连、合并、代理、返回结果解析等等Http协议细节的应用层实现。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val path = <span class=\"string\">&quot;http://www.baidu.com/&quot;</span></span><br><span class=\"line\">        val host = <span class=\"string\">&quot;www.baidu.com&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> socket: Socket? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> streamWriter: OutputStreamWriter? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bufferedWriter: BufferedWriter? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socket = Socket(host, <span class=\"number\">80</span>)</span><br><span class=\"line\">            streamWriter = OutputStreamWriter(socket.getOutputStream())</span><br><span class=\"line\">            bufferedWriter = BufferedWriter(streamWriter)</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">&quot;GET $path HTTP/1.1\\r\\n&quot;</span>)</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">&quot;Host: www.baidu.com\\r\\n&quot;</span>)</span><br><span class=\"line\">            bufferedWriter.write(<span class=\"string\">&quot;\\r\\n&quot;</span>)</span><br><span class=\"line\">            bufferedWriter.flush()</span><br><span class=\"line\">            val myRequest = BufferedReader(InputStreamReader(socket.getInputStream(), <span class=\"string\">&quot;UTF-8&quot;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">var</span> d = -<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (myRequest.read().also(&#123; d = it &#125;) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                print(d.toChar())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整体流程\">整体流程<a title=\"#整体流程\" href=\"#整体流程\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetExample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 核网络管理者 - 核心类</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">run</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 请求搭建</span></span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder().url(url).build();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      阻塞式execute -&gt; 立即调用请求，并阻塞，直到响应可以处理或出现错误</span></span><br><span class=\"line\"><span class=\"comment\">      为了避免资源泄漏，调用者应该关闭Response，而Response又会关闭底层的ResponseBody。 //确保响应(和底层响应体)是关闭的</span></span><br><span class=\"line\"><span class=\"comment\">      注意，传输层的成功(接收HTTP响应代码、报头和正文)不一定表示应用层的成功:响应可能仍然表示不满意的HTTP响应代码，如404或500。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (Response response = client.newCall(request).execute()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> response.body().string();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    GetExample example = <span class=\"keyword\">new</span> GetExample();</span><br><span class=\"line\">    String response = example.run(<span class=\"string\">&quot;https://raw.github.com/square/okhttp/master/README.md&quot;</span>);</span><br><span class=\"line\">    System.out.println(response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hiy4O.png\" alt=\"5hiy4O.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"连接建立\">连接建立<a title=\"#连接建立\" href=\"#连接建立\"></a></h3>\n<p>Volley等很多网络请求框架很多底层都是通过 HTTPURLConnection 来与服务端建立连接的，而 OkHttp 就比较优秀了。因为 HTTP 协议是建立在 TCP/IP 协议基础之上的，底层还是走的 Socket，所以OkHttp 直接使用 Socket 来完成 HTTP 请求。</p>\n<h3 id=\"okhttpclient\">OkHttpClient<a title=\"#okhttpclient\" href=\"#okhttpclient\"></a></h3>\n<p>官方推荐我们使用单例去创建OkHttpClient，重用所有HTTP调用的时候，性能是最佳的， 这是因为每个客户端都拥有自己的连接池和线程池。 重用连接和线程可减少延迟并节省内存。 相反，为每个请求创建一个客户端会浪费空闲池上的资源</p>\n<h3 id=\"request\">Request<a title=\"#request\" href=\"#request\"></a></h3>\n<p>采用Builder的方式进行设计，主要包含了url、method、headers、body和CacheControl组成的各种配置项</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Dispatcher dispatcher;  <span class=\"comment\">//分发器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Proxy proxy;  <span class=\"comment\">//代理</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;Protocol&gt; protocols; <span class=\"comment\">//协议</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;ConnectionSpec&gt; connectionSpecs; <span class=\"comment\">//传输层版本和连接协议</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;Interceptor&gt; interceptors; <span class=\"comment\">//拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List&lt;Interceptor&gt; networkInterceptors; <span class=\"comment\">//网络拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ProxySelector proxySelector; <span class=\"comment\">//代理选择</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> CookieJar cookieJar; <span class=\"comment\">//cookie</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Cache cache; <span class=\"comment\">//缓存</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> InternalCache internalCache;  <span class=\"comment\">//内部缓存</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> SocketFactory socketFactory;  <span class=\"comment\">//socket 工厂</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> SSLSocketFactory sslSocketFactory; <span class=\"comment\">//安全套接层socket 工厂，用于HTTPS</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> CertificateChainCleaner certificateChainCleaner; <span class=\"comment\">// 验证确认响应证书 适用 HTTPS 请求连接的主机名。</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> HostnameVerifier hostnameVerifier;    <span class=\"comment\">//  主机名字确认</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> CertificatePinner certificatePinner;  <span class=\"comment\">//  证书链</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Authenticator proxyAuthenticator;     <span class=\"comment\">//代理身份验证</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Authenticator authenticator;      <span class=\"comment\">// 本地身份验证</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> ConnectionPool connectionPool;    <span class=\"comment\">//连接池,复用连接</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Dns dns;  <span class=\"comment\">//域名</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> followSslRedirects;  <span class=\"comment\">//安全套接层重定向</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> followRedirects;  <span class=\"comment\">//本地重定向</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> retryOnConnectionFailure; <span class=\"comment\">//重试连接失败</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> connectTimeout;    <span class=\"comment\">//连接超时</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> readTimeout; <span class=\"comment\">//read 超时</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> writeTimeout; <span class=\"comment\">//write 超时 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"call\">Call<a title=\"#call\" href=\"#call\"></a></h3>\n<blockquote>\n<p>一个提供 HTTP 请求执行相关接口的接口类，具体的实现类是 RealCall</p>\n</blockquote>\n<ul>\n<li>可以取消</li>\n<li>此对象表示单个请求/响应对(流),因此不能执行两次</li>\n</ul>\n<h4 id=\"realcall\">RealCall<a title=\"#realcall\" href=\"#realcall\"></a></h4>\n<blockquote>\n<p>OkHttp的应用层和网络层之间的桥梁,包含了网络的连接、请求、响应和流处理整个流程,也是OkHttp中最关键核心的类</p>\n</blockquote>\n<h5 id=\"asynctimeout\">AsyncTimeout<a title=\"#asynctimeout\" href=\"#asynctimeout\"></a></h5>\n<p>此超时用在在后台线程执行超时时执行操作。 使用它来实现本地不支持的超时，例如写入时被阻止的套接字,子类应该覆盖timedOut以在发生超时时采取行动。 此方法将由共享看门狗线程调用，因此不应执行任何长时间运行的操作。 否则，我们可能会面临触发其他超时的风险。<br>\n使用sink和source将此超时应用于流。 返回的值将超时应用于包装流上的每个操作。<br>\n调用者应该在执行可能超时的工作之前调用enter ，然后退出。 exit的返回值表示是否触发了超时。 请注意，对timedOut的调用是异步的，可以在exit之后调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> val timeout = object : AsyncTimeout() &#123;  </span><br><span class=\"line\">  <span class=\"function\">override fun <span class=\"title\">timedOut</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 取消请求  </span></span><br><span class=\"line\">  cancel()  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;.apply &#123;  </span><br><span class=\"line\">  timeout(client.callTimeoutMillis.toLong(), MILLISECONDS)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"execute\">execute<a title=\"#execute\" href=\"#execute\"></a></h5>\n<blockquote>\n<p>同步请求,  马上执行并阻塞直到可以处理响应或出现错误</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>: Response &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Atomic就是原子性的意思，源码里用了Volatile属性，即能够保证在高并发的情况下只有一个线程能够访问这个属性值</span></span><br><span class=\"line\"><span class=\"comment\">   * executed 是一个原子变量，一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求,用 compareAndSet(false, true)</span></span><br><span class=\"line\"><span class=\"comment\">   * 判断多线程状态下，请求是否重新执行：如果值为false，则抛出一个IllegalStateException，并返回调用lazyMessage的结果。</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  check(executed.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123; <span class=\"string\">&quot;Already Executed&quot;</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 超时计数开始</span></span><br><span class=\"line\">  timeout.enter()</span><br><span class=\"line\">  <span class=\"comment\">// 执行请求前处理 -&gt; 栈跟踪，事件回调等等</span></span><br><span class=\"line\">  callStart()</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调度器开始执行</span></span><br><span class=\"line\">    client.dispatcher.executed(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 返回拦截器处理下的响应</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getResponseWithInterceptorChain()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调度器返回完成信号</span></span><br><span class=\"line\">    client.dispatcher.finished(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"enqueue\">enqueue<a title=\"#enqueue\" href=\"#enqueue\"></a></h5>\n<blockquote>\n<p>异步调度,  将请求放到队列中等到执行</p>\n</blockquote>\n<p>RealCall.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">enqueue</span><span class=\"params\">(responseCallback: <span class=\"type\">Callback</span>)</span></span> &#123;  </span><br><span class=\"line\">  <span class=\"comment\">// 首先判断当前请求是否已执行，如果已经执行则打印日志，并抛出 IllegalStateException 异常</span></span><br><span class=\"line\">  check(executed.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123; <span class=\"string\">&quot;Already Executed&quot;</span> &#125;  </span><br><span class=\"line\">  callStart()  </span><br><span class=\"line\">  <span class=\"comment\">// 创建一个AsyncCall对象,放进分发器队列中</span></span><br><span class=\"line\">  client.dispatcher.enqueue(AsyncCall(responseCallback))  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">callStart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个对象，该对象包含在执行此方法时创建的堆栈跟踪</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callStackTrace = Platform.<span class=\"keyword\">get</span>().getStackTraceForCloseable(<span class=\"string\">&quot;response.body().close()&quot;</span>)</span><br><span class=\"line\">    eventListener.callStart(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Dispatcher.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// https://zhuanlan.zhihu.com/p/261397170</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque -  Java 集合中双端队列的数组实现</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque 几乎没有容量限制，设计为线程不安全的，禁止 null 元素</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque是Deque的实现类，可以作为栈来使用，效率高于Stack；也可以作为队列来使用，效率高于LinkedList。</span></span><br><span class=\"line\"><span class=\"comment\">// ArrayDeque 大多数的额操作都在固定时间内运行，例外情况包括 remove，removeFirstOccurrence，removeLastOccurrence，contains，iterator.remove()，和批量操作，这些将以线性时间运行</span></span><br><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> runningSyncCalls = ArrayDeque&lt;RealCall&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">enqueue</span><span class=\"params\">(call: <span class=\"type\">AsyncCall</span>)</span></span> &#123;</span><br><span class=\"line\">  synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将请求 AsyncCall 添加到待执行队列</span></span><br><span class=\"line\">    readyAsyncCalls.add(call)</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前请求是否已存在可复用的 hos</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!call.call.forWebSocket) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> existingCall = findExistingCallWithHost(call.host)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (existingCall != <span class=\"literal\">null</span>) call.reuseCallsPerHostFrom(existingCall)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将符合条件的Call从readyAsyncCalls 提升到runningAsyncCalls并在执行它们</span></span><br><span class=\"line\">  promoteAndExecute()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RealCall.AsyncCall</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给当前AsyncCall异步线程设置名称</span></span><br><span class=\"line\">    threadName(<span class=\"string\">&quot;OkHttp <span class=\"subst\">$&#123;redactedUrl()&#125;</span>&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> signalledCallback = <span class=\"literal\">false</span></span><br><span class=\"line\">      timeout.enter()</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取请求结果</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> response = getResponseWithInterceptorChain()</span><br><span class=\"line\">        signalledCallback = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">// 触发相应回调</span></span><br><span class=\"line\">        responseCallback.onResponse(<span class=\"keyword\">this</span><span class=\"symbol\">@RealCall</span>, response)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (signalledCallback) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Do not signal the callback twice!</span></span><br><span class=\"line\">          Platform.<span class=\"keyword\">get</span>().log(<span class=\"string\">&quot;Callback failure for <span class=\"subst\">$&#123;toLoggableString()&#125;</span>&quot;</span>, Platform.INFO, e)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          responseCallback.onFailure(<span class=\"keyword\">this</span><span class=\"symbol\">@RealCall</span>, e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (t: Throwable) &#123;</span><br><span class=\"line\">        cancel()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!signalledCallback) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">val</span> canceledException = IOException(<span class=\"string\">&quot;canceled due to <span class=\"variable\">$t</span>&quot;</span>)</span><br><span class=\"line\">          canceledException.addSuppressed(t)</span><br><span class=\"line\">          responseCallback.onFailure(<span class=\"keyword\">this</span><span class=\"symbol\">@RealCall</span>, canceledException)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> t</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭请求</span></span><br><span class=\"line\">        client.dispatcher.finished(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatcher(分发器)\">Dispatcher(分发器)<a title=\"#dispatcher(分发器)\" href=\"#dispatcher(分发器)\"></a></h3>\n<blockquote>\n<p>用于管理其对应 OkHttpClient 的所有请求,对Call进行统一的控制，例如结束所有请求、获取线程池等等</p>\n</blockquote>\n<ul>\n<li>readyAsyncCalls：一个新的异步请求首先会被加入该队列中</li>\n<li>runningAsyncCalls：当前正在运行中的异步请求</li>\n<li>runningSyncCalls：当前正在运行的同步请求</li>\n</ul>\n<p>异步请求跟同步请求一样,最终都会调用到<code>getResponseWithInterceptorChain()</code></p>\n<h3 id=\"interceptor(拦截器)\">Interceptor(拦截器)<a title=\"#interceptor(拦截器)\" href=\"#interceptor(拦截器)\"></a></h3>\n<blockquote>\n<p>Interceptor 接口作为一个拦截器的抽象概念，被设计为责任链上的单位节点，用于观察、拦截、处理请求等，例如添加 Header、重定向、数据处理等等。<br>\nInterceptor 之间互相独立，每个 Interceptor 只负责自己关注的任务，不与其他 Interceptor 接触。</p>\n</blockquote>\n<p>RealCall.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Throws(IOException::class)</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getResponseWithInterceptorChain</span><span class=\"params\">()</span></span>: Response &#123;</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 2021/8/13 okhttp的核心是拦截器，而拦截器所采用的设计模式是责任链设计，即每个拦截器只处理与自己相关的业务逻辑 https://zhuanlan.zhihu.com/p/340090732</span></span><br><span class=\"line\">  <span class=\"comment\">// 构建整个网络请求拦截</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> interceptors = mutableListOf&lt;Interceptor&gt;()</span><br><span class=\"line\">  <span class=\"comment\">// 添加Client的拦截器</span></span><br><span class=\"line\">  interceptors += client.interceptors</span><br><span class=\"line\">  <span class=\"comment\">// 添加失败重连的拦截器</span></span><br><span class=\"line\">  interceptors += RetryAndFollowUpInterceptor(client)</span><br><span class=\"line\">  <span class=\"comment\">// 添加请求桥梁拦截器 - 在对用户的请求头部加了一些信息，然后在获取到的响应中也做了一些处理。而这些处理对用户是透明的，减少了客户请求的工作</span></span><br><span class=\"line\">  interceptors += BridgeInterceptor(client.cookieJar)</span><br><span class=\"line\">  <span class=\"comment\">// 添加缓存拦截器 - 理来自缓存的请求并将响应写入缓存。</span></span><br><span class=\"line\">  interceptors += CacheInterceptor(client.cache)</span><br><span class=\"line\">  <span class=\"comment\">// 添加请求中拦截器 - 打开与目标服务器的连接并继续下一个拦截器。 网络可能用于返回的响应，或使用条件 GET 验证缓存的响应</span></span><br><span class=\"line\">  interceptors += ConnectInterceptor</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!forWebSocket) &#123;</span><br><span class=\"line\">    interceptors += client.networkInterceptors</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这是链中的最后一个拦截器。 它对服务器进行网络调用,真正的网络请求从这里开始</span></span><br><span class=\"line\">  interceptors += CallServerInterceptor(forWebSocket)</span><br><span class=\"line\">  <span class=\"comment\">// 构建网络请求链 - 一个具体的拦截器链，承载着整个拦截器链：所有应用程序拦截器、OkHttp核心、所有网络拦截器，最后是网络调用者。</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> chain = RealInterceptorChain(</span><br><span class=\"line\">      call = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">      interceptors = interceptors,</span><br><span class=\"line\">      index = <span class=\"number\">0</span>,</span><br><span class=\"line\">      exchange = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      request = originalRequest,</span><br><span class=\"line\">      connectTimeoutMillis = client.connectTimeoutMillis,</span><br><span class=\"line\">      readTimeoutMillis = client.readTimeoutMillis,</span><br><span class=\"line\">      writeTimeoutMillis = client.writeTimeoutMillis</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> calledNoMoreExchanges = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> response = chain.proceed(originalRequest)</span><br><span class=\"line\">    <span class=\"comment\">// 是否取消请求</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCanceled()) &#123;</span><br><span class=\"line\">      response.closeQuietly()</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> IOException(<span class=\"string\">&quot;Canceled&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e: IOException) &#123;</span><br><span class=\"line\">    calledNoMoreExchanges = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> noMoreExchanges(e) <span class=\"keyword\">as</span> Throwable</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!calledNoMoreExchanges) &#123;</span><br><span class=\"line\">      noMoreExchanges(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RealInterceptorChain.kt</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Throws(IOException::class)</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">proceed</span><span class=\"params\">(request: <span class=\"type\">Request</span>)</span></span>: Response &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断拦截器是否为空</span></span><br><span class=\"line\">  check(index &lt; interceptors.size)</span><br><span class=\"line\">  <span class=\"comment\">// 请求数加1</span></span><br><span class=\"line\">  calls++</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exchange != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    check(exchange.finder.sameHostAndPort(request.url)) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;network interceptor <span class=\"subst\">$&#123;interceptors[index - <span class=\"number\">1</span>]&#125;</span> must retain the same host and port&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    check(calls == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;network interceptor <span class=\"subst\">$&#123;interceptors[index - <span class=\"number\">1</span>]&#125;</span> must call proceed() exactly once&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Call the next interceptor in the chain. 调用链中的下一个拦截器</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> next = copy(index = index + <span class=\"number\">1</span>, request = request)</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前的拦截器</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> interceptor = interceptors[index]</span><br><span class=\"line\">  <span class=\"comment\">// 开始一个个的执行每一个拦截器，每个拦截器的intercept都会调到 当前类的proceed ，直至最后一个CallServerInterceptor执行完</span></span><br><span class=\"line\">  <span class=\"meta\">@Suppress(<span class=\"meta-string\">&quot;USELESS_ELVIS&quot;</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> response = interceptor.intercept(next) ?: <span class=\"keyword\">throw</span> NullPointerException(<span class=\"string\">&quot;interceptor <span class=\"variable\">$interceptor</span> returned null&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exchange != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    check(index + <span class=\"number\">1</span> &gt;= interceptors.size || next.calls == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;network interceptor <span class=\"variable\">$interceptor</span> must call proceed() exactly once&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  check(response.body != <span class=\"literal\">null</span>) &#123; <span class=\"string\">&quot;interceptor <span class=\"variable\">$interceptor</span> returned a response with no body&quot;</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"chain\">Chain<a title=\"#chain\" href=\"#chain\"></a></h4>\n<blockquote>\n<p>Interceptor 与 Chain 彼此互相依赖，互相调用，共同发展，形成了一个完美的调用链</p>\n</blockquote>\n<p>Chain 被用来描述责任链，通过其中的 process 方法开始依次执行链上的每个节点，并返回处理后的 Response。<br>\nChain 的唯一实现为 RealInterceptorChain（下文简称 RIC），RIC 可以称之为<strong>拦截器责任链</strong>，其中的节点由 RealCall 中添加进来的 Interceptor 们组成。由于 Interceptor 的互相独立性，RIC 中还会包含一些公共参数及共享的对象。</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/25/5hbpJx.png\" alt=\"5hbpJx.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"about\">About<a title=\"#about\" href=\"#about\"></a></h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/116777864\" target=\"_blank\">OkHttp源码深度解析</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/104813091\" target=\"_blank\">OkHttp源码解析</a><br>\n<a href=\"https://juejin.cn/post/7020027832977850381\" target=\"_blank\">OkHttp源码原理</a></p>\n",
            "tags": [
                "源码解析"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/5FIszA6Ut2OHE8Sg/",
            "url": "https://onion99.github.io/2021/11/01/5FIszA6Ut2OHE8Sg/",
            "title": "安卓优化 - 布局优化",
            "date_published": "2021-10-31T20:50:14.000Z",
            "content_html": "<h3 id=\"布局耗时统计\">布局耗时统计<a title=\"#布局耗时统计\" href=\"#布局耗时统计\"></a></h3>\n<ul>\n<li>手动埋点</li>\n<li>AOP/ArtHook\n<ul>\n<li>切入Activity的setContentView</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"布局加载优化\">布局加载优化<a title=\"#布局加载优化\" href=\"#布局加载优化\"></a></h3>\n<ul>\n<li>代码写布局\n<ul>\n<li>Java代码写布局</li>\n<li>Anko</li>\n<li>JetpackCompose</li>\n</ul>\n</li>\n<li>X2C</li>\n<li>Litho</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"视图绘制优化\">视图绘制优化<a title=\"#视图绘制优化\" href=\"#视图绘制优化\"></a></h3>\n<ul>\n<li>优化布局层级以及嵌套\n<ul>\n<li>使用ConstraintLayout</li>\n</ul>\n</li>\n<li>避免过度绘制,自定义View避免多次调用 onDraw,onMeasure</li>\n<li>其他\n<ul>\n<li>ViewStub: 延迟初始化</li>\n<li>onDraw,onMeasure中避免创建大对象,耗时操作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"include\">Include<a title=\"#include\" href=\"#include\"></a></h4>\n<blockquote>\n<p>提高布局复用性</p>\n</blockquote>\n<p>login.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">include</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">layout</span>=<span class=\"string\">&quot;@layout/titlebar&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>include所在的layout的布局有给其设置id, 而include标签里面又给自己的根容器设置id,最好两个id都相同,否则findview时拿到空对象</p>\n<h4 id=\"merge\">Merge<a title=\"#merge\" href=\"#merge\"></a></h4>\n<blockquote>\n<p>帮助include标签排除多余的一层ViewGroup容器，减少view hierarchy的结构，提升UI渲染的性能</p>\n</blockquote>\n<p>titlebar.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">merge</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">&quot;20dp&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">&quot;20dp&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;标题&quot;</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">merge</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>因为merge标签并不是View,所以在通过LayoutInflate.inflate()方法渲染的时候,第二个参数必须指定一个父容器(parent),且第三个参数(attachToRoot)必须为true</li>\n<li>merge标签必须使用在根布局，并且ViewStub标签中的layout布局不能使用merge标签</li>\n</ul>\n<h4 id=\"viewstub\">ViewStub<a title=\"#viewstub\" href=\"#viewstub\"></a></h4>\n<blockquote>\n<p>延迟绘制View</p>\n</blockquote>\n<p>layout.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ViewStub</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/viewstub&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout</span>=<span class=\"string\">&quot;@layout/info&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>activity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewStub stub = ((ViewStub) findViewById(R.id.viewstub));</span><br><span class=\"line\"><span class=\"keyword\">if</span>(stub!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    View stubView = stub.inflate();</span><br><span class=\"line\">    EditText editText = (EditText) stubView.findViewById(R.id.edit_password);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ViewStub标签不支持merge标签</li>\n<li>ViewStub的inflate只能被调用一次,第二次调用会抛出异常</li>\n<li>虽然ViewStub是不占用任何空间的，但是每个布局都必须要指定layout_width和layout_height属性，否则运行就会报错</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/6JN9JxpnRSjVeWry/",
            "url": "https://onion99.github.io/2021/11/01/6JN9JxpnRSjVeWry/",
            "title": "安卓优化 - 线程优化",
            "date_published": "2021-10-31T20:48:51.000Z",
            "content_html": "<h3 id=\"线程调度\">线程调度<a title=\"#线程调度\" href=\"#线程调度\"></a></h3>\n<blockquote>\n<p>任意时刻，只有一个线程占用CPU，处于运行状态</p>\n</blockquote>\n<p>多线程并发：轮流获取cpu使用权<br>\nJVM负责线程调度：按照特定调度模型分配CPU使用权</p>\n<h4 id=\"调度模型\">调度模型<a title=\"#调度模型\" href=\"#调度模型\"></a></h4>\n<ul>\n<li>分时调度模型: 轮流获取,均匀分配cpu时间</li>\n<li>抢占式调度模型:  按照优先级来</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"android异步方式\">Android异步方式<a title=\"#android异步方式\" href=\"#android异步方式\"></a></h3>\n<ul>\n<li>Thread\n<ul>\n<li>最简单、常见的方式</li>\n<li>不易复用，频繁创建销毁开销大</li>\n</ul>\n</li>\n<li>HandlerThread\n<ul>\n<li>自带消息循环的线程</li>\n<li>串行执行,长时间运行，不断从队列中获取任务</li>\n</ul>\n</li>\n<li>IntentService\n<ul>\n<li>继承自Service在内部创建HandlerThread</li>\n<li>异步、不占用主线程</li>\n<li>优先级高，不易被系统kil</li>\n</ul>\n</li>\n<li>AsyncTask\n<ul>\n<li>Android提供的工具类</li>\n<li>无需自己处理线程切换</li>\n</ul>\n</li>\n<li>线程池\n<ul>\n<li>jdk提供的线程池</li>\n<li>易复用，减少频繁创建、销毁的时间</li>\n<li>功能强大：定时、任务列队、并发数控制等</li>\n</ul>\n</li>\n<li>RxJava\n<ul>\n<li>由强大的Scheduler集合提供</li>\n<li>不同类型的区分：IO密集型、CPU密集型</li>\n</ul>\n</li>\n<li>协程</li>\n</ul>\n<h3 id=\"线程使用准则\">线程使用准则<a title=\"#线程使用准则\" href=\"#线程使用准则\"></a></h3>\n<p>1、严禁使用new Thread,因为这样不便控制,可能产生预期之外的事情<br>\n2、提供基础线程池供各个业务栈使用（避免各个业务栈各自维护一套线程池，导致线程数过多）<br>\n3、根据任务类型选择合适的异步方式（优先级低长时间执行-HandlerThread，定时执行-线程池）<br>\n4、创建线程必须命名（方便定位线程归属，运行期Thread.currentThread().setName修改名字）<br>\n5、关键异步任务监控（异步不等于不耗时，AOP的方式来做监控）<br>\n6、重视优先级的设置（Process.setThreadPriority(),可以设置多次）</p>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/9LsQhIFgDkllFt0Q/",
            "url": "https://onion99.github.io/2021/11/01/9LsQhIFgDkllFt0Q/",
            "title": "安卓优化 - 包体积",
            "date_published": "2021-10-31T20:48:08.000Z",
            "content_html": "<p><a href=\"https://cloud.tencent.com/developer/article/1425318\" target=\"_blank\">Android APP 终极瘦身指南</a></p>\n<ul>\n<li>图片转WebP</li>\n<li>去掉不必要的so库</li>\n<li>开启shrinkResources去除无用资源</li>\n<li>开启minifyEnabled混淆代码</li>\n<li>删除无用的语言资源</li>\n<li>使用微信资源压缩打包工具</li>\n<li>避免重复库,以及避免不同版本的库</li>\n<li>AndroidManifest中 -&gt; android:extractNativeLibs=“true”</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/UYa5EEntsM9sKTYz/",
            "url": "https://onion99.github.io/2021/11/01/UYa5EEntsM9sKTYz/",
            "title": "安卓优化 - 卡顿优化",
            "date_published": "2021-10-31T20:47:12.000Z",
            "content_html": "<blockquote>\n<p>卡顿产生的根本原因就是CPU和GPU没有及时处理好数据，针对卡顿的优化就有思路了：尽可能减少 CPU 和 GPU 资源的消耗</p>\n</blockquote>\n<ul>\n<li>CPU：中央处理器（CPU，central processing unit）作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</li>\n<li>GPU：图形处理器（英语：Graphics Processing Unit，缩写：GPU），又称显示核心,做图像和图形相关运算工作的微处理器</li>\n</ul>\n<h3 id=\"卡顿检测\">卡顿检测<a title=\"#卡顿检测\" href=\"#卡顿检测\"></a></h3>\n<p><a href=\"https://blog.csdn.net/lmj623565791/article/details/58626355\" target=\"_blank\">Android UI性能优化 检测应用中的UI卡顿</a></p>\n<p><a href=\"https://www.jianshu.com/p/9e8f88eac490\" target=\"_blank\">Android性能优化-检测App卡顿 - 简书 (jianshu.com)</a></p>\n<span id=\"more\"></span>\n<h4 id=\"用ui线程looper打印的日志\">用UI线程Looper打印的日志<a title=\"#用ui线程looper打印的日志\" href=\"#用ui线程looper打印的日志\"></a></h4>\n<p>开源工具:<br>\n<a href=\"https://github.com/Kyson/AndroidGodEye\" target=\"_blank\">Kyson/AndroidGodEye: An app performance monitor(APM) , like “Android Studio profiler”, you can easily monitor the performance of your app real time in browser (github.com)</a></p>\n<p><a href=\"https://github.com/markzhai/AndroidPerformanceMonitor\" target=\"_blank\">markzhai/AndroidPerformanceMonitor: A transparent ui-block detection library for Android. (known as BlockCanary) </a></p>\n<p><a href=\"https://github.com/BzCoder/BlockCanaryCompat\" target=\"_blank\">BzCoder/BlockCanaryCompat: 卡顿监控，BlockCanary 适配Android O 以上系统 (github.com)</a></p>\n<h4 id=\"choreographer\">Choreographer<a title=\"#choreographer\" href=\"#choreographer\"></a></h4>\n<p>Android系统每隔16ms发出VSYNC信号，触发对UI进行渲染。开发者可以使用Choreographer#postFrameCallback设置自己的callback与Choreographer交互，你设置的FrameCallCack（doFrame方法）会在下一个frame被渲染时触发。理论上来说两次回调的时间周期应该在16ms，如果超过了16ms我们则认为发生了卡顿，我们主要就是利用两次回调间的时间周期来判断</p>\n<p>开源工具:<br>\n<a href=\"https://github.com/wasabeef/Takt\" target=\"_blank\">wasabeef/Takt: Takt is Android library for measuring the FPS using Choreographer</a></p>\n<p><a href=\"https://github.com/friendlyrobotnyc/TinyDancer\" target=\"_blank\">friendlyrobotnyc/TinyDancer: An android library for displaying fps from the choreographer and percentage of time with two or more frames dropped </a></p>\n<h3 id=\"anr分析\">ANR分析<a title=\"#anr分析\" href=\"#anr分析\"></a></h3>\n<blockquote>\n<p>Application Not Responding，也就是应用程序无响应</p>\n</blockquote>\n<h4 id=\"产生原因\">产生原因<a title=\"#产生原因\" href=\"#产生原因\"></a></h4>\n<ul>\n<li>InputDispatching Timeout：5秒内无法响应屏幕触摸事件或键盘输入事件</li>\n<li>BroadcastQueue Timeout ：在执行前台广播（BroadcastReceiver）的<code>onReceive()</code>函数时10秒没有处理完成，后台为60秒</li>\n<li>Service Timeout：前台服务20秒内，后台服务在200秒内没有执行完毕</li>\n<li>ContentProvider Timeout：ContentProvider的publish在10s内没进行完</li>\n<li>其他\n<ul>\n<li>主线程阻塞或主线程数据读取</li>\n<li>CPU满负荷，I/O阻塞</li>\n<li>内存不足</li>\n</ul>\n</li>\n</ul>\n<p>分析:</p>\n<ul>\n<li>log上的anr reason</li>\n<li>adb 导出ANR日志\n<ul>\n<li><code>adb pull /data/anr/traces.txt</code></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/T8ghe13OAeLx6NBP/",
            "url": "https://onion99.github.io/2021/11/01/T8ghe13OAeLx6NBP/",
            "title": "安卓优化 - 内存优化",
            "date_published": "2021-10-31T20:46:21.000Z",
            "content_html": "<h3 id=\"内存信息查看\">内存信息查看<a title=\"#内存信息查看\" href=\"#内存信息查看\"></a></h3>\n<p><a href=\"https://www.jianshu.com/p/28b9cd87e667\" target=\"_blank\">App内存优化实践：一步一步做内存分析与优化</a></p>\n<p>查看每个App进程可以分配到的最大内存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell getprop | grep dalvik.vm.heapsize</span><br></pre></td></tr></table></figure>\n<p>App的内存使用情况概览</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell dumpsys meminfo 包名</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化工具\">优化工具<a title=\"#优化工具\" href=\"#优化工具\"></a></h3>\n<ul>\n<li>CPU Profiler</li>\n<li>Memory Analyzer（MAT）</li>\n<li>LeakCannary</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"优化方向\">优化方向<a title=\"#优化方向\" href=\"#优化方向\"></a></h3>\n<p><a href=\"https://www.cnblogs.com/wangjie1990/p/11327112.html\" target=\"_blank\">Android 如何优化APP内存 </a></p>\n<ul>\n<li>谨慎使用Services\n<ul>\n<li>启动一个Service时， 系统需要始终保持运行该Service的进程,该Service占用的RAM对其他进程不共享</li>\n<li>避免使用持久性服务,如<code>JobScheduler</code>之类</li>\n</ul>\n</li>\n<li>使用经过优化的多数据容器\n<ul>\n<li>如SparseArray，SparseBooleanArray和LongSparseArray</li>\n<li>如有必要，您可以随时切换到原始数组以获得精简的数据结构</li>\n</ul>\n</li>\n<li>使用nano protobufs进行序列化数据</li>\n<li>避免内存泄漏\n<ul>\n<li>内存泄露会导致大量的垃圾收集事件发生,从而导致系统执行其他内容(如渲染或者传输)的时间变少</li>\n</ul>\n</li>\n<li>移除内存密集型资源，以及lib库\n<ul>\n<li>减小APK的大小</li>\n<li>请使用不进行反射扫描的依赖注入库(Dagger2),频繁的反射需要更多的CPU和内存消耗</li>\n<li>谨慎使用外部库,外部库可能对同一个功能有不一样的实现,这可能导致预期之外的事情</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        },
        {
            "id": "https://onion99.github.io/2021/11/01/4LlbPfdOOCp58LMK/",
            "url": "https://onion99.github.io/2021/11/01/4LlbPfdOOCp58LMK/",
            "title": "安卓优化 - 启动优化",
            "date_published": "2021-10-31T20:43:04.000Z",
            "content_html": "<h3 id=\"启动流程\">启动流程<a title=\"#启动流程\" href=\"#启动流程\"></a></h3>\n<h4 id=\"相关\">相关<a title=\"#相关\" href=\"#相关\"></a></h4>\n<blockquote>\n<p>启动的流程就是通过这六个大类在这三个进程之间不断通信的过程</p>\n</blockquote>\n<h5 id=\"三个进程\">三个进程<a title=\"#三个进程\" href=\"#三个进程\"></a></h5>\n<ul>\n<li>Launcher进程: 整个App启动流程的起点,负责处理桌面与用户之间的交互事件,可以想象为一个桌面启动器</li>\n<li>SystemServer进程: Android中的所有SystemServer都由其孵化(Fork)出来,例如AMS,WindowsMannager,PackageManagerService等</li>\n<li>App进程: 启动的App所在的进程</li>\n</ul>\n<span id=\"more\"></span>\n<h5 id=\"六个大类\">六个大类<a title=\"#六个大类\" href=\"#六个大类\"></a></h5>\n<ul>\n<li>ActivityManagerService:  即AMS,负责管理系统中四大组件的启动,切换,调度以及应用进程的管理</li>\n<li>Instrumentation: 监控应用程序和系统的交互</li>\n<li>ActivityThread: 应用的入口类，通过调用main方法，开启消息循环队列。ActivityThread所在的线程被称为主线程</li>\n<li>ApplicationThread: 提供Binder通讯接口，AMS则通过代理调用此App进程的本地方法</li>\n<li>ActivityManagerProxy：AMS服务在当前进程的代理类，负责与AMS通信</li>\n<li>ApplicationThreadProxy：ApplicationThread在AMS服务中的代理类，负责与ApplicationThread通信</li>\n</ul>\n<h4 id=\"顺序\">顺序<a title=\"#顺序\" href=\"#顺序\"></a></h4>\n<p><a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\" target=\"_blank\">APP启动流程解析,墙裂推荐</a><br>\n<a href=\"https://www.cnblogs.com/not2/p/14326090.html\" target=\"_blank\">App启动速度优化 T2</a><br>\n<a href=\"https://blog.csdn.net/huangliniqng/article/details/89364064\" target=\"_blank\">具体代码流程</a></p>\n<ol>\n<li>Launcher通知AMS, 要启动某一应用,并说明对应的LauncherActivity</li>\n<li>AMS表示收到, 等待Launcher进入Pause状态</li>\n<li>Launcher进入Pause状态, 通知AMS可以启动某一应用了</li>\n<li>AMS开始检查某一应用是否启动\n<ul>\n<li>是,则直接启动,流程终止</li>\n<li>否,AMS则在的进程中创建ActivityThread对象,并启动main函数</li>\n</ul>\n</li>\n<li>某一应用通知AMS启动准备就绪</li>\n<li>AMS通知某一应用要启动的页面,某一应用启动对应页面</li>\n</ol>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57Z1PJ.png\" alt=\"57Z1PJ.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"启动分类\">启动分类<a title=\"#启动分类\" href=\"#启动分类\"></a></h3>\n<ul>\n<li>冷启动\n<ul>\n<li>耗时最多,优化重点</li>\n<li><img src=\"https://z3.ax1x.com/2021/10/27/57ZxJJ.png\" alt=\"57ZxJJ.png\" loading=\"lazy\" class=\"φbp\"></li>\n</ul>\n</li>\n<li>热启动\n<ul>\n<li>最快.即后台到前台的切换</li>\n</ul>\n</li>\n<li>温启动\n<ul>\n<li>较快,只重走Activity的生命周期,即销毁后重建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"耗时统计\">耗时统计<a title=\"#耗时统计\" href=\"#耗时统计\"></a></h3>\n<h4 id=\"systrace\">Systrace<a title=\"#systrace\" href=\"#systrace\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TraceCompat.beginSection(<span class=\"string\">&quot;sectionName&quot;</span>)</span><br><span class=\"line\">TraceCompat.endSection();</span><br></pre></td></tr></table></figure>\n<p><code>python systrace.py -t 10 [other-options] [categories]</code></p>\n<h4 id=\"traceview\">Traceview<a title=\"#traceview\" href=\"#traceview\"></a></h4>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57llge.png\" alt=\"57llge.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>使用方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Debug.startMethodTracing(<span class=\"string\">&quot;fileName&quot;</span>)</span><br><span class=\"line\">Debug.stopMethodTracing()</span><br></pre></td></tr></table></figure>\n<p>运行之后可以在目录下生成文件：内部存储/android/data/${application}/files/fileName.trace，此文件可以使用Android Studio Profile打开</p>\n<ul>\n<li>Wall Clock time : 是线程真正执行的时间</li>\n<li>Thread time : CPU执行的时间,比Wall Clock Time少,不包含锁时间,等待时间</li>\n<li>Top Down:就是函数的调用列表</li>\n<li>Call Chart: 系统Api黄色，应用调用的方法绿色，第三方Api(java sdk也属于第三方)蓝色</li>\n<li>Flame Chart:  主要的作用是收集调用方法的时间，比如多次调用LayoutInflate.inflate，Flame Chart会把他们都收集到一起。</li>\n<li>Bottom Up: 和Top Down是相反的</li>\n</ul>\n<h4 id=\"adb-命令统计\">Adb 命令统计<a title=\"#adb-命令统计\" href=\"#adb-命令统计\"></a></h4>\n<p><code>adb shell am start -S -W 包名/启动类的全限定名</code></p>\n<p>ThisTime : 最后一个 Activity 的启动耗时<br>\nTotalTime : 启动一连串的 Activity 总耗时<br>\nWaitTime : 应用进程的创建过程 + TotalTime</p>\n<h4 id=\"系统日志统计\">系统日志统计<a title=\"#系统日志统计\" href=\"#系统日志统计\"></a></h4>\n<p>过滤<code>displayed</code>输出的启动日志</p>\n<p><img src=\"https://z3.ax1x.com/2021/10/27/57mU4e.png\" alt=\"57mU4e.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"冷启动优化\">冷启动优化<a title=\"#冷启动优化\" href=\"#冷启动优化\"></a></h3>\n<p><a href=\"https://jishuin.proginn.com/p/763bfbd345f0\" target=\"_blank\"> App 启动时间优化详解</a></p>\n<p>优化方向:</p>\n<ul>\n<li>延迟加载 / 懒加载</li>\n<li>异步线程执行耗时操作，如图片加载、网络访问、IO操作等</li>\n<li>ViewStub的使用</li>\n<li>减少布局层次和嵌套布局</li>\n</ul>\n",
            "tags": [
                "性能优化"
            ]
        }
    ]
}